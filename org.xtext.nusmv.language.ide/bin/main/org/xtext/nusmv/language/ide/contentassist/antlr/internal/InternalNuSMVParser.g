/*
 * generated by Xtext 2.21.0
 */
parser grammar InternalNuSMVParser;

options {
	tokenVocab=InternalNuSMVLexer;
	superClass=AbstractInternalContentAssistParser;
	backtrack=true;
}

@header {
package org.xtext.nusmv.language.ide.contentassist.antlr.internal;
import java.util.Map;
import java.util.HashMap;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.xtext.nusmv.language.services.NuSMVGrammarAccess;

}
@members {
	private NuSMVGrammarAccess grammarAccess;
	private final Map<String, String> tokenNameToValue = new HashMap<String, String>();
	
	{
		tokenNameToValue.put("ExclamationMark", "'!'");
		tokenNameToValue.put("Ampersand", "'&'");
		tokenNameToValue.put("LeftParenthesis", "'('");
		tokenNameToValue.put("RightParenthesis", "')'");
		tokenNameToValue.put("Asterisk", "'*'");
		tokenNameToValue.put("PlusSign", "'+'");
		tokenNameToValue.put("Comma", "','");
		tokenNameToValue.put("HyphenMinus", "'-'");
		tokenNameToValue.put("FullStop", "'.'");
		tokenNameToValue.put("Solidus", "'/'");
		tokenNameToValue.put("Colon", "':'");
		tokenNameToValue.put("Semicolon", "';'");
		tokenNameToValue.put("LessThanSign", "'<'");
		tokenNameToValue.put("EqualsSign", "'='");
		tokenNameToValue.put("GreaterThanSign", "'>'");
		tokenNameToValue.put("A", "'A'");
		tokenNameToValue.put("E", "'E'");
		tokenNameToValue.put("F", "'F'");
		tokenNameToValue.put("G", "'G'");
		tokenNameToValue.put("H", "'H'");
		tokenNameToValue.put("O", "'O'");
		tokenNameToValue.put("S", "'S'");
		tokenNameToValue.put("T", "'T'");
		tokenNameToValue.put("U", "'U'");
		tokenNameToValue.put("V", "'V'");
		tokenNameToValue.put("X", "'X'");
		tokenNameToValue.put("Y", "'Y'");
		tokenNameToValue.put("Z", "'Z'");
		tokenNameToValue.put("LeftSquareBracket", "'['");
		tokenNameToValue.put("RightSquareBracket", "']'");
		tokenNameToValue.put("LeftCurlyBracket", "'{'");
		tokenNameToValue.put("VerticalLine", "'|'");
		tokenNameToValue.put("RightCurlyBracket", "'}'");
		tokenNameToValue.put("ExclamationMarkEqualsSign", "'!='");
		tokenNameToValue.put("HyphenMinusGreaterThanSign", "'->'");
		tokenNameToValue.put("FullStopFullStop", "'..'");
		tokenNameToValue.put("ColonColon", "'::'");
		tokenNameToValue.put("ColonEqualsSign", "':='");
		tokenNameToValue.put("LessThanSignLessThanSign", "'<<'");
		tokenNameToValue.put("LessThanSignEqualsSign", "'<='");
		tokenNameToValue.put("GreaterThanSignEqualsSign", "'>='");
		tokenNameToValue.put("GreaterThanSignGreaterThanSign", "'>>'");
		tokenNameToValue.put("AF", "'AF'");
		tokenNameToValue.put("AG", "'AG'");
		tokenNameToValue.put("AX", "'AX'");
		tokenNameToValue.put("EF", "'EF'");
		tokenNameToValue.put("EG", "'EG'");
		tokenNameToValue.put("EX", "'EX'");
		tokenNameToValue.put("In", "'in'");
		tokenNameToValue.put("Of", "'of'");
		tokenNameToValue.put("LessThanSignHyphenMinusGreaterThanSign", "'<->'");
		tokenNameToValue.put("ABF", "'ABF'");
		tokenNameToValue.put("ABG", "'ABG'");
		tokenNameToValue.put("EBF", "'EBF'");
		tokenNameToValue.put("EBG", "'EBG'");
		tokenNameToValue.put("ISA", "'ISA'");
		tokenNameToValue.put("MAX", "'MAX'");
		tokenNameToValue.put("MIN", "'MIN'");
		tokenNameToValue.put("VAR", "'VAR'");
		tokenNameToValue.put("Mod", "'mod'");
		tokenNameToValue.put("Xor", "'xor'");
		tokenNameToValue.put("INIT", "'INIT'");
		tokenNameToValue.put("IVAR", "'IVAR'");
		tokenNameToValue.put("NAME", "'NAME'");
		tokenNameToValue.put("SPEC", "'SPEC'");
		tokenNameToValue.put("TRUE", "'TRUE'");
		tokenNameToValue.put("Bool", "'bool'");
		tokenNameToValue.put("Case", "'case'");
		tokenNameToValue.put("Esac", "'esac'");
		tokenNameToValue.put("Init", "'init'");
		tokenNameToValue.put("Next", "'next'");
		tokenNameToValue.put("Self", "'self'");
		tokenNameToValue.put("Word", "'word'");
		tokenNameToValue.put("Xnor", "'xnor'");
		tokenNameToValue.put("FALSE", "'FALSE'");
		tokenNameToValue.put("INVAR", "'INVAR'");
		tokenNameToValue.put("TRANS", "'TRANS'");
		tokenNameToValue.put("Array", "'array'");
		tokenNameToValue.put("Toint", "'toint'");
		tokenNameToValue.put("Union", "'union'");
		tokenNameToValue.put("Word1", "'word1'");
		tokenNameToValue.put("ASSIGN", "'ASSIGN'");
		tokenNameToValue.put("DEFINE", "'DEFINE'");
		tokenNameToValue.put("MODULE", "'MODULE'");
		tokenNameToValue.put("COMPUTE", "'COMPUTE'");
		tokenNameToValue.put("CTLSPEC", "'CTLSPEC'");
		tokenNameToValue.put("JUSTICE", "'JUSTICE'");
		tokenNameToValue.put("LTLSPEC", "'LTLSPEC'");
		tokenNameToValue.put("PSLSPEC", "'PSLSPEC'");
		tokenNameToValue.put("Boolean", "'boolean'");
		tokenNameToValue.put("Process", "'process'");
		tokenNameToValue.put("FAIRNESS", "'FAIRNESS'");
		tokenNameToValue.put("Unsigned", "'unsigned'");
		tokenNameToValue.put("CONSTANTS", "'CONSTANTS'");
		tokenNameToValue.put("FROZENVAR", "'FROZENVAR'");
		tokenNameToValue.put("INVARSPEC", "'INVARSPEC'");
		tokenNameToValue.put("SignedWord", "'signed word'");
		tokenNameToValue.put("COMPASSION", "'COMPASSION ('");
	}

	public void setGrammarAccess(NuSMVGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		String result = tokenNameToValue.get(tokenName);
		if (result == null)
			result = tokenName;
		return result;
	}
}

// Entry rule entryRuleNuSmvModel
entryRuleNuSmvModel
@init { 
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT");
}
:
{ before(grammarAccess.getNuSmvModelRule()); }
	 ruleNuSmvModel
{ after(grammarAccess.getNuSmvModelRule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule NuSmvModel
ruleNuSmvModel 
	@init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT");
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNuSmvModelAccess().getModulesAssignment()); }
		(rule__NuSmvModel__ModulesAssignment)*
		{ after(grammarAccess.getNuSmvModelAccess().getModulesAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}

// Entry rule entryRuleModule
entryRuleModule
:
{ before(grammarAccess.getModuleRule()); }
	 ruleModule
{ after(grammarAccess.getModuleRule()); } 
	 EOF 
;

// Rule Module
ruleModule 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getModuleAccess().getGroup()); }
		(rule__Module__Group__0)
		{ after(grammarAccess.getModuleAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleModuleElement
entryRuleModuleElement
@init { 
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT");
}
:
{ before(grammarAccess.getModuleElementRule()); }
	 ruleModuleElement
{ after(grammarAccess.getModuleElementRule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule ModuleElement
ruleModuleElement 
	@init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT");
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getModuleElementAccess().getAlternatives()); }
		(rule__ModuleElement__Alternatives)
		{ after(grammarAccess.getModuleElementAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}

// Entry rule entryRuleVariableDeclaration
entryRuleVariableDeclaration
@init { 
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT");
}
:
{ before(grammarAccess.getVariableDeclarationRule()); }
	 ruleVariableDeclaration
{ after(grammarAccess.getVariableDeclarationRule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule VariableDeclaration
ruleVariableDeclaration 
	@init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT");
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVariableDeclarationAccess().getGroup()); }
		(rule__VariableDeclaration__Group__0)
		{ after(grammarAccess.getVariableDeclarationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}

// Entry rule entryRuleIVariableDeclaration
entryRuleIVariableDeclaration
@init { 
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT");
}
:
{ before(grammarAccess.getIVariableDeclarationRule()); }
	 ruleIVariableDeclaration
{ after(grammarAccess.getIVariableDeclarationRule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule IVariableDeclaration
ruleIVariableDeclaration 
	@init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT");
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIVariableDeclarationAccess().getGroup()); }
		(rule__IVariableDeclaration__Group__0)
		{ after(grammarAccess.getIVariableDeclarationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}

// Entry rule entryRuleFrozenVariableDeclaration
entryRuleFrozenVariableDeclaration
@init { 
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT");
}
:
{ before(grammarAccess.getFrozenVariableDeclarationRule()); }
	 ruleFrozenVariableDeclaration
{ after(grammarAccess.getFrozenVariableDeclarationRule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule FrozenVariableDeclaration
ruleFrozenVariableDeclaration 
	@init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT");
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFrozenVariableDeclarationAccess().getGroup()); }
		(rule__FrozenVariableDeclaration__Group__0)
		{ after(grammarAccess.getFrozenVariableDeclarationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}

// Entry rule entryRuleVarBody
entryRuleVarBody
@init { 
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT");
}
:
{ before(grammarAccess.getVarBodyRule()); }
	 ruleVarBody
{ after(grammarAccess.getVarBodyRule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule VarBody
ruleVarBody 
	@init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT");
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVarBodyAccess().getGroup()); }
		(rule__VarBody__Group__0)
		{ after(grammarAccess.getVarBodyAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}

// Entry rule entryRuleDefineDeclaration
entryRuleDefineDeclaration
@init { 
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT");
}
:
{ before(grammarAccess.getDefineDeclarationRule()); }
	 ruleDefineDeclaration
{ after(grammarAccess.getDefineDeclarationRule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule DefineDeclaration
ruleDefineDeclaration 
	@init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT");
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDefineDeclarationAccess().getGroup()); }
		(rule__DefineDeclaration__Group__0)
		{ after(grammarAccess.getDefineDeclarationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}

// Entry rule entryRuleDefineBody
entryRuleDefineBody
@init { 
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT");
}
:
{ before(grammarAccess.getDefineBodyRule()); }
	 ruleDefineBody
{ after(grammarAccess.getDefineBodyRule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule DefineBody
ruleDefineBody 
	@init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT");
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDefineBodyAccess().getGroup()); }
		(rule__DefineBody__Group__0)
		{ after(grammarAccess.getDefineBodyAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}

// Entry rule entryRuleConstantsDeclaration
entryRuleConstantsDeclaration
@init { 
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT");
}
:
{ before(grammarAccess.getConstantsDeclarationRule()); }
	 ruleConstantsDeclaration
{ after(grammarAccess.getConstantsDeclarationRule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule ConstantsDeclaration
ruleConstantsDeclaration 
	@init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT");
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getConstantsDeclarationAccess().getGroup()); }
		(rule__ConstantsDeclaration__Group__0)
		{ after(grammarAccess.getConstantsDeclarationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}

// Entry rule entryRuleAssignConstraint
entryRuleAssignConstraint
@init { 
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT");
}
:
{ before(grammarAccess.getAssignConstraintRule()); }
	 ruleAssignConstraint
{ after(grammarAccess.getAssignConstraintRule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule AssignConstraint
ruleAssignConstraint 
	@init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT");
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAssignConstraintAccess().getGroup()); }
		(rule__AssignConstraint__Group__0)
		{ after(grammarAccess.getAssignConstraintAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}

// Entry rule entryRuleAssignBody
entryRuleAssignBody
@init { 
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT");
}
:
{ before(grammarAccess.getAssignBodyRule()); }
	 ruleAssignBody
{ after(grammarAccess.getAssignBodyRule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule AssignBody
ruleAssignBody 
	@init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT");
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAssignBodyAccess().getAlternatives()); }
		(rule__AssignBody__Alternatives)
		{ after(grammarAccess.getAssignBodyAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}

// Entry rule entryRuleVarBodyAssign
entryRuleVarBodyAssign
@init { 
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT");
}
:
{ before(grammarAccess.getVarBodyAssignRule()); }
	 ruleVarBodyAssign
{ after(grammarAccess.getVarBodyAssignRule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule VarBodyAssign
ruleVarBodyAssign 
	@init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT");
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVarBodyAssignAccess().getGroup()); }
		(rule__VarBodyAssign__Group__0)
		{ after(grammarAccess.getVarBodyAssignAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}

// Entry rule entryRuleInitBody
entryRuleInitBody
@init { 
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT");
}
:
{ before(grammarAccess.getInitBodyRule()); }
	 ruleInitBody
{ after(grammarAccess.getInitBodyRule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule InitBody
ruleInitBody 
	@init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT");
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getInitBodyAccess().getGroup()); }
		(rule__InitBody__Group__0)
		{ after(grammarAccess.getInitBodyAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}

// Entry rule entryRuleNextBody
entryRuleNextBody
@init { 
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT");
}
:
{ before(grammarAccess.getNextBodyRule()); }
	 ruleNextBody
{ after(grammarAccess.getNextBodyRule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule NextBody
ruleNextBody 
	@init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT");
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNextBodyAccess().getGroup()); }
		(rule__NextBody__Group__0)
		{ after(grammarAccess.getNextBodyAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}

// Entry rule entryRuleTransConstraint
entryRuleTransConstraint
@init { 
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT");
}
:
{ before(grammarAccess.getTransConstraintRule()); }
	 ruleTransConstraint
{ after(grammarAccess.getTransConstraintRule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule TransConstraint
ruleTransConstraint 
	@init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT");
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTransConstraintAccess().getGroup()); }
		(rule__TransConstraint__Group__0)
		{ after(grammarAccess.getTransConstraintAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}

// Entry rule entryRuleInitConstraint
entryRuleInitConstraint
@init { 
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT");
}
:
{ before(grammarAccess.getInitConstraintRule()); }
	 ruleInitConstraint
{ after(grammarAccess.getInitConstraintRule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule InitConstraint
ruleInitConstraint 
	@init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT");
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getInitConstraintAccess().getGroup()); }
		(rule__InitConstraint__Group__0)
		{ after(grammarAccess.getInitConstraintAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}

// Entry rule entryRuleInvarConstraint
entryRuleInvarConstraint
@init { 
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT");
}
:
{ before(grammarAccess.getInvarConstraintRule()); }
	 ruleInvarConstraint
{ after(grammarAccess.getInvarConstraintRule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule InvarConstraint
ruleInvarConstraint 
	@init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT");
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getInvarConstraintAccess().getGroup()); }
		(rule__InvarConstraint__Group__0)
		{ after(grammarAccess.getInvarConstraintAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}

// Entry rule entryRuleFairnessConstraint
entryRuleFairnessConstraint
@init { 
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT");
}
:
{ before(grammarAccess.getFairnessConstraintRule()); }
	 ruleFairnessConstraint
{ after(grammarAccess.getFairnessConstraintRule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule FairnessConstraint
ruleFairnessConstraint 
	@init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT");
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFairnessConstraintAccess().getAlternatives()); }
		(rule__FairnessConstraint__Alternatives)
		{ after(grammarAccess.getFairnessConstraintAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}

// Entry rule entryRuleFairnessExpression
entryRuleFairnessExpression
@init { 
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT");
}
:
{ before(grammarAccess.getFairnessExpressionRule()); }
	 ruleFairnessExpression
{ after(grammarAccess.getFairnessExpressionRule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule FairnessExpression
ruleFairnessExpression 
	@init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT");
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFairnessExpressionAccess().getGroup()); }
		(rule__FairnessExpression__Group__0)
		{ after(grammarAccess.getFairnessExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}

// Entry rule entryRuleJusticeExpression
entryRuleJusticeExpression
@init { 
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT");
}
:
{ before(grammarAccess.getJusticeExpressionRule()); }
	 ruleJusticeExpression
{ after(grammarAccess.getJusticeExpressionRule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule JusticeExpression
ruleJusticeExpression 
	@init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT");
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getJusticeExpressionAccess().getGroup()); }
		(rule__JusticeExpression__Group__0)
		{ after(grammarAccess.getJusticeExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}

// Entry rule entryRuleCompassionExpression
entryRuleCompassionExpression
@init { 
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT");
}
:
{ before(grammarAccess.getCompassionExpressionRule()); }
	 ruleCompassionExpression
{ after(grammarAccess.getCompassionExpressionRule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule CompassionExpression
ruleCompassionExpression 
	@init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT");
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCompassionExpressionAccess().getGroup()); }
		(rule__CompassionExpression__Group__0)
		{ after(grammarAccess.getCompassionExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}

// Entry rule entryRuleCtlSpecification
entryRuleCtlSpecification
@init { 
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT");
}
:
{ before(grammarAccess.getCtlSpecificationRule()); }
	 ruleCtlSpecification
{ after(grammarAccess.getCtlSpecificationRule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule CtlSpecification
ruleCtlSpecification 
	@init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT");
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCtlSpecificationAccess().getGroup()); }
		(rule__CtlSpecification__Group__0)
		{ after(grammarAccess.getCtlSpecificationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}

// Entry rule entryRulePslSpecification
entryRulePslSpecification
@init { 
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT");
}
:
{ before(grammarAccess.getPslSpecificationRule()); }
	 rulePslSpecification
{ after(grammarAccess.getPslSpecificationRule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule PslSpecification
rulePslSpecification 
	@init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT");
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPslSpecificationAccess().getGroup()); }
		(rule__PslSpecification__Group__0)
		{ after(grammarAccess.getPslSpecificationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}

// Entry rule entryRuleInvarSpecification
entryRuleInvarSpecification
@init { 
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT");
}
:
{ before(grammarAccess.getInvarSpecificationRule()); }
	 ruleInvarSpecification
{ after(grammarAccess.getInvarSpecificationRule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule InvarSpecification
ruleInvarSpecification 
	@init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT");
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getInvarSpecificationAccess().getAlternatives()); }
		(rule__InvarSpecification__Alternatives)
		{ after(grammarAccess.getInvarSpecificationAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}

// Entry rule entryRuleIsaDeclaration
entryRuleIsaDeclaration
@init { 
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT");
}
:
{ before(grammarAccess.getIsaDeclarationRule()); }
	 ruleIsaDeclaration
{ after(grammarAccess.getIsaDeclarationRule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule IsaDeclaration
ruleIsaDeclaration 
	@init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT");
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIsaDeclarationAccess().getGroup()); }
		(rule__IsaDeclaration__Group__0)
		{ after(grammarAccess.getIsaDeclarationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}

// Entry rule entryRuleLtlSpecification
entryRuleLtlSpecification
@init { 
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT");
}
:
{ before(grammarAccess.getLtlSpecificationRule()); }
	 ruleLtlSpecification
{ after(grammarAccess.getLtlSpecificationRule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule LtlSpecification
ruleLtlSpecification 
	@init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT");
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLtlSpecificationAccess().getGroup()); }
		(rule__LtlSpecification__Group__0)
		{ after(grammarAccess.getLtlSpecificationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}

// Entry rule entryRuleType
entryRuleType
@init { 
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT");
}
:
{ before(grammarAccess.getTypeRule()); }
	 ruleType
{ after(grammarAccess.getTypeRule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule Type
ruleType 
	@init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT");
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTypeAccess().getAlternatives()); }
		(rule__Type__Alternatives)
		{ after(grammarAccess.getTypeAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}

// Entry rule entryRuleSimpleType
entryRuleSimpleType
@init { 
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT");
}
:
{ before(grammarAccess.getSimpleTypeRule()); }
	 ruleSimpleType
{ after(grammarAccess.getSimpleTypeRule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule SimpleType
ruleSimpleType 
	@init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT");
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSimpleTypeAccess().getAlternatives()); }
		(rule__SimpleType__Alternatives)
		{ after(grammarAccess.getSimpleTypeAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}

// Entry rule entryRuleModuleType
entryRuleModuleType
@init { 
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT");
}
:
{ before(grammarAccess.getModuleTypeRule()); }
	 ruleModuleType
{ after(grammarAccess.getModuleTypeRule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule ModuleType
ruleModuleType 
	@init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT");
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getModuleTypeAccess().getAlternatives()); }
		(rule__ModuleType__Alternatives)
		{ after(grammarAccess.getModuleTypeAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}

// Entry rule entryRuleVal
entryRuleVal
@init { 
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT");
}
:
{ before(grammarAccess.getValRule()); }
	 ruleVal
{ after(grammarAccess.getValRule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule Val
ruleVal 
	@init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT");
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getValAccess().getGroup()); }
		(rule__Val__Group__0)
		{ after(grammarAccess.getValAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}

// Entry rule entryRuleNextExpression
entryRuleNextExpression
@init { 
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT");
}
:
{ before(grammarAccess.getNextExpressionRule()); }
	 ruleNextExpression
{ after(grammarAccess.getNextExpressionRule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule NextExpression
ruleNextExpression 
	@init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT");
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNextExpressionAccess().getSimpleExpressionAssignment()); }
		(rule__NextExpression__SimpleExpressionAssignment)
		{ after(grammarAccess.getNextExpressionAccess().getSimpleExpressionAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}

// Entry rule entryRuleSimpleExpression
entryRuleSimpleExpression
:
{ before(grammarAccess.getSimpleExpressionRule()); }
	 ruleSimpleExpression
{ after(grammarAccess.getSimpleExpressionRule()); } 
	 EOF 
;

// Rule SimpleExpression
ruleSimpleExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSimpleExpressionAccess().getLTLbinExpressionParserRuleCall()); }
		(ruleLTLbinExpression)
		{ after(grammarAccess.getSimpleExpressionAccess().getLTLbinExpressionParserRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLTLbinExpression
entryRuleLTLbinExpression
:
{ before(grammarAccess.getLTLbinExpressionRule()); }
	 ruleLTLbinExpression
{ after(grammarAccess.getLTLbinExpressionRule()); } 
	 EOF 
;

// Rule LTLbinExpression
ruleLTLbinExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLTLbinExpressionAccess().getGroup()); }
		(rule__LTLbinExpression__Group__0)
		{ after(grammarAccess.getLTLbinExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleImpliesExpression
entryRuleImpliesExpression
:
{ before(grammarAccess.getImpliesExpressionRule()); }
	 ruleImpliesExpression
{ after(grammarAccess.getImpliesExpressionRule()); } 
	 EOF 
;

// Rule ImpliesExpression
ruleImpliesExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getImpliesExpressionAccess().getGroup()); }
		(rule__ImpliesExpression__Group__0)
		{ after(grammarAccess.getImpliesExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleIffExpression
entryRuleIffExpression
:
{ before(grammarAccess.getIffExpressionRule()); }
	 ruleIffExpression
{ after(grammarAccess.getIffExpressionRule()); } 
	 EOF 
;

// Rule IffExpression
ruleIffExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIffExpressionAccess().getGroup()); }
		(rule__IffExpression__Group__0)
		{ after(grammarAccess.getIffExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleOrExpression
entryRuleOrExpression
:
{ before(grammarAccess.getOrExpressionRule()); }
	 ruleOrExpression
{ after(grammarAccess.getOrExpressionRule()); } 
	 EOF 
;

// Rule OrExpression
ruleOrExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getOrExpressionAccess().getGroup()); }
		(rule__OrExpression__Group__0)
		{ after(grammarAccess.getOrExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAndExpression
entryRuleAndExpression
:
{ before(grammarAccess.getAndExpressionRule()); }
	 ruleAndExpression
{ after(grammarAccess.getAndExpressionRule()); } 
	 EOF 
;

// Rule AndExpression
ruleAndExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAndExpressionAccess().getGroup()); }
		(rule__AndExpression__Group__0)
		{ after(grammarAccess.getAndExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleComparisonExpression
entryRuleComparisonExpression
:
{ before(grammarAccess.getComparisonExpressionRule()); }
	 ruleComparisonExpression
{ after(grammarAccess.getComparisonExpressionRule()); } 
	 EOF 
;

// Rule ComparisonExpression
ruleComparisonExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getComparisonExpressionAccess().getGroup()); }
		(rule__ComparisonExpression__Group__0)
		{ after(grammarAccess.getComparisonExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleInExpression
entryRuleInExpression
:
{ before(grammarAccess.getInExpressionRule()); }
	 ruleInExpression
{ after(grammarAccess.getInExpressionRule()); } 
	 EOF 
;

// Rule InExpression
ruleInExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getInExpressionAccess().getGroup()); }
		(rule__InExpression__Group__0)
		{ after(grammarAccess.getInExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleUnionExpression
entryRuleUnionExpression
:
{ before(grammarAccess.getUnionExpressionRule()); }
	 ruleUnionExpression
{ after(grammarAccess.getUnionExpressionRule()); } 
	 EOF 
;

// Rule UnionExpression
ruleUnionExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getUnionExpressionAccess().getGroup()); }
		(rule__UnionExpression__Group__0)
		{ after(grammarAccess.getUnionExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRightShift
entryRuleRightShift
:
{ before(grammarAccess.getRightShiftRule()); }
	 ruleRightShift
{ after(grammarAccess.getRightShiftRule()); } 
	 EOF 
;

// Rule RightShift
ruleRightShift 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRightShiftAccess().getGroup()); }
		(rule__RightShift__Group__0)
		{ after(grammarAccess.getRightShiftAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLeftShift
entryRuleLeftShift
:
{ before(grammarAccess.getLeftShiftRule()); }
	 ruleLeftShift
{ after(grammarAccess.getLeftShiftRule()); } 
	 EOF 
;

// Rule LeftShift
ruleLeftShift 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLeftShiftAccess().getGroup()); }
		(rule__LeftShift__Group__0)
		{ after(grammarAccess.getLeftShiftAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMinus
entryRuleMinus
:
{ before(grammarAccess.getMinusRule()); }
	 ruleMinus
{ after(grammarAccess.getMinusRule()); } 
	 EOF 
;

// Rule Minus
ruleMinus 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMinusAccess().getGroup()); }
		(rule__Minus__Group__0)
		{ after(grammarAccess.getMinusAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePlus
entryRulePlus
:
{ before(grammarAccess.getPlusRule()); }
	 rulePlus
{ after(grammarAccess.getPlusRule()); } 
	 EOF 
;

// Rule Plus
rulePlus 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPlusAccess().getGroup()); }
		(rule__Plus__Group__0)
		{ after(grammarAccess.getPlusAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMult
entryRuleMult
:
{ before(grammarAccess.getMultRule()); }
	 ruleMult
{ after(grammarAccess.getMultRule()); } 
	 EOF 
;

// Rule Mult
ruleMult 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMultAccess().getGroup()); }
		(rule__Mult__Group__0)
		{ after(grammarAccess.getMultAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMod
entryRuleMod
:
{ before(grammarAccess.getModRule()); }
	 ruleMod
{ after(grammarAccess.getModRule()); } 
	 EOF 
;

// Rule Mod
ruleMod 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getModAccess().getGroup()); }
		(rule__Mod__Group__0)
		{ after(grammarAccess.getModAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleWordConcatenation
entryRuleWordConcatenation
:
{ before(grammarAccess.getWordConcatenationRule()); }
	 ruleWordConcatenation
{ after(grammarAccess.getWordConcatenationRule()); } 
	 EOF 
;

// Rule WordConcatenation
ruleWordConcatenation 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getWordConcatenationAccess().getGroup()); }
		(rule__WordConcatenation__Group__0)
		{ after(grammarAccess.getWordConcatenationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDiv
entryRuleDiv
:
{ before(grammarAccess.getDivRule()); }
	 ruleDiv
{ after(grammarAccess.getDivRule()); } 
	 EOF 
;

// Rule Div
ruleDiv 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDivAccess().getGroup()); }
		(rule__Div__Group__0)
		{ after(grammarAccess.getDivAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNotOrTerminalSimpleExpression
entryRuleNotOrTerminalSimpleExpression
:
{ before(grammarAccess.getNotOrTerminalSimpleExpressionRule()); }
	 ruleNotOrTerminalSimpleExpression
{ after(grammarAccess.getNotOrTerminalSimpleExpressionRule()); } 
	 EOF 
;

// Rule NotOrTerminalSimpleExpression
ruleNotOrTerminalSimpleExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNotOrTerminalSimpleExpressionAccess().getAlternatives()); }
		(rule__NotOrTerminalSimpleExpression__Alternatives)
		{ after(grammarAccess.getNotOrTerminalSimpleExpressionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTerminalSimpleExpression
entryRuleTerminalSimpleExpression
@init { 
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT");
}
:
{ before(grammarAccess.getTerminalSimpleExpressionRule()); }
	 ruleTerminalSimpleExpression
{ after(grammarAccess.getTerminalSimpleExpressionRule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule TerminalSimpleExpression
ruleTerminalSimpleExpression 
	@init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT");
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTerminalSimpleExpressionAccess().getAlternatives()); }
		(rule__TerminalSimpleExpression__Alternatives)
		{ after(grammarAccess.getTerminalSimpleExpressionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}

// Entry rule entryRuleFormalParameter
entryRuleFormalParameter
:
{ before(grammarAccess.getFormalParameterRule()); }
	 ruleFormalParameter
{ after(grammarAccess.getFormalParameterRule()); } 
	 EOF 
;

// Rule FormalParameter
ruleFormalParameter 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFormalParameterAccess().getGroup()); }
		(rule__FormalParameter__Group__0)
		{ after(grammarAccess.getFormalParameterAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCaseSimpleExpression
entryRuleCaseSimpleExpression
@init { 
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT");
}
:
{ before(grammarAccess.getCaseSimpleExpressionRule()); }
	 ruleCaseSimpleExpression
{ after(grammarAccess.getCaseSimpleExpressionRule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule CaseSimpleExpression
ruleCaseSimpleExpression 
	@init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT");
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCaseSimpleExpressionAccess().getGroup()); }
		(rule__CaseSimpleExpression__Group__0)
		{ after(grammarAccess.getCaseSimpleExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}

// Entry rule entryRuleCaseSimpleAssignementExpression
entryRuleCaseSimpleAssignementExpression
@init { 
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT");
}
:
{ before(grammarAccess.getCaseSimpleAssignementExpressionRule()); }
	 ruleCaseSimpleAssignementExpression
{ after(grammarAccess.getCaseSimpleAssignementExpressionRule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule CaseSimpleAssignementExpression
ruleCaseSimpleAssignementExpression 
	@init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT");
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCaseSimpleAssignementExpressionAccess().getGroup()); }
		(rule__CaseSimpleAssignementExpression__Group__0)
		{ after(grammarAccess.getCaseSimpleAssignementExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}

// Entry rule entryRuleCTLExpression
entryRuleCTLExpression
@init { 
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT");
}
:
{ before(grammarAccess.getCTLExpressionRule()); }
	 ruleCTLExpression
{ after(grammarAccess.getCTLExpressionRule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule CTLExpression
ruleCTLExpression 
	@init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT");
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCTLExpressionAccess().getSimpleExpressionAssignment()); }
		(rule__CTLExpression__SimpleExpressionAssignment)
		{ after(grammarAccess.getCTLExpressionAccess().getSimpleExpressionAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}

// Entry rule entryRulePSLExpression
entryRulePSLExpression
@init { 
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT");
}
:
{ before(grammarAccess.getPSLExpressionRule()); }
	 rulePSLExpression
{ after(grammarAccess.getPSLExpressionRule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule PSLExpression
rulePSLExpression 
	@init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT");
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPSLExpressionAccess().getSimpleExpressionAssignment()); }
		(rule__PSLExpression__SimpleExpressionAssignment)
		{ after(grammarAccess.getPSLExpressionAccess().getSimpleExpressionAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}

// Entry rule entryRuleLTLExpression
entryRuleLTLExpression
@init { 
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT");
}
:
{ before(grammarAccess.getLTLExpressionRule()); }
	 ruleLTLExpression
{ after(grammarAccess.getLTLExpressionRule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule LTLExpression
ruleLTLExpression 
	@init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT");
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLTLExpressionAccess().getSimpleExpressionAssignment()); }
		(rule__LTLExpression__SimpleExpressionAssignment)
		{ after(grammarAccess.getLTLExpressionAccess().getSimpleExpressionAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}

// Entry rule entryRuleRangeExpression
entryRuleRangeExpression
:
{ before(grammarAccess.getRangeExpressionRule()); }
	 ruleRangeExpression
{ after(grammarAccess.getRangeExpressionRule()); } 
	 EOF 
;

// Rule RangeExpression
ruleRangeExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRangeExpressionAccess().getGroup()); }
		(rule__RangeExpression__Group__0)
		{ after(grammarAccess.getRangeExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRTCTLExpression
entryRuleRTCTLExpression
@init { 
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT");
}
:
{ before(grammarAccess.getRTCTLExpressionRule()); }
	 ruleRTCTLExpression
{ after(grammarAccess.getRTCTLExpressionRule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule RTCTLExpression
ruleRTCTLExpression 
	@init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT");
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRTCTLExpressionAccess().getAlternatives()); }
		(rule__RTCTLExpression__Alternatives)
		{ after(grammarAccess.getRTCTLExpressionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}

// Entry rule entryRuleComputeSpecification
entryRuleComputeSpecification
:
{ before(grammarAccess.getComputeSpecificationRule()); }
	 ruleComputeSpecification
{ after(grammarAccess.getComputeSpecificationRule()); } 
	 EOF 
;

// Rule ComputeSpecification
ruleComputeSpecification 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getComputeSpecificationAccess().getGroup()); }
		(rule__ComputeSpecification__Group__0)
		{ after(grammarAccess.getComputeSpecificationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVariableID
entryRuleVariableID
@init { 
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT");
}
:
{ before(grammarAccess.getVariableIDRule()); }
	 ruleVariableID
{ after(grammarAccess.getVariableIDRule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule VariableID
ruleVariableID 
	@init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT");
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVariableIDAccess().getGroup()); }
		(rule__VariableID__Group__0)
		{ after(grammarAccess.getVariableIDAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}

// Entry rule entryRuleTerminalVariableID
entryRuleTerminalVariableID
@init { 
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT");
}
:
{ before(grammarAccess.getTerminalVariableIDRule()); }
	 ruleTerminalVariableID
{ after(grammarAccess.getTerminalVariableIDRule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule TerminalVariableID
ruleTerminalVariableID 
	@init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT");
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTerminalVariableIDAccess().getIDTerminalRuleCall()); }
		RULE_ID
		{ after(grammarAccess.getTerminalVariableIDAccess().getIDTerminalRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}

// Entry rule entryRuleNUMBER
entryRuleNUMBER
:
{ before(grammarAccess.getNUMBERRule()); }
	 ruleNUMBER
{ after(grammarAccess.getNUMBERRule()); } 
	 EOF 
;

// Rule NUMBER
ruleNUMBER 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNUMBERAccess().getGroup()); }
		(rule__NUMBER__Group__0)
		{ after(grammarAccess.getNUMBERAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule comparisonoperators
rulecomparisonoperators
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getComparisonoperatorsAccess().getAlternatives()); }
		(rule__Comparisonoperators__Alternatives)
		{ after(grammarAccess.getComparisonoperatorsAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule oroperators
ruleoroperators
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOroperatorsAccess().getAlternatives()); }
		(rule__Oroperators__Alternatives)
		{ after(grammarAccess.getOroperatorsAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule impliesoperator
ruleimpliesoperator
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getImpliesoperatorAccess().getImpliesEnumLiteralDeclaration()); }
		(HyphenMinusGreaterThanSign)
		{ after(grammarAccess.getImpliesoperatorAccess().getImpliesEnumLiteralDeclaration()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule iffoperator
ruleiffoperator
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIffoperatorAccess().getIffEnumLiteralDeclaration()); }
		(LessThanSignHyphenMinusGreaterThanSign)
		{ after(grammarAccess.getIffoperatorAccess().getIffEnumLiteralDeclaration()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule andoperator
ruleandoperator
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAndoperatorAccess().getAndEnumLiteralDeclaration()); }
		(Ampersand)
		{ after(grammarAccess.getAndoperatorAccess().getAndEnumLiteralDeclaration()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule LTLbinoperators
ruleLTLbinoperators
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLTLbinoperatorsAccess().getAlternatives()); }
		(rule__LTLbinoperators__Alternatives)
		{ after(grammarAccess.getLTLbinoperatorsAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ModuleElement__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModuleElementAccess().getVariableDeclarationParserRuleCall_0()); }
		ruleVariableDeclaration
		{ after(grammarAccess.getModuleElementAccess().getVariableDeclarationParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getModuleElementAccess().getIVariableDeclarationParserRuleCall_1()); }
		ruleIVariableDeclaration
		{ after(grammarAccess.getModuleElementAccess().getIVariableDeclarationParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getModuleElementAccess().getFrozenVariableDeclarationParserRuleCall_2()); }
		ruleFrozenVariableDeclaration
		{ after(grammarAccess.getModuleElementAccess().getFrozenVariableDeclarationParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getModuleElementAccess().getDefineDeclarationParserRuleCall_3()); }
		ruleDefineDeclaration
		{ after(grammarAccess.getModuleElementAccess().getDefineDeclarationParserRuleCall_3()); }
	)
	|
	(
		{ before(grammarAccess.getModuleElementAccess().getConstantsDeclarationParserRuleCall_4()); }
		ruleConstantsDeclaration
		{ after(grammarAccess.getModuleElementAccess().getConstantsDeclarationParserRuleCall_4()); }
	)
	|
	(
		{ before(grammarAccess.getModuleElementAccess().getAssignConstraintParserRuleCall_5()); }
		ruleAssignConstraint
		{ after(grammarAccess.getModuleElementAccess().getAssignConstraintParserRuleCall_5()); }
	)
	|
	(
		{ before(grammarAccess.getModuleElementAccess().getTransConstraintParserRuleCall_6()); }
		ruleTransConstraint
		{ after(grammarAccess.getModuleElementAccess().getTransConstraintParserRuleCall_6()); }
	)
	|
	(
		{ before(grammarAccess.getModuleElementAccess().getInitConstraintParserRuleCall_7()); }
		ruleInitConstraint
		{ after(grammarAccess.getModuleElementAccess().getInitConstraintParserRuleCall_7()); }
	)
	|
	(
		{ before(grammarAccess.getModuleElementAccess().getInvarConstraintParserRuleCall_8()); }
		ruleInvarConstraint
		{ after(grammarAccess.getModuleElementAccess().getInvarConstraintParserRuleCall_8()); }
	)
	|
	(
		{ before(grammarAccess.getModuleElementAccess().getFairnessConstraintParserRuleCall_9()); }
		ruleFairnessConstraint
		{ after(grammarAccess.getModuleElementAccess().getFairnessConstraintParserRuleCall_9()); }
	)
	|
	(
		{ before(grammarAccess.getModuleElementAccess().getCtlSpecificationParserRuleCall_10()); }
		ruleCtlSpecification
		{ after(grammarAccess.getModuleElementAccess().getCtlSpecificationParserRuleCall_10()); }
	)
	|
	(
		{ before(grammarAccess.getModuleElementAccess().getPslSpecificationParserRuleCall_11()); }
		rulePslSpecification
		{ after(grammarAccess.getModuleElementAccess().getPslSpecificationParserRuleCall_11()); }
	)
	|
	(
		{ before(grammarAccess.getModuleElementAccess().getInvarSpecificationParserRuleCall_12()); }
		ruleInvarSpecification
		{ after(grammarAccess.getModuleElementAccess().getInvarSpecificationParserRuleCall_12()); }
	)
	|
	(
		{ before(grammarAccess.getModuleElementAccess().getLtlSpecificationParserRuleCall_13()); }
		ruleLtlSpecification
		{ after(grammarAccess.getModuleElementAccess().getLtlSpecificationParserRuleCall_13()); }
	)
	|
	(
		{ before(grammarAccess.getModuleElementAccess().getIsaDeclarationParserRuleCall_14()); }
		ruleIsaDeclaration
		{ after(grammarAccess.getModuleElementAccess().getIsaDeclarationParserRuleCall_14()); }
	)
	|
	(
		{ before(grammarAccess.getModuleElementAccess().getComputeSpecificationParserRuleCall_15()); }
		ruleComputeSpecification
		{ after(grammarAccess.getModuleElementAccess().getComputeSpecificationParserRuleCall_15()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AssignBody__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAssignBodyAccess().getVarBodyAssignParserRuleCall_0()); }
		ruleVarBodyAssign
		{ after(grammarAccess.getAssignBodyAccess().getVarBodyAssignParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getAssignBodyAccess().getInitBodyParserRuleCall_1()); }
		ruleInitBody
		{ after(grammarAccess.getAssignBodyAccess().getInitBodyParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getAssignBodyAccess().getNextBodyParserRuleCall_2()); }
		ruleNextBody
		{ after(grammarAccess.getAssignBodyAccess().getNextBodyParserRuleCall_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FairnessConstraint__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFairnessConstraintAccess().getFairnessExpressionParserRuleCall_0()); }
		ruleFairnessExpression
		{ after(grammarAccess.getFairnessConstraintAccess().getFairnessExpressionParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getFairnessConstraintAccess().getJusticeExpressionParserRuleCall_1()); }
		ruleJusticeExpression
		{ after(grammarAccess.getFairnessConstraintAccess().getJusticeExpressionParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getFairnessConstraintAccess().getCompassionExpressionParserRuleCall_2()); }
		ruleCompassionExpression
		{ after(grammarAccess.getFairnessConstraintAccess().getCompassionExpressionParserRuleCall_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CtlSpecification__SpecKeyWordAlternatives_0_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCtlSpecificationAccess().getSpecKeyWordCTLSPECKeyword_0_0_0()); }
		CTLSPEC
		{ after(grammarAccess.getCtlSpecificationAccess().getSpecKeyWordCTLSPECKeyword_0_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getCtlSpecificationAccess().getSpecKeyWordSPECKeyword_0_0_1()); }
		SPEC
		{ after(grammarAccess.getCtlSpecificationAccess().getSpecKeyWordSPECKeyword_0_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__InvarSpecification__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getInvarSpecificationAccess().getGroup_0()); }
		(rule__InvarSpecification__Group_0__0)
		{ after(grammarAccess.getInvarSpecificationAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getInvarSpecificationAccess().getGroup_1()); }
		(rule__InvarSpecification__Group_1__0)
		{ after(grammarAccess.getInvarSpecificationAccess().getGroup_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Type__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTypeAccess().getSimpleTypeParserRuleCall_0()); }
		ruleSimpleType
		{ after(grammarAccess.getTypeAccess().getSimpleTypeParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getTypeAccess().getModuleTypeParserRuleCall_1()); }
		ruleModuleType
		{ after(grammarAccess.getTypeAccess().getModuleTypeParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleType__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSimpleTypeAccess().getGroup_0()); }
		(rule__SimpleType__Group_0__0)
		{ after(grammarAccess.getSimpleTypeAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getSimpleTypeAccess().getGroup_1()); }
		(rule__SimpleType__Group_1__0)
		{ after(grammarAccess.getSimpleTypeAccess().getGroup_1()); }
	)
	|
	(
		{ before(grammarAccess.getSimpleTypeAccess().getGroup_2()); }
		(rule__SimpleType__Group_2__0)
		{ after(grammarAccess.getSimpleTypeAccess().getGroup_2()); }
	)
	|
	(
		{ before(grammarAccess.getSimpleTypeAccess().getGroup_3()); }
		(rule__SimpleType__Group_3__0)
		{ after(grammarAccess.getSimpleTypeAccess().getGroup_3()); }
	)
	|
	(
		{ before(grammarAccess.getSimpleTypeAccess().getGroup_4()); }
		(rule__SimpleType__Group_4__0)
		{ after(grammarAccess.getSimpleTypeAccess().getGroup_4()); }
	)
	|
	(
		{ before(grammarAccess.getSimpleTypeAccess().getGroup_5()); }
		(rule__SimpleType__Group_5__0)
		{ after(grammarAccess.getSimpleTypeAccess().getGroup_5()); }
	)
	|
	(
		{ before(grammarAccess.getSimpleTypeAccess().getGroup_6()); }
		(rule__SimpleType__Group_6__0)
		{ after(grammarAccess.getSimpleTypeAccess().getGroup_6()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleType__LowAlternatives_5_1_0_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSimpleTypeAccess().getLowNUMBERParserRuleCall_5_1_0_0_0()); }
		ruleNUMBER
		{ after(grammarAccess.getSimpleTypeAccess().getLowNUMBERParserRuleCall_5_1_0_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getSimpleTypeAccess().getLowVariableIDParserRuleCall_5_1_0_0_1()); }
		ruleVariableID
		{ after(grammarAccess.getSimpleTypeAccess().getLowVariableIDParserRuleCall_5_1_0_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleType__HighAlternatives_5_1_2_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSimpleTypeAccess().getHighNUMBERParserRuleCall_5_1_2_0_0()); }
		ruleNUMBER
		{ after(grammarAccess.getSimpleTypeAccess().getHighNUMBERParserRuleCall_5_1_2_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getSimpleTypeAccess().getHighVariableIDParserRuleCall_5_1_2_0_1()); }
		ruleVariableID
		{ after(grammarAccess.getSimpleTypeAccess().getHighVariableIDParserRuleCall_5_1_2_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleType__LowerBoundAlternatives_6_2_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSimpleTypeAccess().getLowerBoundNUMBERParserRuleCall_6_2_0_0()); }
		ruleNUMBER
		{ after(grammarAccess.getSimpleTypeAccess().getLowerBoundNUMBERParserRuleCall_6_2_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getSimpleTypeAccess().getLowerBoundVariableIDParserRuleCall_6_2_0_1()); }
		ruleVariableID
		{ after(grammarAccess.getSimpleTypeAccess().getLowerBoundVariableIDParserRuleCall_6_2_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleType__UpperBoundAlternatives_6_4_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSimpleTypeAccess().getUpperBoundNUMBERParserRuleCall_6_4_0_0()); }
		ruleNUMBER
		{ after(grammarAccess.getSimpleTypeAccess().getUpperBoundNUMBERParserRuleCall_6_4_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getSimpleTypeAccess().getUpperBoundVariableIDParserRuleCall_6_4_0_1()); }
		ruleVariableID
		{ after(grammarAccess.getSimpleTypeAccess().getUpperBoundVariableIDParserRuleCall_6_4_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ModuleType__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModuleTypeAccess().getGroup_0()); }
		(rule__ModuleType__Group_0__0)
		{ after(grammarAccess.getModuleTypeAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getModuleTypeAccess().getGroup_1()); }
		(rule__ModuleType__Group_1__0)
		{ after(grammarAccess.getModuleTypeAccess().getGroup_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ModuleType__Alternatives_0_1_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModuleTypeAccess().getParamsAssignment_0_1_2_1_0()); }
		(rule__ModuleType__ParamsAssignment_0_1_2_1_0)
		{ after(grammarAccess.getModuleTypeAccess().getParamsAssignment_0_1_2_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getModuleTypeAccess().getParAssignment_0_1_2_1_1()); }
		(rule__ModuleType__ParAssignment_0_1_2_1_1)
		{ after(grammarAccess.getModuleTypeAccess().getParAssignment_0_1_2_1_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ModuleType__Alternatives_1_1_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModuleTypeAccess().getParamsAssignment_1_1_1_1_0()); }
		(rule__ModuleType__ParamsAssignment_1_1_1_1_0)
		{ after(grammarAccess.getModuleTypeAccess().getParamsAssignment_1_1_1_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getModuleTypeAccess().getParAssignment_1_1_1_1_1()); }
		(rule__ModuleType__ParAssignment_1_1_1_1_1)
		{ after(grammarAccess.getModuleTypeAccess().getParAssignment_1_1_1_1_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Val__Alternatives_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getValAccess().getNameAssignment_1_0()); }
		(rule__Val__NameAssignment_1_0)
		{ after(grammarAccess.getValAccess().getNameAssignment_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getValAccess().getNumAssignment_1_1()); }
		(rule__Val__NumAssignment_1_1)
		{ after(grammarAccess.getValAccess().getNumAssignment_1_1()); }
	)
	|
	(
		{ before(grammarAccess.getValAccess().getTRUEKeyword_1_2()); }
		TRUE
		{ after(grammarAccess.getValAccess().getTRUEKeyword_1_2()); }
	)
	|
	(
		{ before(grammarAccess.getValAccess().getFALSEKeyword_1_3()); }
		FALSE
		{ after(grammarAccess.getValAccess().getFALSEKeyword_1_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NotOrTerminalSimpleExpression__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNotOrTerminalSimpleExpressionAccess().getGroup_0()); }
		(rule__NotOrTerminalSimpleExpression__Group_0__0)
		{ after(grammarAccess.getNotOrTerminalSimpleExpressionAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getNotOrTerminalSimpleExpressionAccess().getTerminalSimpleExpressionParserRuleCall_1()); }
		ruleTerminalSimpleExpression
		{ after(grammarAccess.getNotOrTerminalSimpleExpressionAccess().getTerminalSimpleExpressionParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalSimpleExpression__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTerminalSimpleExpressionAccess().getGroup_0()); }
		(rule__TerminalSimpleExpression__Group_0__0)
		{ after(grammarAccess.getTerminalSimpleExpressionAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getTerminalSimpleExpressionAccess().getGroup_1()); }
		(rule__TerminalSimpleExpression__Group_1__0)
		{ after(grammarAccess.getTerminalSimpleExpressionAccess().getGroup_1()); }
	)
	|
	(
		{ before(grammarAccess.getTerminalSimpleExpressionAccess().getCaseSimpleExpressionParserRuleCall_2()); }
		ruleCaseSimpleExpression
		{ after(grammarAccess.getTerminalSimpleExpressionAccess().getCaseSimpleExpressionParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getTerminalSimpleExpressionAccess().getGroup_3()); }
		(rule__TerminalSimpleExpression__Group_3__0)
		{ after(grammarAccess.getTerminalSimpleExpressionAccess().getGroup_3()); }
	)
	|
	(
		{ before(grammarAccess.getTerminalSimpleExpressionAccess().getGroup_4()); }
		(rule__TerminalSimpleExpression__Group_4__0)
		{ after(grammarAccess.getTerminalSimpleExpressionAccess().getGroup_4()); }
	)
	|
	(
		{ before(grammarAccess.getTerminalSimpleExpressionAccess().getGroup_5()); }
		(rule__TerminalSimpleExpression__Group_5__0)
		{ after(grammarAccess.getTerminalSimpleExpressionAccess().getGroup_5()); }
	)
	|
	(
		{ before(grammarAccess.getTerminalSimpleExpressionAccess().getGroup_6()); }
		(rule__TerminalSimpleExpression__Group_6__0)
		{ after(grammarAccess.getTerminalSimpleExpressionAccess().getGroup_6()); }
	)
	|
	(
		{ before(grammarAccess.getTerminalSimpleExpressionAccess().getGroup_7()); }
		(rule__TerminalSimpleExpression__Group_7__0)
		{ after(grammarAccess.getTerminalSimpleExpressionAccess().getGroup_7()); }
	)
	|
	(
		{ before(grammarAccess.getTerminalSimpleExpressionAccess().getGroup_8()); }
		(rule__TerminalSimpleExpression__Group_8__0)
		{ after(grammarAccess.getTerminalSimpleExpressionAccess().getGroup_8()); }
	)
	|
	(
		{ before(grammarAccess.getTerminalSimpleExpressionAccess().getGroup_9()); }
		(rule__TerminalSimpleExpression__Group_9__0)
		{ after(grammarAccess.getTerminalSimpleExpressionAccess().getGroup_9()); }
	)
	|
	(
		{ before(grammarAccess.getTerminalSimpleExpressionAccess().getGroup_10()); }
		(rule__TerminalSimpleExpression__Group_10__0)
		{ after(grammarAccess.getTerminalSimpleExpressionAccess().getGroup_10()); }
	)
	|
	(
		{ before(grammarAccess.getTerminalSimpleExpressionAccess().getGroup_11()); }
		(rule__TerminalSimpleExpression__Group_11__0)
		{ after(grammarAccess.getTerminalSimpleExpressionAccess().getGroup_11()); }
	)
	|
	(
		{ before(grammarAccess.getTerminalSimpleExpressionAccess().getGroup_12()); }
		(rule__TerminalSimpleExpression__Group_12__0)
		{ after(grammarAccess.getTerminalSimpleExpressionAccess().getGroup_12()); }
	)
	|
	(
		{ before(grammarAccess.getTerminalSimpleExpressionAccess().getGroup_13()); }
		(rule__TerminalSimpleExpression__Group_13__0)
		{ after(grammarAccess.getTerminalSimpleExpressionAccess().getGroup_13()); }
	)
	|
	(
		{ before(grammarAccess.getTerminalSimpleExpressionAccess().getGroup_14()); }
		(rule__TerminalSimpleExpression__Group_14__0)
		{ after(grammarAccess.getTerminalSimpleExpressionAccess().getGroup_14()); }
	)
	|
	(
		{ before(grammarAccess.getTerminalSimpleExpressionAccess().getGroup_15()); }
		(rule__TerminalSimpleExpression__Group_15__0)
		{ after(grammarAccess.getTerminalSimpleExpressionAccess().getGroup_15()); }
	)
	|
	(
		{ before(grammarAccess.getTerminalSimpleExpressionAccess().getGroup_16()); }
		(rule__TerminalSimpleExpression__Group_16__0)
		{ after(grammarAccess.getTerminalSimpleExpressionAccess().getGroup_16()); }
	)
	|
	(
		{ before(grammarAccess.getTerminalSimpleExpressionAccess().getGroup_17()); }
		(rule__TerminalSimpleExpression__Group_17__0)
		{ after(grammarAccess.getTerminalSimpleExpressionAccess().getGroup_17()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalSimpleExpression__OperatorAlternatives_1_1_0_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTerminalSimpleExpressionAccess().getOperatorHyphenMinusKeyword_1_1_0_0_0()); }
		HyphenMinus
		{ after(grammarAccess.getTerminalSimpleExpressionAccess().getOperatorHyphenMinusKeyword_1_1_0_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getTerminalSimpleExpressionAccess().getOperatorPlusSignKeyword_1_1_0_0_1()); }
		PlusSign
		{ after(grammarAccess.getTerminalSimpleExpressionAccess().getOperatorPlusSignKeyword_1_1_0_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getTerminalSimpleExpressionAccess().getOperatorEGKeyword_1_1_0_0_2()); }
		EG
		{ after(grammarAccess.getTerminalSimpleExpressionAccess().getOperatorEGKeyword_1_1_0_0_2()); }
	)
	|
	(
		{ before(grammarAccess.getTerminalSimpleExpressionAccess().getOperatorEXKeyword_1_1_0_0_3()); }
		EX
		{ after(grammarAccess.getTerminalSimpleExpressionAccess().getOperatorEXKeyword_1_1_0_0_3()); }
	)
	|
	(
		{ before(grammarAccess.getTerminalSimpleExpressionAccess().getOperatorEFKeyword_1_1_0_0_4()); }
		EF
		{ after(grammarAccess.getTerminalSimpleExpressionAccess().getOperatorEFKeyword_1_1_0_0_4()); }
	)
	|
	(
		{ before(grammarAccess.getTerminalSimpleExpressionAccess().getOperatorAGKeyword_1_1_0_0_5()); }
		AG
		{ after(grammarAccess.getTerminalSimpleExpressionAccess().getOperatorAGKeyword_1_1_0_0_5()); }
	)
	|
	(
		{ before(grammarAccess.getTerminalSimpleExpressionAccess().getOperatorAXKeyword_1_1_0_0_6()); }
		AX
		{ after(grammarAccess.getTerminalSimpleExpressionAccess().getOperatorAXKeyword_1_1_0_0_6()); }
	)
	|
	(
		{ before(grammarAccess.getTerminalSimpleExpressionAccess().getOperatorAFKeyword_1_1_0_0_7()); }
		AF
		{ after(grammarAccess.getTerminalSimpleExpressionAccess().getOperatorAFKeyword_1_1_0_0_7()); }
	)
	|
	(
		{ before(grammarAccess.getTerminalSimpleExpressionAccess().getOperatorXKeyword_1_1_0_0_8()); }
		X
		{ after(grammarAccess.getTerminalSimpleExpressionAccess().getOperatorXKeyword_1_1_0_0_8()); }
	)
	|
	(
		{ before(grammarAccess.getTerminalSimpleExpressionAccess().getOperatorGKeyword_1_1_0_0_9()); }
		G
		{ after(grammarAccess.getTerminalSimpleExpressionAccess().getOperatorGKeyword_1_1_0_0_9()); }
	)
	|
	(
		{ before(grammarAccess.getTerminalSimpleExpressionAccess().getOperatorFKeyword_1_1_0_0_10()); }
		F
		{ after(grammarAccess.getTerminalSimpleExpressionAccess().getOperatorFKeyword_1_1_0_0_10()); }
	)
	|
	(
		{ before(grammarAccess.getTerminalSimpleExpressionAccess().getOperatorYKeyword_1_1_0_0_11()); }
		Y
		{ after(grammarAccess.getTerminalSimpleExpressionAccess().getOperatorYKeyword_1_1_0_0_11()); }
	)
	|
	(
		{ before(grammarAccess.getTerminalSimpleExpressionAccess().getOperatorZKeyword_1_1_0_0_12()); }
		Z
		{ after(grammarAccess.getTerminalSimpleExpressionAccess().getOperatorZKeyword_1_1_0_0_12()); }
	)
	|
	(
		{ before(grammarAccess.getTerminalSimpleExpressionAccess().getOperatorHKeyword_1_1_0_0_13()); }
		H
		{ after(grammarAccess.getTerminalSimpleExpressionAccess().getOperatorHKeyword_1_1_0_0_13()); }
	)
	|
	(
		{ before(grammarAccess.getTerminalSimpleExpressionAccess().getOperatorOKeyword_1_1_0_0_14()); }
		O
		{ after(grammarAccess.getTerminalSimpleExpressionAccess().getOperatorOKeyword_1_1_0_0_14()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalSimpleExpression__Alternatives_4_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTerminalSimpleExpressionAccess().getGroup_4_2_0()); }
		(rule__TerminalSimpleExpression__Group_4_2_0__0)
		{ after(grammarAccess.getTerminalSimpleExpressionAccess().getGroup_4_2_0()); }
	)
	|
	(
		{ before(grammarAccess.getTerminalSimpleExpressionAccess().getGroup_4_2_1()); }
		(rule__TerminalSimpleExpression__Group_4_2_1__0)*
		{ after(grammarAccess.getTerminalSimpleExpressionAccess().getGroup_4_2_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalSimpleExpression__EaAlternatives_15_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTerminalSimpleExpressionAccess().getEaEKeyword_15_1_0_0()); }
		E
		{ after(grammarAccess.getTerminalSimpleExpressionAccess().getEaEKeyword_15_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getTerminalSimpleExpressionAccess().getEaAKeyword_15_1_0_1()); }
		A
		{ after(grammarAccess.getTerminalSimpleExpressionAccess().getEaAKeyword_15_1_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalSimpleExpression__FunctionAlternatives_16_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTerminalSimpleExpressionAccess().getFunctionWord1Keyword_16_1_0_0()); }
		Word1
		{ after(grammarAccess.getTerminalSimpleExpressionAccess().getFunctionWord1Keyword_16_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getTerminalSimpleExpressionAccess().getFunctionBoolKeyword_16_1_0_1()); }
		Bool
		{ after(grammarAccess.getTerminalSimpleExpressionAccess().getFunctionBoolKeyword_16_1_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RTCTLExpression__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRTCTLExpressionAccess().getGroup_0()); }
		(rule__RTCTLExpression__Group_0__0)
		{ after(grammarAccess.getRTCTLExpressionAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getRTCTLExpressionAccess().getGroup_1()); }
		(rule__RTCTLExpression__Group_1__0)
		{ after(grammarAccess.getRTCTLExpressionAccess().getGroup_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RTCTLExpression__CtlExpressionAlternatives_0_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRTCTLExpressionAccess().getCtlExpressionCTLExpressionParserRuleCall_0_1_0_0()); }
		ruleCTLExpression
		{ after(grammarAccess.getRTCTLExpressionAccess().getCtlExpressionCTLExpressionParserRuleCall_0_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getRTCTLExpressionAccess().getCtlExpressionFormalParameterParserRuleCall_0_1_0_1()); }
		ruleFormalParameter
		{ after(grammarAccess.getRTCTLExpressionAccess().getCtlExpressionFormalParameterParserRuleCall_0_1_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RTCTLExpression__UnaryAlternatives_1_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRTCTLExpressionAccess().getUnaryEBFKeyword_1_1_0_0()); }
		EBF
		{ after(grammarAccess.getRTCTLExpressionAccess().getUnaryEBFKeyword_1_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getRTCTLExpressionAccess().getUnaryABFKeyword_1_1_0_1()); }
		ABF
		{ after(grammarAccess.getRTCTLExpressionAccess().getUnaryABFKeyword_1_1_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getRTCTLExpressionAccess().getUnaryEBGKeyword_1_1_0_2()); }
		EBG
		{ after(grammarAccess.getRTCTLExpressionAccess().getUnaryEBGKeyword_1_1_0_2()); }
	)
	|
	(
		{ before(grammarAccess.getRTCTLExpressionAccess().getUnaryABGKeyword_1_1_0_3()); }
		ABG
		{ after(grammarAccess.getRTCTLExpressionAccess().getUnaryABGKeyword_1_1_0_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ComputeSpecification__MinMaxAlternatives_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getComputeSpecificationAccess().getMinMaxMINKeyword_1_0_0()); }
		MIN
		{ after(grammarAccess.getComputeSpecificationAccess().getMinMaxMINKeyword_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getComputeSpecificationAccess().getMinMaxMAXKeyword_1_0_1()); }
		MAX
		{ after(grammarAccess.getComputeSpecificationAccess().getMinMaxMAXKeyword_1_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableID__Alternatives_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVariableIDAccess().getGroup_1_0()); }
		(rule__VariableID__Group_1_0__0)
		{ after(grammarAccess.getVariableIDAccess().getGroup_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getVariableIDAccess().getGroup_1_1()); }
		(rule__VariableID__Group_1_1__0)
		{ after(grammarAccess.getVariableIDAccess().getGroup_1_1()); }
	)
	|
	(
		{ before(grammarAccess.getVariableIDAccess().getGroup_1_2()); }
		(rule__VariableID__Group_1_2__0)
		{ after(grammarAccess.getVariableIDAccess().getGroup_1_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableID__Alternatives_1_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVariableIDAccess().getNUMBERParserRuleCall_1_1_1_0()); }
		ruleNUMBER
		{ after(grammarAccess.getVariableIDAccess().getNUMBERParserRuleCall_1_1_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getVariableIDAccess().getTerminalVariableIDParserRuleCall_1_1_1_1()); }
		ruleTerminalVariableID
		{ after(grammarAccess.getVariableIDAccess().getTerminalVariableIDParserRuleCall_1_1_1_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparisonoperators__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getComparisonoperatorsAccess().getEqualEnumLiteralDeclaration_0()); }
		(EqualsSign)
		{ after(grammarAccess.getComparisonoperatorsAccess().getEqualEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getComparisonoperatorsAccess().getDisEnumLiteralDeclaration_1()); }
		(ExclamationMarkEqualsSign)
		{ after(grammarAccess.getComparisonoperatorsAccess().getDisEnumLiteralDeclaration_1()); }
	)
	|
	(
		{ before(grammarAccess.getComparisonoperatorsAccess().getLEnumLiteralDeclaration_2()); }
		(LessThanSign)
		{ after(grammarAccess.getComparisonoperatorsAccess().getLEnumLiteralDeclaration_2()); }
	)
	|
	(
		{ before(grammarAccess.getComparisonoperatorsAccess().getGEnumLiteralDeclaration_3()); }
		(GreaterThanSign)
		{ after(grammarAccess.getComparisonoperatorsAccess().getGEnumLiteralDeclaration_3()); }
	)
	|
	(
		{ before(grammarAccess.getComparisonoperatorsAccess().getLeEnumLiteralDeclaration_4()); }
		(LessThanSignEqualsSign)
		{ after(grammarAccess.getComparisonoperatorsAccess().getLeEnumLiteralDeclaration_4()); }
	)
	|
	(
		{ before(grammarAccess.getComparisonoperatorsAccess().getGeEnumLiteralDeclaration_5()); }
		(GreaterThanSignEqualsSign)
		{ after(grammarAccess.getComparisonoperatorsAccess().getGeEnumLiteralDeclaration_5()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Oroperators__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOroperatorsAccess().getOrEnumLiteralDeclaration_0()); }
		(VerticalLine)
		{ after(grammarAccess.getOroperatorsAccess().getOrEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getOroperatorsAccess().getXorEnumLiteralDeclaration_1()); }
		(Xor)
		{ after(grammarAccess.getOroperatorsAccess().getXorEnumLiteralDeclaration_1()); }
	)
	|
	(
		{ before(grammarAccess.getOroperatorsAccess().getXnorEnumLiteralDeclaration_2()); }
		(Xnor)
		{ after(grammarAccess.getOroperatorsAccess().getXnorEnumLiteralDeclaration_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LTLbinoperators__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLTLbinoperatorsAccess().getUEnumLiteralDeclaration_0()); }
		(U)
		{ after(grammarAccess.getLTLbinoperatorsAccess().getUEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getLTLbinoperatorsAccess().getVEnumLiteralDeclaration_1()); }
		(V)
		{ after(grammarAccess.getLTLbinoperatorsAccess().getVEnumLiteralDeclaration_1()); }
	)
	|
	(
		{ before(grammarAccess.getLTLbinoperatorsAccess().getSEnumLiteralDeclaration_2()); }
		(S)
		{ after(grammarAccess.getLTLbinoperatorsAccess().getSEnumLiteralDeclaration_2()); }
	)
	|
	(
		{ before(grammarAccess.getLTLbinoperatorsAccess().getTEnumLiteralDeclaration_3()); }
		(T)
		{ after(grammarAccess.getLTLbinoperatorsAccess().getTEnumLiteralDeclaration_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Module__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Module__Group__0__Impl
	rule__Module__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Module__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModuleAccess().getMODULEKeyword_0()); }
	MODULE
	{ after(grammarAccess.getModuleAccess().getMODULEKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Module__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Module__Group__1__Impl
	rule__Module__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Module__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModuleAccess().getNameAssignment_1()); }
	(rule__Module__NameAssignment_1)
	{ after(grammarAccess.getModuleAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Module__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Module__Group__2__Impl
	rule__Module__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Module__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModuleAccess().getGroup_2()); }
	(rule__Module__Group_2__0)?
	{ after(grammarAccess.getModuleAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Module__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Module__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Module__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModuleAccess().getModuleElementAssignment_3()); }
	(rule__Module__ModuleElementAssignment_3)*
	{ after(grammarAccess.getModuleAccess().getModuleElementAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Module__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Module__Group_2__0__Impl
	rule__Module__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Module__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModuleAccess().getLeftParenthesisKeyword_2_0()); }
	LeftParenthesis
	{ after(grammarAccess.getModuleAccess().getLeftParenthesisKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Module__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Module__Group_2__1__Impl
	rule__Module__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Module__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModuleAccess().getParamsAssignment_2_1()); }
	(rule__Module__ParamsAssignment_2_1)
	{ after(grammarAccess.getModuleAccess().getParamsAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Module__Group_2__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Module__Group_2__2__Impl
	rule__Module__Group_2__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Module__Group_2__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModuleAccess().getGroup_2_2()); }
	(rule__Module__Group_2_2__0)*
	{ after(grammarAccess.getModuleAccess().getGroup_2_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Module__Group_2__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Module__Group_2__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Module__Group_2__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModuleAccess().getRightParenthesisKeyword_2_3()); }
	RightParenthesis
	{ after(grammarAccess.getModuleAccess().getRightParenthesisKeyword_2_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Module__Group_2_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Module__Group_2_2__0__Impl
	rule__Module__Group_2_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Module__Group_2_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModuleAccess().getCommaKeyword_2_2_0()); }
	Comma
	{ after(grammarAccess.getModuleAccess().getCommaKeyword_2_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Module__Group_2_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Module__Group_2_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Module__Group_2_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModuleAccess().getParamsAssignment_2_2_1()); }
	(rule__Module__ParamsAssignment_2_2_1)
	{ after(grammarAccess.getModuleAccess().getParamsAssignment_2_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VariableDeclaration__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VariableDeclaration__Group__0__Impl
	rule__VariableDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableDeclarationAccess().getVARKeyword_0()); }
	VAR
	{ after(grammarAccess.getVariableDeclarationAccess().getVARKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VariableDeclaration__Group__1__Impl
	rule__VariableDeclaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableDeclarationAccess().getVariableDeclarationAction_1()); }
	()
	{ after(grammarAccess.getVariableDeclarationAccess().getVariableDeclarationAction_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VariableDeclaration__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableDeclarationAccess().getVarsAssignment_2()); }
	(rule__VariableDeclaration__VarsAssignment_2)*
	{ after(grammarAccess.getVariableDeclarationAccess().getVarsAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__IVariableDeclaration__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IVariableDeclaration__Group__0__Impl
	rule__IVariableDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IVariableDeclaration__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIVariableDeclarationAccess().getIVARKeyword_0()); }
	IVAR
	{ after(grammarAccess.getIVariableDeclarationAccess().getIVARKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IVariableDeclaration__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IVariableDeclaration__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IVariableDeclaration__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getIVariableDeclarationAccess().getVarsAssignment_1()); }
		(rule__IVariableDeclaration__VarsAssignment_1)
		{ after(grammarAccess.getIVariableDeclarationAccess().getVarsAssignment_1()); }
	)
	(
		{ before(grammarAccess.getIVariableDeclarationAccess().getVarsAssignment_1()); }
		(rule__IVariableDeclaration__VarsAssignment_1)*
		{ after(grammarAccess.getIVariableDeclarationAccess().getVarsAssignment_1()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FrozenVariableDeclaration__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FrozenVariableDeclaration__Group__0__Impl
	rule__FrozenVariableDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FrozenVariableDeclaration__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFrozenVariableDeclarationAccess().getFROZENVARKeyword_0()); }
	FROZENVAR
	{ after(grammarAccess.getFrozenVariableDeclarationAccess().getFROZENVARKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FrozenVariableDeclaration__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FrozenVariableDeclaration__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FrozenVariableDeclaration__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getFrozenVariableDeclarationAccess().getVarsAssignment_1()); }
		(rule__FrozenVariableDeclaration__VarsAssignment_1)
		{ after(grammarAccess.getFrozenVariableDeclarationAccess().getVarsAssignment_1()); }
	)
	(
		{ before(grammarAccess.getFrozenVariableDeclarationAccess().getVarsAssignment_1()); }
		(rule__FrozenVariableDeclaration__VarsAssignment_1)*
		{ after(grammarAccess.getFrozenVariableDeclarationAccess().getVarsAssignment_1()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VarBody__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VarBody__Group__0__Impl
	rule__VarBody__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VarBody__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVarBodyAccess().getNameAssignment_0()); }
	(rule__VarBody__NameAssignment_0)
	{ after(grammarAccess.getVarBodyAccess().getNameAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarBody__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VarBody__Group__1__Impl
	rule__VarBody__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__VarBody__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVarBodyAccess().getColonKeyword_1()); }
	Colon
	{ after(grammarAccess.getVarBodyAccess().getColonKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarBody__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VarBody__Group__2__Impl
	rule__VarBody__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__VarBody__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVarBodyAccess().getTypeAssignment_2()); }
	(rule__VarBody__TypeAssignment_2)
	{ after(grammarAccess.getVarBodyAccess().getTypeAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarBody__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VarBody__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VarBody__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVarBodyAccess().getSemicolonAssignment_3()); }
	(rule__VarBody__SemicolonAssignment_3)
	{ after(grammarAccess.getVarBodyAccess().getSemicolonAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__DefineDeclaration__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DefineDeclaration__Group__0__Impl
	rule__DefineDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DefineDeclaration__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDefineDeclarationAccess().getDefineAssignment_0()); }
	(rule__DefineDeclaration__DefineAssignment_0)
	{ after(grammarAccess.getDefineDeclarationAccess().getDefineAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DefineDeclaration__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DefineDeclaration__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DefineDeclaration__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDefineDeclarationAccess().getDefineBodiesAssignment_1()); }
	(rule__DefineDeclaration__DefineBodiesAssignment_1)*
	{ after(grammarAccess.getDefineDeclarationAccess().getDefineBodiesAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__DefineBody__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DefineBody__Group__0__Impl
	rule__DefineBody__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DefineBody__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDefineBodyAccess().getVarAssignment_0()); }
	(rule__DefineBody__VarAssignment_0)
	{ after(grammarAccess.getDefineBodyAccess().getVarAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DefineBody__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DefineBody__Group__1__Impl
	rule__DefineBody__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__DefineBody__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDefineBodyAccess().getColonEqualsSignKeyword_1()); }
	ColonEqualsSign
	{ after(grammarAccess.getDefineBodyAccess().getColonEqualsSignKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DefineBody__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DefineBody__Group__2__Impl
	rule__DefineBody__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__DefineBody__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDefineBodyAccess().getAssignmentAssignment_2()); }
	(rule__DefineBody__AssignmentAssignment_2)
	{ after(grammarAccess.getDefineBodyAccess().getAssignmentAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DefineBody__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DefineBody__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DefineBody__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDefineBodyAccess().getSemicolonAssignment_3()); }
	(rule__DefineBody__SemicolonAssignment_3)
	{ after(grammarAccess.getDefineBodyAccess().getSemicolonAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ConstantsDeclaration__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConstantsDeclaration__Group__0__Impl
	rule__ConstantsDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstantsDeclaration__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConstantsDeclarationAccess().getCONSTANTSKeyword_0()); }
	CONSTANTS
	{ after(grammarAccess.getConstantsDeclarationAccess().getCONSTANTSKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstantsDeclaration__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConstantsDeclaration__Group__1__Impl
	rule__ConstantsDeclaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstantsDeclaration__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConstantsDeclarationAccess().getConstantsAssignment_1()); }
	(rule__ConstantsDeclaration__ConstantsAssignment_1)
	{ after(grammarAccess.getConstantsDeclarationAccess().getConstantsAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstantsDeclaration__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConstantsDeclaration__Group__2__Impl
	rule__ConstantsDeclaration__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstantsDeclaration__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConstantsDeclarationAccess().getGroup_2()); }
	(rule__ConstantsDeclaration__Group_2__0)*
	{ after(grammarAccess.getConstantsDeclarationAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstantsDeclaration__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConstantsDeclaration__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstantsDeclaration__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConstantsDeclarationAccess().getSemicolonAssignment_3()); }
	(rule__ConstantsDeclaration__SemicolonAssignment_3)
	{ after(grammarAccess.getConstantsDeclarationAccess().getSemicolonAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ConstantsDeclaration__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConstantsDeclaration__Group_2__0__Impl
	rule__ConstantsDeclaration__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstantsDeclaration__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConstantsDeclarationAccess().getCommaKeyword_2_0()); }
	Comma
	{ after(grammarAccess.getConstantsDeclarationAccess().getCommaKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstantsDeclaration__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConstantsDeclaration__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstantsDeclaration__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConstantsDeclarationAccess().getConstantsAssignment_2_1()); }
	(rule__ConstantsDeclaration__ConstantsAssignment_2_1)
	{ after(grammarAccess.getConstantsDeclarationAccess().getConstantsAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AssignConstraint__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AssignConstraint__Group__0__Impl
	rule__AssignConstraint__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AssignConstraint__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAssignConstraintAccess().getAssignAssignment_0()); }
	(rule__AssignConstraint__AssignAssignment_0)
	{ after(grammarAccess.getAssignConstraintAccess().getAssignAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AssignConstraint__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AssignConstraint__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AssignConstraint__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAssignConstraintAccess().getBodiesAssignment_1()); }
	(rule__AssignConstraint__BodiesAssignment_1)*
	{ after(grammarAccess.getAssignConstraintAccess().getBodiesAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VarBodyAssign__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VarBodyAssign__Group__0__Impl
	rule__VarBodyAssign__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VarBodyAssign__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVarBodyAssignAccess().getVarAssignment_0()); }
	(rule__VarBodyAssign__VarAssignment_0)
	{ after(grammarAccess.getVarBodyAssignAccess().getVarAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarBodyAssign__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VarBodyAssign__Group__1__Impl
	rule__VarBodyAssign__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__VarBodyAssign__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVarBodyAssignAccess().getColonEqualsSignKeyword_1()); }
	ColonEqualsSign
	{ after(grammarAccess.getVarBodyAssignAccess().getColonEqualsSignKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarBodyAssign__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VarBodyAssign__Group__2__Impl
	rule__VarBodyAssign__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__VarBodyAssign__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVarBodyAssignAccess().getAssignmentAssignment_2()); }
	(rule__VarBodyAssign__AssignmentAssignment_2)
	{ after(grammarAccess.getVarBodyAssignAccess().getAssignmentAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarBodyAssign__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VarBodyAssign__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VarBodyAssign__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVarBodyAssignAccess().getSemicolonAssignment_3()); }
	(rule__VarBodyAssign__SemicolonAssignment_3)
	{ after(grammarAccess.getVarBodyAssignAccess().getSemicolonAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__InitBody__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__InitBody__Group__0__Impl
	rule__InitBody__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__InitBody__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInitBodyAccess().getInitKeyword_0()); }
	Init
	{ after(grammarAccess.getInitBodyAccess().getInitKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__InitBody__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__InitBody__Group__1__Impl
	rule__InitBody__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__InitBody__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInitBodyAccess().getLeftParenthesisKeyword_1()); }
	LeftParenthesis
	{ after(grammarAccess.getInitBodyAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__InitBody__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__InitBody__Group__2__Impl
	rule__InitBody__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__InitBody__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInitBodyAccess().getVarAssignment_2()); }
	(rule__InitBody__VarAssignment_2)
	{ after(grammarAccess.getInitBodyAccess().getVarAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__InitBody__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__InitBody__Group__3__Impl
	rule__InitBody__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__InitBody__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInitBodyAccess().getRightParenthesisKeyword_3()); }
	RightParenthesis
	{ after(grammarAccess.getInitBodyAccess().getRightParenthesisKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__InitBody__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__InitBody__Group__4__Impl
	rule__InitBody__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__InitBody__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInitBodyAccess().getColonEqualsSignKeyword_4()); }
	ColonEqualsSign
	{ after(grammarAccess.getInitBodyAccess().getColonEqualsSignKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__InitBody__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__InitBody__Group__5__Impl
	rule__InitBody__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__InitBody__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInitBodyAccess().getInitialAssignment_5()); }
	(rule__InitBody__InitialAssignment_5)
	{ after(grammarAccess.getInitBodyAccess().getInitialAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__InitBody__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__InitBody__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__InitBody__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInitBodyAccess().getSemicolonAssignment_6()); }
	(rule__InitBody__SemicolonAssignment_6)
	{ after(grammarAccess.getInitBodyAccess().getSemicolonAssignment_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__NextBody__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NextBody__Group__0__Impl
	rule__NextBody__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NextBody__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNextBodyAccess().getNextKeyword_0()); }
	Next
	{ after(grammarAccess.getNextBodyAccess().getNextKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NextBody__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NextBody__Group__1__Impl
	rule__NextBody__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__NextBody__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNextBodyAccess().getLeftParenthesisKeyword_1()); }
	LeftParenthesis
	{ after(grammarAccess.getNextBodyAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NextBody__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NextBody__Group__2__Impl
	rule__NextBody__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__NextBody__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNextBodyAccess().getVarAssignment_2()); }
	(rule__NextBody__VarAssignment_2)
	{ after(grammarAccess.getNextBodyAccess().getVarAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NextBody__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NextBody__Group__3__Impl
	rule__NextBody__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__NextBody__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNextBodyAccess().getRightParenthesisKeyword_3()); }
	RightParenthesis
	{ after(grammarAccess.getNextBodyAccess().getRightParenthesisKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NextBody__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NextBody__Group__4__Impl
	rule__NextBody__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__NextBody__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNextBodyAccess().getColonEqualsSignKeyword_4()); }
	ColonEqualsSign
	{ after(grammarAccess.getNextBodyAccess().getColonEqualsSignKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NextBody__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NextBody__Group__5__Impl
	rule__NextBody__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__NextBody__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNextBodyAccess().getNextAssignment_5()); }
	(rule__NextBody__NextAssignment_5)
	{ after(grammarAccess.getNextBodyAccess().getNextAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NextBody__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NextBody__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NextBody__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNextBodyAccess().getSemicolonAssignment_6()); }
	(rule__NextBody__SemicolonAssignment_6)
	{ after(grammarAccess.getNextBodyAccess().getSemicolonAssignment_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__TransConstraint__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TransConstraint__Group__0__Impl
	rule__TransConstraint__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TransConstraint__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTransConstraintAccess().getTRANSKeyword_0()); }
	TRANS
	{ after(grammarAccess.getTransConstraintAccess().getTRANSKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TransConstraint__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TransConstraint__Group__1__Impl
	rule__TransConstraint__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TransConstraint__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTransConstraintAccess().getTransExpressionAssignment_1()); }
	(rule__TransConstraint__TransExpressionAssignment_1)
	{ after(grammarAccess.getTransConstraintAccess().getTransExpressionAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TransConstraint__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TransConstraint__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TransConstraint__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTransConstraintAccess().getSemicolonAssignment_2()); }
	(rule__TransConstraint__SemicolonAssignment_2)?
	{ after(grammarAccess.getTransConstraintAccess().getSemicolonAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__InitConstraint__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__InitConstraint__Group__0__Impl
	rule__InitConstraint__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__InitConstraint__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInitConstraintAccess().getINITKeyword_0()); }
	INIT
	{ after(grammarAccess.getInitConstraintAccess().getINITKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__InitConstraint__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__InitConstraint__Group__1__Impl
	rule__InitConstraint__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__InitConstraint__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInitConstraintAccess().getInitExpressionAssignment_1()); }
	(rule__InitConstraint__InitExpressionAssignment_1)
	{ after(grammarAccess.getInitConstraintAccess().getInitExpressionAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__InitConstraint__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__InitConstraint__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__InitConstraint__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInitConstraintAccess().getSemicolonAssignment_2()); }
	(rule__InitConstraint__SemicolonAssignment_2)?
	{ after(grammarAccess.getInitConstraintAccess().getSemicolonAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__InvarConstraint__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__InvarConstraint__Group__0__Impl
	rule__InvarConstraint__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__InvarConstraint__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInvarConstraintAccess().getINVARKeyword_0()); }
	INVAR
	{ after(grammarAccess.getInvarConstraintAccess().getINVARKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__InvarConstraint__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__InvarConstraint__Group__1__Impl
	rule__InvarConstraint__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__InvarConstraint__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInvarConstraintAccess().getInvarExpressionAssignment_1()); }
	(rule__InvarConstraint__InvarExpressionAssignment_1)
	{ after(grammarAccess.getInvarConstraintAccess().getInvarExpressionAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__InvarConstraint__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__InvarConstraint__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__InvarConstraint__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInvarConstraintAccess().getSemicolonAssignment_2()); }
	(rule__InvarConstraint__SemicolonAssignment_2)?
	{ after(grammarAccess.getInvarConstraintAccess().getSemicolonAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FairnessExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FairnessExpression__Group__0__Impl
	rule__FairnessExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FairnessExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFairnessExpressionAccess().getFAIRNESSKeyword_0()); }
	FAIRNESS
	{ after(grammarAccess.getFairnessExpressionAccess().getFAIRNESSKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FairnessExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FairnessExpression__Group__1__Impl
	rule__FairnessExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FairnessExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFairnessExpressionAccess().getFairnessExprAssignment_1()); }
	(rule__FairnessExpression__FairnessExprAssignment_1)
	{ after(grammarAccess.getFairnessExpressionAccess().getFairnessExprAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FairnessExpression__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FairnessExpression__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FairnessExpression__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFairnessExpressionAccess().getSemicolonAssignment_2()); }
	(rule__FairnessExpression__SemicolonAssignment_2)?
	{ after(grammarAccess.getFairnessExpressionAccess().getSemicolonAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__JusticeExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__JusticeExpression__Group__0__Impl
	rule__JusticeExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__JusticeExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getJusticeExpressionAccess().getJUSTICEKeyword_0()); }
	JUSTICE
	{ after(grammarAccess.getJusticeExpressionAccess().getJUSTICEKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__JusticeExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__JusticeExpression__Group__1__Impl
	rule__JusticeExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__JusticeExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getJusticeExpressionAccess().getJusticeExprAssignment_1()); }
	(rule__JusticeExpression__JusticeExprAssignment_1)
	{ after(grammarAccess.getJusticeExpressionAccess().getJusticeExprAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__JusticeExpression__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__JusticeExpression__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__JusticeExpression__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getJusticeExpressionAccess().getSemicolonAssignment_2()); }
	(rule__JusticeExpression__SemicolonAssignment_2)?
	{ after(grammarAccess.getJusticeExpressionAccess().getSemicolonAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__CompassionExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CompassionExpression__Group__0__Impl
	rule__CompassionExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CompassionExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCompassionExpressionAccess().getCOMPASSIONKeyword_0()); }
	COMPASSION
	{ after(grammarAccess.getCompassionExpressionAccess().getCOMPASSIONKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CompassionExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CompassionExpression__Group__1__Impl
	rule__CompassionExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__CompassionExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCompassionExpressionAccess().getFirstExprAssignment_1()); }
	(rule__CompassionExpression__FirstExprAssignment_1)
	{ after(grammarAccess.getCompassionExpressionAccess().getFirstExprAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CompassionExpression__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CompassionExpression__Group__2__Impl
	rule__CompassionExpression__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__CompassionExpression__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCompassionExpressionAccess().getCommaKeyword_2()); }
	Comma
	{ after(grammarAccess.getCompassionExpressionAccess().getCommaKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CompassionExpression__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CompassionExpression__Group__3__Impl
	rule__CompassionExpression__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__CompassionExpression__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCompassionExpressionAccess().getSecondExprAssignment_3()); }
	(rule__CompassionExpression__SecondExprAssignment_3)
	{ after(grammarAccess.getCompassionExpressionAccess().getSecondExprAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CompassionExpression__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CompassionExpression__Group__4__Impl
	rule__CompassionExpression__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__CompassionExpression__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCompassionExpressionAccess().getRightParenthesisKeyword_4()); }
	RightParenthesis
	{ after(grammarAccess.getCompassionExpressionAccess().getRightParenthesisKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CompassionExpression__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CompassionExpression__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CompassionExpression__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCompassionExpressionAccess().getSemicolonAssignment_5()); }
	(rule__CompassionExpression__SemicolonAssignment_5)?
	{ after(grammarAccess.getCompassionExpressionAccess().getSemicolonAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__CtlSpecification__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CtlSpecification__Group__0__Impl
	rule__CtlSpecification__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CtlSpecification__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCtlSpecificationAccess().getSpecKeyWordAssignment_0()); }
	(rule__CtlSpecification__SpecKeyWordAssignment_0)
	{ after(grammarAccess.getCtlSpecificationAccess().getSpecKeyWordAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CtlSpecification__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CtlSpecification__Group__1__Impl
	rule__CtlSpecification__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__CtlSpecification__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCtlSpecificationAccess().getGroup_1()); }
	(rule__CtlSpecification__Group_1__0)?
	{ after(grammarAccess.getCtlSpecificationAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CtlSpecification__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CtlSpecification__Group__2__Impl
	rule__CtlSpecification__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__CtlSpecification__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCtlSpecificationAccess().getCtlExpressionAssignment_2()); }
	(rule__CtlSpecification__CtlExpressionAssignment_2)
	{ after(grammarAccess.getCtlSpecificationAccess().getCtlExpressionAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CtlSpecification__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CtlSpecification__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CtlSpecification__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCtlSpecificationAccess().getSemicolonAssignment_3()); }
	(rule__CtlSpecification__SemicolonAssignment_3)?
	{ after(grammarAccess.getCtlSpecificationAccess().getSemicolonAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__CtlSpecification__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CtlSpecification__Group_1__0__Impl
	rule__CtlSpecification__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CtlSpecification__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCtlSpecificationAccess().getNameKeyWordAssignment_1_0()); }
	(rule__CtlSpecification__NameKeyWordAssignment_1_0)
	{ after(grammarAccess.getCtlSpecificationAccess().getNameKeyWordAssignment_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CtlSpecification__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CtlSpecification__Group_1__1__Impl
	rule__CtlSpecification__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__CtlSpecification__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCtlSpecificationAccess().getNameAssignment_1_1()); }
	(rule__CtlSpecification__NameAssignment_1_1)
	{ after(grammarAccess.getCtlSpecificationAccess().getNameAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CtlSpecification__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CtlSpecification__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CtlSpecification__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCtlSpecificationAccess().getColonEqualsSignKeyword_1_2()); }
	ColonEqualsSign
	{ after(grammarAccess.getCtlSpecificationAccess().getColonEqualsSignKeyword_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PslSpecification__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PslSpecification__Group__0__Impl
	rule__PslSpecification__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PslSpecification__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPslSpecificationAccess().getPSLSPECKeyword_0()); }
	PSLSPEC
	{ after(grammarAccess.getPslSpecificationAccess().getPSLSPECKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PslSpecification__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PslSpecification__Group__1__Impl
	rule__PslSpecification__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PslSpecification__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPslSpecificationAccess().getGroup_1()); }
	(rule__PslSpecification__Group_1__0)?
	{ after(grammarAccess.getPslSpecificationAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PslSpecification__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PslSpecification__Group__2__Impl
	rule__PslSpecification__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__PslSpecification__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPslSpecificationAccess().getPslExpressionAssignment_2()); }
	(rule__PslSpecification__PslExpressionAssignment_2)
	{ after(grammarAccess.getPslSpecificationAccess().getPslExpressionAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PslSpecification__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PslSpecification__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PslSpecification__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPslSpecificationAccess().getSemicolonAssignment_3()); }
	(rule__PslSpecification__SemicolonAssignment_3)?
	{ after(grammarAccess.getPslSpecificationAccess().getSemicolonAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PslSpecification__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PslSpecification__Group_1__0__Impl
	rule__PslSpecification__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PslSpecification__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPslSpecificationAccess().getNameKeyWordAssignment_1_0()); }
	(rule__PslSpecification__NameKeyWordAssignment_1_0)
	{ after(grammarAccess.getPslSpecificationAccess().getNameKeyWordAssignment_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PslSpecification__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PslSpecification__Group_1__1__Impl
	rule__PslSpecification__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PslSpecification__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPslSpecificationAccess().getNameAssignment_1_1()); }
	(rule__PslSpecification__NameAssignment_1_1)
	{ after(grammarAccess.getPslSpecificationAccess().getNameAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PslSpecification__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PslSpecification__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PslSpecification__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPslSpecificationAccess().getColonEqualsSignKeyword_1_2()); }
	ColonEqualsSign
	{ after(grammarAccess.getPslSpecificationAccess().getColonEqualsSignKeyword_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__InvarSpecification__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__InvarSpecification__Group_0__0__Impl
	rule__InvarSpecification__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__InvarSpecification__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInvarSpecificationAccess().getINVARSPECKeyword_0_0()); }
	INVARSPEC
	{ after(grammarAccess.getInvarSpecificationAccess().getINVARSPECKeyword_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__InvarSpecification__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__InvarSpecification__Group_0__1__Impl
	rule__InvarSpecification__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__InvarSpecification__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInvarSpecificationAccess().getInvarSpecAssignment_0_1()); }
	(rule__InvarSpecification__InvarSpecAssignment_0_1)
	{ after(grammarAccess.getInvarSpecificationAccess().getInvarSpecAssignment_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__InvarSpecification__Group_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__InvarSpecification__Group_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__InvarSpecification__Group_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInvarSpecificationAccess().getSemicolonKeyword_0_2()); }
	Semicolon
	{ after(grammarAccess.getInvarSpecificationAccess().getSemicolonKeyword_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__InvarSpecification__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__InvarSpecification__Group_1__0__Impl
	rule__InvarSpecification__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__InvarSpecification__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInvarSpecificationAccess().getINVARSPECKeyword_1_0()); }
	INVARSPEC
	{ after(grammarAccess.getInvarSpecificationAccess().getINVARSPECKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__InvarSpecification__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__InvarSpecification__Group_1__1__Impl
	rule__InvarSpecification__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__InvarSpecification__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInvarSpecificationAccess().getNameAssignment_1_1()); }
	(rule__InvarSpecification__NameAssignment_1_1)
	{ after(grammarAccess.getInvarSpecificationAccess().getNameAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__InvarSpecification__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__InvarSpecification__Group_1__2__Impl
	rule__InvarSpecification__Group_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__InvarSpecification__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInvarSpecificationAccess().getColonEqualsSignKeyword_1_2()); }
	ColonEqualsSign
	{ after(grammarAccess.getInvarSpecificationAccess().getColonEqualsSignKeyword_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__InvarSpecification__Group_1__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__InvarSpecification__Group_1__3__Impl
	rule__InvarSpecification__Group_1__4
;
finally {
	restoreStackSize(stackSize);
}

rule__InvarSpecification__Group_1__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInvarSpecificationAccess().getInvarSpecAssignment_1_3()); }
	(rule__InvarSpecification__InvarSpecAssignment_1_3)
	{ after(grammarAccess.getInvarSpecificationAccess().getInvarSpecAssignment_1_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__InvarSpecification__Group_1__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__InvarSpecification__Group_1__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__InvarSpecification__Group_1__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInvarSpecificationAccess().getSemicolonAssignment_1_4()); }
	(rule__InvarSpecification__SemicolonAssignment_1_4)?
	{ after(grammarAccess.getInvarSpecificationAccess().getSemicolonAssignment_1_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__IsaDeclaration__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IsaDeclaration__Group__0__Impl
	rule__IsaDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IsaDeclaration__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIsaDeclarationAccess().getISAKeyword_0()); }
	ISA
	{ after(grammarAccess.getIsaDeclarationAccess().getISAKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IsaDeclaration__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IsaDeclaration__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IsaDeclaration__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIsaDeclarationAccess().getIdAssignment_1()); }
	(rule__IsaDeclaration__IdAssignment_1)
	{ after(grammarAccess.getIsaDeclarationAccess().getIdAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__LtlSpecification__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LtlSpecification__Group__0__Impl
	rule__LtlSpecification__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LtlSpecification__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLtlSpecificationAccess().getLTLSPECKeyword_0()); }
	LTLSPEC
	{ after(grammarAccess.getLtlSpecificationAccess().getLTLSPECKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LtlSpecification__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LtlSpecification__Group__1__Impl
	rule__LtlSpecification__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__LtlSpecification__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLtlSpecificationAccess().getGroup_1()); }
	(rule__LtlSpecification__Group_1__0)?
	{ after(grammarAccess.getLtlSpecificationAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LtlSpecification__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LtlSpecification__Group__2__Impl
	rule__LtlSpecification__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__LtlSpecification__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLtlSpecificationAccess().getLtlExpressionAssignment_2()); }
	(rule__LtlSpecification__LtlExpressionAssignment_2)
	{ after(grammarAccess.getLtlSpecificationAccess().getLtlExpressionAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LtlSpecification__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LtlSpecification__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LtlSpecification__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLtlSpecificationAccess().getSemicolonAssignment_3()); }
	(rule__LtlSpecification__SemicolonAssignment_3)?
	{ after(grammarAccess.getLtlSpecificationAccess().getSemicolonAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__LtlSpecification__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LtlSpecification__Group_1__0__Impl
	rule__LtlSpecification__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LtlSpecification__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLtlSpecificationAccess().getNameIdAssignment_1_0()); }
	(rule__LtlSpecification__NameIdAssignment_1_0)
	{ after(grammarAccess.getLtlSpecificationAccess().getNameIdAssignment_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LtlSpecification__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LtlSpecification__Group_1__1__Impl
	rule__LtlSpecification__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__LtlSpecification__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLtlSpecificationAccess().getNameAssignment_1_1()); }
	(rule__LtlSpecification__NameAssignment_1_1)
	{ after(grammarAccess.getLtlSpecificationAccess().getNameAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LtlSpecification__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LtlSpecification__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LtlSpecification__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLtlSpecificationAccess().getColonEqualsSignKeyword_1_2()); }
	ColonEqualsSign
	{ after(grammarAccess.getLtlSpecificationAccess().getColonEqualsSignKeyword_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SimpleType__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SimpleType__Group_0__0__Impl
	rule__SimpleType__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleType__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSimpleTypeAccess().getBooleanTypeAction_0_0()); }
	()
	{ after(grammarAccess.getSimpleTypeAccess().getBooleanTypeAction_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleType__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SimpleType__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleType__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSimpleTypeAccess().getBooleanKeyword_0_1()); }
	Boolean
	{ after(grammarAccess.getSimpleTypeAccess().getBooleanKeyword_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SimpleType__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SimpleType__Group_1__0__Impl
	rule__SimpleType__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleType__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSimpleTypeAccess().getWordTypeAction_1_0()); }
	()
	{ after(grammarAccess.getSimpleTypeAccess().getWordTypeAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleType__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SimpleType__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleType__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSimpleTypeAccess().getGroup_1_1()); }
	(rule__SimpleType__Group_1_1__0)
	{ after(grammarAccess.getSimpleTypeAccess().getGroup_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SimpleType__Group_1_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SimpleType__Group_1_1__0__Impl
	rule__SimpleType__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleType__Group_1_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSimpleTypeAccess().getWordKeyword_1_1_0()); }
	Word
	{ after(grammarAccess.getSimpleTypeAccess().getWordKeyword_1_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleType__Group_1_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SimpleType__Group_1_1__1__Impl
	rule__SimpleType__Group_1_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleType__Group_1_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSimpleTypeAccess().getLeftSquareBracketKeyword_1_1_1()); }
	LeftSquareBracket
	{ after(grammarAccess.getSimpleTypeAccess().getLeftSquareBracketKeyword_1_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleType__Group_1_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SimpleType__Group_1_1__2__Impl
	rule__SimpleType__Group_1_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleType__Group_1_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSimpleTypeAccess().getWordNumberAssignment_1_1_2()); }
	(rule__SimpleType__WordNumberAssignment_1_1_2)
	{ after(grammarAccess.getSimpleTypeAccess().getWordNumberAssignment_1_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleType__Group_1_1__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SimpleType__Group_1_1__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleType__Group_1_1__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSimpleTypeAccess().getRightSquareBracketKeyword_1_1_3()); }
	RightSquareBracket
	{ after(grammarAccess.getSimpleTypeAccess().getRightSquareBracketKeyword_1_1_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SimpleType__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SimpleType__Group_2__0__Impl
	rule__SimpleType__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleType__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSimpleTypeAccess().getUnsignedWordTypeAction_2_0()); }
	()
	{ after(grammarAccess.getSimpleTypeAccess().getUnsignedWordTypeAction_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleType__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SimpleType__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleType__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSimpleTypeAccess().getGroup_2_1()); }
	(rule__SimpleType__Group_2_1__0)
	{ after(grammarAccess.getSimpleTypeAccess().getGroup_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SimpleType__Group_2_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SimpleType__Group_2_1__0__Impl
	rule__SimpleType__Group_2_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleType__Group_2_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSimpleTypeAccess().getUnsignedKeyword_2_1_0()); }
	Unsigned
	{ after(grammarAccess.getSimpleTypeAccess().getUnsignedKeyword_2_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleType__Group_2_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SimpleType__Group_2_1__1__Impl
	rule__SimpleType__Group_2_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleType__Group_2_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSimpleTypeAccess().getWordKeyword_2_1_1()); }
	Word
	{ after(grammarAccess.getSimpleTypeAccess().getWordKeyword_2_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleType__Group_2_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SimpleType__Group_2_1__2__Impl
	rule__SimpleType__Group_2_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleType__Group_2_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSimpleTypeAccess().getLeftSquareBracketKeyword_2_1_2()); }
	LeftSquareBracket
	{ after(grammarAccess.getSimpleTypeAccess().getLeftSquareBracketKeyword_2_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleType__Group_2_1__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SimpleType__Group_2_1__3__Impl
	rule__SimpleType__Group_2_1__4
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleType__Group_2_1__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSimpleTypeAccess().getUWordNumberAssignment_2_1_3()); }
	(rule__SimpleType__UWordNumberAssignment_2_1_3)
	{ after(grammarAccess.getSimpleTypeAccess().getUWordNumberAssignment_2_1_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleType__Group_2_1__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SimpleType__Group_2_1__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleType__Group_2_1__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSimpleTypeAccess().getRightSquareBracketKeyword_2_1_4()); }
	RightSquareBracket
	{ after(grammarAccess.getSimpleTypeAccess().getRightSquareBracketKeyword_2_1_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SimpleType__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SimpleType__Group_3__0__Impl
	rule__SimpleType__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleType__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSimpleTypeAccess().getSignedWordTypeAction_3_0()); }
	()
	{ after(grammarAccess.getSimpleTypeAccess().getSignedWordTypeAction_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleType__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SimpleType__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleType__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSimpleTypeAccess().getGroup_3_1()); }
	(rule__SimpleType__Group_3_1__0)
	{ after(grammarAccess.getSimpleTypeAccess().getGroup_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SimpleType__Group_3_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SimpleType__Group_3_1__0__Impl
	rule__SimpleType__Group_3_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleType__Group_3_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSimpleTypeAccess().getSignedWordKeyword_3_1_0()); }
	SignedWord
	{ after(grammarAccess.getSimpleTypeAccess().getSignedWordKeyword_3_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleType__Group_3_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SimpleType__Group_3_1__1__Impl
	rule__SimpleType__Group_3_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleType__Group_3_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSimpleTypeAccess().getLeftSquareBracketKeyword_3_1_1()); }
	LeftSquareBracket
	{ after(grammarAccess.getSimpleTypeAccess().getLeftSquareBracketKeyword_3_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleType__Group_3_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SimpleType__Group_3_1__2__Impl
	rule__SimpleType__Group_3_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleType__Group_3_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSimpleTypeAccess().getSignedNumberAssignment_3_1_2()); }
	(rule__SimpleType__SignedNumberAssignment_3_1_2)
	{ after(grammarAccess.getSimpleTypeAccess().getSignedNumberAssignment_3_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleType__Group_3_1__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SimpleType__Group_3_1__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleType__Group_3_1__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSimpleTypeAccess().getRightSquareBracketKeyword_3_1_3()); }
	RightSquareBracket
	{ after(grammarAccess.getSimpleTypeAccess().getRightSquareBracketKeyword_3_1_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SimpleType__Group_4__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SimpleType__Group_4__0__Impl
	rule__SimpleType__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleType__Group_4__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSimpleTypeAccess().getEnumTypeAction_4_0()); }
	()
	{ after(grammarAccess.getSimpleTypeAccess().getEnumTypeAction_4_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleType__Group_4__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SimpleType__Group_4__1__Impl
	rule__SimpleType__Group_4__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleType__Group_4__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSimpleTypeAccess().getLeftCurlyBracketKeyword_4_1()); }
	LeftCurlyBracket
	{ after(grammarAccess.getSimpleTypeAccess().getLeftCurlyBracketKeyword_4_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleType__Group_4__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SimpleType__Group_4__2__Impl
	rule__SimpleType__Group_4__3
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleType__Group_4__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSimpleTypeAccess().getValAssignment_4_2()); }
	(rule__SimpleType__ValAssignment_4_2)
	{ after(grammarAccess.getSimpleTypeAccess().getValAssignment_4_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleType__Group_4__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SimpleType__Group_4__3__Impl
	rule__SimpleType__Group_4__4
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleType__Group_4__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSimpleTypeAccess().getGroup_4_3()); }
	(rule__SimpleType__Group_4_3__0)*
	{ after(grammarAccess.getSimpleTypeAccess().getGroup_4_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleType__Group_4__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SimpleType__Group_4__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleType__Group_4__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSimpleTypeAccess().getRightCurlyBracketKeyword_4_4()); }
	RightCurlyBracket
	{ after(grammarAccess.getSimpleTypeAccess().getRightCurlyBracketKeyword_4_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SimpleType__Group_4_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SimpleType__Group_4_3__0__Impl
	rule__SimpleType__Group_4_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleType__Group_4_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSimpleTypeAccess().getCommaKeyword_4_3_0()); }
	Comma
	{ after(grammarAccess.getSimpleTypeAccess().getCommaKeyword_4_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleType__Group_4_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SimpleType__Group_4_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleType__Group_4_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSimpleTypeAccess().getValAssignment_4_3_1()); }
	(rule__SimpleType__ValAssignment_4_3_1)
	{ after(grammarAccess.getSimpleTypeAccess().getValAssignment_4_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SimpleType__Group_5__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SimpleType__Group_5__0__Impl
	rule__SimpleType__Group_5__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleType__Group_5__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSimpleTypeAccess().getIntervalTypeAction_5_0()); }
	()
	{ after(grammarAccess.getSimpleTypeAccess().getIntervalTypeAction_5_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleType__Group_5__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SimpleType__Group_5__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleType__Group_5__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSimpleTypeAccess().getGroup_5_1()); }
	(rule__SimpleType__Group_5_1__0)
	{ after(grammarAccess.getSimpleTypeAccess().getGroup_5_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SimpleType__Group_5_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SimpleType__Group_5_1__0__Impl
	rule__SimpleType__Group_5_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleType__Group_5_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSimpleTypeAccess().getLowAssignment_5_1_0()); }
	(rule__SimpleType__LowAssignment_5_1_0)
	{ after(grammarAccess.getSimpleTypeAccess().getLowAssignment_5_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleType__Group_5_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SimpleType__Group_5_1__1__Impl
	rule__SimpleType__Group_5_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleType__Group_5_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSimpleTypeAccess().getFullStopFullStopKeyword_5_1_1()); }
	FullStopFullStop
	{ after(grammarAccess.getSimpleTypeAccess().getFullStopFullStopKeyword_5_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleType__Group_5_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SimpleType__Group_5_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleType__Group_5_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSimpleTypeAccess().getHighAssignment_5_1_2()); }
	(rule__SimpleType__HighAssignment_5_1_2)
	{ after(grammarAccess.getSimpleTypeAccess().getHighAssignment_5_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SimpleType__Group_6__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SimpleType__Group_6__0__Impl
	rule__SimpleType__Group_6__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleType__Group_6__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSimpleTypeAccess().getArrayTypeAction_6_0()); }
	()
	{ after(grammarAccess.getSimpleTypeAccess().getArrayTypeAction_6_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleType__Group_6__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SimpleType__Group_6__1__Impl
	rule__SimpleType__Group_6__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleType__Group_6__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSimpleTypeAccess().getArrayKeyword_6_1()); }
	Array
	{ after(grammarAccess.getSimpleTypeAccess().getArrayKeyword_6_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleType__Group_6__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SimpleType__Group_6__2__Impl
	rule__SimpleType__Group_6__3
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleType__Group_6__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSimpleTypeAccess().getLowerBoundAssignment_6_2()); }
	(rule__SimpleType__LowerBoundAssignment_6_2)
	{ after(grammarAccess.getSimpleTypeAccess().getLowerBoundAssignment_6_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleType__Group_6__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SimpleType__Group_6__3__Impl
	rule__SimpleType__Group_6__4
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleType__Group_6__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSimpleTypeAccess().getFullStopFullStopKeyword_6_3()); }
	FullStopFullStop
	{ after(grammarAccess.getSimpleTypeAccess().getFullStopFullStopKeyword_6_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleType__Group_6__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SimpleType__Group_6__4__Impl
	rule__SimpleType__Group_6__5
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleType__Group_6__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSimpleTypeAccess().getUpperBoundAssignment_6_4()); }
	(rule__SimpleType__UpperBoundAssignment_6_4)
	{ after(grammarAccess.getSimpleTypeAccess().getUpperBoundAssignment_6_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleType__Group_6__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SimpleType__Group_6__5__Impl
	rule__SimpleType__Group_6__6
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleType__Group_6__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSimpleTypeAccess().getOfKeyword_6_5()); }
	Of
	{ after(grammarAccess.getSimpleTypeAccess().getOfKeyword_6_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleType__Group_6__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SimpleType__Group_6__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleType__Group_6__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSimpleTypeAccess().getTypeAssignment_6_6()); }
	(rule__SimpleType__TypeAssignment_6_6)
	{ after(grammarAccess.getSimpleTypeAccess().getTypeAssignment_6_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ModuleType__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ModuleType__Group_0__0__Impl
	rule__ModuleType__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ModuleType__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModuleTypeAccess().getAsyncrProcessTypeAction_0_0()); }
	()
	{ after(grammarAccess.getModuleTypeAccess().getAsyncrProcessTypeAction_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ModuleType__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ModuleType__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ModuleType__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModuleTypeAccess().getGroup_0_1()); }
	(rule__ModuleType__Group_0_1__0)
	{ after(grammarAccess.getModuleTypeAccess().getGroup_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ModuleType__Group_0_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ModuleType__Group_0_1__0__Impl
	rule__ModuleType__Group_0_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ModuleType__Group_0_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModuleTypeAccess().getProcessKeyword_0_1_0()); }
	Process
	{ after(grammarAccess.getModuleTypeAccess().getProcessKeyword_0_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ModuleType__Group_0_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ModuleType__Group_0_1__1__Impl
	rule__ModuleType__Group_0_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ModuleType__Group_0_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModuleTypeAccess().getModuleAssignment_0_1_1()); }
	(rule__ModuleType__ModuleAssignment_0_1_1)
	{ after(grammarAccess.getModuleTypeAccess().getModuleAssignment_0_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ModuleType__Group_0_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ModuleType__Group_0_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ModuleType__Group_0_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModuleTypeAccess().getGroup_0_1_2()); }
	(rule__ModuleType__Group_0_1_2__0)?
	{ after(grammarAccess.getModuleTypeAccess().getGroup_0_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ModuleType__Group_0_1_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ModuleType__Group_0_1_2__0__Impl
	rule__ModuleType__Group_0_1_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ModuleType__Group_0_1_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModuleTypeAccess().getLeftParenthesisKeyword_0_1_2_0()); }
	LeftParenthesis
	{ after(grammarAccess.getModuleTypeAccess().getLeftParenthesisKeyword_0_1_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ModuleType__Group_0_1_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ModuleType__Group_0_1_2__1__Impl
	rule__ModuleType__Group_0_1_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ModuleType__Group_0_1_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModuleTypeAccess().getAlternatives_0_1_2_1()); }
	(rule__ModuleType__Alternatives_0_1_2_1)
	{ after(grammarAccess.getModuleTypeAccess().getAlternatives_0_1_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ModuleType__Group_0_1_2__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ModuleType__Group_0_1_2__2__Impl
	rule__ModuleType__Group_0_1_2__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ModuleType__Group_0_1_2__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModuleTypeAccess().getGroup_0_1_2_2()); }
	(rule__ModuleType__Group_0_1_2_2__0)*
	{ after(grammarAccess.getModuleTypeAccess().getGroup_0_1_2_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ModuleType__Group_0_1_2__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ModuleType__Group_0_1_2__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ModuleType__Group_0_1_2__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModuleTypeAccess().getRightParenthesisKeyword_0_1_2_3()); }
	RightParenthesis
	{ after(grammarAccess.getModuleTypeAccess().getRightParenthesisKeyword_0_1_2_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ModuleType__Group_0_1_2_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ModuleType__Group_0_1_2_2__0__Impl
	rule__ModuleType__Group_0_1_2_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ModuleType__Group_0_1_2_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModuleTypeAccess().getCommaKeyword_0_1_2_2_0()); }
	Comma
	{ after(grammarAccess.getModuleTypeAccess().getCommaKeyword_0_1_2_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ModuleType__Group_0_1_2_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ModuleType__Group_0_1_2_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ModuleType__Group_0_1_2_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModuleTypeAccess().getParamsAssignment_0_1_2_2_1()); }
	(rule__ModuleType__ParamsAssignment_0_1_2_2_1)
	{ after(grammarAccess.getModuleTypeAccess().getParamsAssignment_0_1_2_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ModuleType__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ModuleType__Group_1__0__Impl
	rule__ModuleType__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ModuleType__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModuleTypeAccess().getSyncrProcessTypeAction_1_0()); }
	()
	{ after(grammarAccess.getModuleTypeAccess().getSyncrProcessTypeAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ModuleType__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ModuleType__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ModuleType__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModuleTypeAccess().getGroup_1_1()); }
	(rule__ModuleType__Group_1_1__0)
	{ after(grammarAccess.getModuleTypeAccess().getGroup_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ModuleType__Group_1_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ModuleType__Group_1_1__0__Impl
	rule__ModuleType__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ModuleType__Group_1_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModuleTypeAccess().getModuleAssignment_1_1_0()); }
	(rule__ModuleType__ModuleAssignment_1_1_0)
	{ after(grammarAccess.getModuleTypeAccess().getModuleAssignment_1_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ModuleType__Group_1_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ModuleType__Group_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ModuleType__Group_1_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModuleTypeAccess().getGroup_1_1_1()); }
	(rule__ModuleType__Group_1_1_1__0)?
	{ after(grammarAccess.getModuleTypeAccess().getGroup_1_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ModuleType__Group_1_1_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ModuleType__Group_1_1_1__0__Impl
	rule__ModuleType__Group_1_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ModuleType__Group_1_1_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModuleTypeAccess().getLeftParenthesisKeyword_1_1_1_0()); }
	LeftParenthesis
	{ after(grammarAccess.getModuleTypeAccess().getLeftParenthesisKeyword_1_1_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ModuleType__Group_1_1_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ModuleType__Group_1_1_1__1__Impl
	rule__ModuleType__Group_1_1_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ModuleType__Group_1_1_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModuleTypeAccess().getAlternatives_1_1_1_1()); }
	(rule__ModuleType__Alternatives_1_1_1_1)
	{ after(grammarAccess.getModuleTypeAccess().getAlternatives_1_1_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ModuleType__Group_1_1_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ModuleType__Group_1_1_1__2__Impl
	rule__ModuleType__Group_1_1_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ModuleType__Group_1_1_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModuleTypeAccess().getGroup_1_1_1_2()); }
	(rule__ModuleType__Group_1_1_1_2__0)*
	{ after(grammarAccess.getModuleTypeAccess().getGroup_1_1_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ModuleType__Group_1_1_1__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ModuleType__Group_1_1_1__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ModuleType__Group_1_1_1__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModuleTypeAccess().getRightParenthesisKeyword_1_1_1_3()); }
	RightParenthesis
	{ after(grammarAccess.getModuleTypeAccess().getRightParenthesisKeyword_1_1_1_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ModuleType__Group_1_1_1_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ModuleType__Group_1_1_1_2__0__Impl
	rule__ModuleType__Group_1_1_1_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ModuleType__Group_1_1_1_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModuleTypeAccess().getCommaKeyword_1_1_1_2_0()); }
	Comma
	{ after(grammarAccess.getModuleTypeAccess().getCommaKeyword_1_1_1_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ModuleType__Group_1_1_1_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ModuleType__Group_1_1_1_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ModuleType__Group_1_1_1_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModuleTypeAccess().getParamsAssignment_1_1_1_2_1()); }
	(rule__ModuleType__ParamsAssignment_1_1_1_2_1)
	{ after(grammarAccess.getModuleTypeAccess().getParamsAssignment_1_1_1_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Val__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Val__Group__0__Impl
	rule__Val__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Val__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getValAccess().getValAction_0()); }
	()
	{ after(grammarAccess.getValAccess().getValAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Val__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Val__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Val__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getValAccess().getAlternatives_1()); }
	(rule__Val__Alternatives_1)
	{ after(grammarAccess.getValAccess().getAlternatives_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__LTLbinExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LTLbinExpression__Group__0__Impl
	rule__LTLbinExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LTLbinExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLTLbinExpressionAccess().getImpliesExpressionParserRuleCall_0()); }
	(ruleImpliesExpression)
	{ after(grammarAccess.getLTLbinExpressionAccess().getImpliesExpressionParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LTLbinExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LTLbinExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LTLbinExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLTLbinExpressionAccess().getGroup_1()); }
	(rule__LTLbinExpression__Group_1__0)*
	{ after(grammarAccess.getLTLbinExpressionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__LTLbinExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LTLbinExpression__Group_1__0__Impl
	rule__LTLbinExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LTLbinExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLTLbinExpressionAccess().getBinaryExpressionLeftAction_1_0()); }
	()
	{ after(grammarAccess.getLTLbinExpressionAccess().getBinaryExpressionLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LTLbinExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LTLbinExpression__Group_1__1__Impl
	rule__LTLbinExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__LTLbinExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLTLbinExpressionAccess().getOperatorAssignment_1_1()); }
	(rule__LTLbinExpression__OperatorAssignment_1_1)
	{ after(grammarAccess.getLTLbinExpressionAccess().getOperatorAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LTLbinExpression__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LTLbinExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LTLbinExpression__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLTLbinExpressionAccess().getRightAssignment_1_2()); }
	(rule__LTLbinExpression__RightAssignment_1_2)
	{ after(grammarAccess.getLTLbinExpressionAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ImpliesExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ImpliesExpression__Group__0__Impl
	rule__ImpliesExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ImpliesExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getImpliesExpressionAccess().getIffExpressionParserRuleCall_0()); }
	(ruleIffExpression)
	{ after(grammarAccess.getImpliesExpressionAccess().getIffExpressionParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ImpliesExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ImpliesExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ImpliesExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getImpliesExpressionAccess().getGroup_1()); }
	(rule__ImpliesExpression__Group_1__0)*
	{ after(grammarAccess.getImpliesExpressionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ImpliesExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ImpliesExpression__Group_1__0__Impl
	rule__ImpliesExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ImpliesExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getImpliesExpressionAccess().getBinaryExpressionLeftAction_1_0()); }
	()
	{ after(grammarAccess.getImpliesExpressionAccess().getBinaryExpressionLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ImpliesExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ImpliesExpression__Group_1__1__Impl
	rule__ImpliesExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ImpliesExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getImpliesExpressionAccess().getOperatorAssignment_1_1()); }
	(rule__ImpliesExpression__OperatorAssignment_1_1)
	{ after(grammarAccess.getImpliesExpressionAccess().getOperatorAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ImpliesExpression__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ImpliesExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ImpliesExpression__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getImpliesExpressionAccess().getRightAssignment_1_2()); }
	(rule__ImpliesExpression__RightAssignment_1_2)
	{ after(grammarAccess.getImpliesExpressionAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__IffExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IffExpression__Group__0__Impl
	rule__IffExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IffExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIffExpressionAccess().getOrExpressionParserRuleCall_0()); }
	(ruleOrExpression)
	{ after(grammarAccess.getIffExpressionAccess().getOrExpressionParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IffExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IffExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IffExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIffExpressionAccess().getGroup_1()); }
	(rule__IffExpression__Group_1__0)*
	{ after(grammarAccess.getIffExpressionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__IffExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IffExpression__Group_1__0__Impl
	rule__IffExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IffExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIffExpressionAccess().getBinaryExpressionLeftAction_1_0()); }
	()
	{ after(grammarAccess.getIffExpressionAccess().getBinaryExpressionLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IffExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IffExpression__Group_1__1__Impl
	rule__IffExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__IffExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIffExpressionAccess().getOperatorAssignment_1_1()); }
	(rule__IffExpression__OperatorAssignment_1_1)
	{ after(grammarAccess.getIffExpressionAccess().getOperatorAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IffExpression__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IffExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IffExpression__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIffExpressionAccess().getRightAssignment_1_2()); }
	(rule__IffExpression__RightAssignment_1_2)
	{ after(grammarAccess.getIffExpressionAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__OrExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OrExpression__Group__0__Impl
	rule__OrExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrExpressionAccess().getAndExpressionParserRuleCall_0()); }
	(ruleAndExpression)
	{ after(grammarAccess.getOrExpressionAccess().getAndExpressionParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OrExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrExpressionAccess().getGroup_1()); }
	(rule__OrExpression__Group_1__0)*
	{ after(grammarAccess.getOrExpressionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__OrExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OrExpression__Group_1__0__Impl
	rule__OrExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrExpressionAccess().getBinaryExpressionLeftAction_1_0()); }
	()
	{ after(grammarAccess.getOrExpressionAccess().getBinaryExpressionLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OrExpression__Group_1__1__Impl
	rule__OrExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrExpressionAccess().getOperatorAssignment_1_1()); }
	(rule__OrExpression__OperatorAssignment_1_1)
	{ after(grammarAccess.getOrExpressionAccess().getOperatorAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OrExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrExpressionAccess().getRightAssignment_1_2()); }
	(rule__OrExpression__RightAssignment_1_2)
	{ after(grammarAccess.getOrExpressionAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AndExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AndExpression__Group__0__Impl
	rule__AndExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndExpressionAccess().getComparisonExpressionParserRuleCall_0()); }
	(ruleComparisonExpression)
	{ after(grammarAccess.getAndExpressionAccess().getComparisonExpressionParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AndExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndExpressionAccess().getGroup_1()); }
	(rule__AndExpression__Group_1__0)*
	{ after(grammarAccess.getAndExpressionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AndExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AndExpression__Group_1__0__Impl
	rule__AndExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndExpressionAccess().getBinaryExpressionLeftAction_1_0()); }
	()
	{ after(grammarAccess.getAndExpressionAccess().getBinaryExpressionLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AndExpression__Group_1__1__Impl
	rule__AndExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndExpressionAccess().getOperatorAssignment_1_1()); }
	(rule__AndExpression__OperatorAssignment_1_1)
	{ after(grammarAccess.getAndExpressionAccess().getOperatorAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AndExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndExpressionAccess().getRightAssignment_1_2()); }
	(rule__AndExpression__RightAssignment_1_2)
	{ after(grammarAccess.getAndExpressionAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ComparisonExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ComparisonExpression__Group__0__Impl
	rule__ComparisonExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComparisonExpressionAccess().getInExpressionParserRuleCall_0()); }
	(ruleInExpression)
	{ after(grammarAccess.getComparisonExpressionAccess().getInExpressionParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ComparisonExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComparisonExpressionAccess().getGroup_1()); }
	(rule__ComparisonExpression__Group_1__0)*
	{ after(grammarAccess.getComparisonExpressionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ComparisonExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ComparisonExpression__Group_1__0__Impl
	rule__ComparisonExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComparisonExpressionAccess().getBinaryExpressionLeftAction_1_0()); }
	()
	{ after(grammarAccess.getComparisonExpressionAccess().getBinaryExpressionLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ComparisonExpression__Group_1__1__Impl
	rule__ComparisonExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComparisonExpressionAccess().getOperatorAssignment_1_1()); }
	(rule__ComparisonExpression__OperatorAssignment_1_1)
	{ after(grammarAccess.getComparisonExpressionAccess().getOperatorAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonExpression__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ComparisonExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonExpression__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComparisonExpressionAccess().getRightAssignment_1_2()); }
	(rule__ComparisonExpression__RightAssignment_1_2)
	{ after(grammarAccess.getComparisonExpressionAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__InExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__InExpression__Group__0__Impl
	rule__InExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__InExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInExpressionAccess().getUnionExpressionParserRuleCall_0()); }
	(ruleUnionExpression)
	{ after(grammarAccess.getInExpressionAccess().getUnionExpressionParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__InExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__InExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__InExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInExpressionAccess().getGroup_1()); }
	(rule__InExpression__Group_1__0)*
	{ after(grammarAccess.getInExpressionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__InExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__InExpression__Group_1__0__Impl
	rule__InExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__InExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInExpressionAccess().getBinaryExpressionLeftAction_1_0()); }
	()
	{ after(grammarAccess.getInExpressionAccess().getBinaryExpressionLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__InExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__InExpression__Group_1__1__Impl
	rule__InExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__InExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInExpressionAccess().getOpAssignment_1_1()); }
	(rule__InExpression__OpAssignment_1_1)
	{ after(grammarAccess.getInExpressionAccess().getOpAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__InExpression__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__InExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__InExpression__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInExpressionAccess().getRightAssignment_1_2()); }
	(rule__InExpression__RightAssignment_1_2)
	{ after(grammarAccess.getInExpressionAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__UnionExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__UnionExpression__Group__0__Impl
	rule__UnionExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UnionExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUnionExpressionAccess().getRightShiftParserRuleCall_0()); }
	(ruleRightShift)
	{ after(grammarAccess.getUnionExpressionAccess().getRightShiftParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__UnionExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__UnionExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UnionExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUnionExpressionAccess().getGroup_1()); }
	(rule__UnionExpression__Group_1__0)*
	{ after(grammarAccess.getUnionExpressionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__UnionExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__UnionExpression__Group_1__0__Impl
	rule__UnionExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UnionExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUnionExpressionAccess().getBinaryExpressionLeftAction_1_0()); }
	()
	{ after(grammarAccess.getUnionExpressionAccess().getBinaryExpressionLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__UnionExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__UnionExpression__Group_1__1__Impl
	rule__UnionExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__UnionExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUnionExpressionAccess().getOpAssignment_1_1()); }
	(rule__UnionExpression__OpAssignment_1_1)
	{ after(grammarAccess.getUnionExpressionAccess().getOpAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__UnionExpression__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__UnionExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UnionExpression__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUnionExpressionAccess().getRightAssignment_1_2()); }
	(rule__UnionExpression__RightAssignment_1_2)
	{ after(grammarAccess.getUnionExpressionAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__RightShift__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RightShift__Group__0__Impl
	rule__RightShift__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RightShift__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRightShiftAccess().getLeftShiftParserRuleCall_0()); }
	(ruleLeftShift)
	{ after(grammarAccess.getRightShiftAccess().getLeftShiftParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RightShift__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RightShift__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RightShift__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRightShiftAccess().getGroup_1()); }
	(rule__RightShift__Group_1__0)*
	{ after(grammarAccess.getRightShiftAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__RightShift__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RightShift__Group_1__0__Impl
	rule__RightShift__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RightShift__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRightShiftAccess().getBinaryExpressionLeftAction_1_0()); }
	()
	{ after(grammarAccess.getRightShiftAccess().getBinaryExpressionLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RightShift__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RightShift__Group_1__1__Impl
	rule__RightShift__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__RightShift__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRightShiftAccess().getOpAssignment_1_1()); }
	(rule__RightShift__OpAssignment_1_1)
	{ after(grammarAccess.getRightShiftAccess().getOpAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RightShift__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RightShift__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RightShift__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRightShiftAccess().getRightAssignment_1_2()); }
	(rule__RightShift__RightAssignment_1_2)
	{ after(grammarAccess.getRightShiftAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__LeftShift__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LeftShift__Group__0__Impl
	rule__LeftShift__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LeftShift__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLeftShiftAccess().getMinusParserRuleCall_0()); }
	(ruleMinus)
	{ after(grammarAccess.getLeftShiftAccess().getMinusParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LeftShift__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LeftShift__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LeftShift__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLeftShiftAccess().getGroup_1()); }
	(rule__LeftShift__Group_1__0)*
	{ after(grammarAccess.getLeftShiftAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__LeftShift__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LeftShift__Group_1__0__Impl
	rule__LeftShift__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LeftShift__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLeftShiftAccess().getBinaryExpressionLeftAction_1_0()); }
	()
	{ after(grammarAccess.getLeftShiftAccess().getBinaryExpressionLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LeftShift__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LeftShift__Group_1__1__Impl
	rule__LeftShift__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__LeftShift__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLeftShiftAccess().getOpAssignment_1_1()); }
	(rule__LeftShift__OpAssignment_1_1)
	{ after(grammarAccess.getLeftShiftAccess().getOpAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LeftShift__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LeftShift__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LeftShift__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLeftShiftAccess().getRightAssignment_1_2()); }
	(rule__LeftShift__RightAssignment_1_2)
	{ after(grammarAccess.getLeftShiftAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Minus__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Minus__Group__0__Impl
	rule__Minus__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Minus__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMinusAccess().getPlusParserRuleCall_0()); }
	(rulePlus)
	{ after(grammarAccess.getMinusAccess().getPlusParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Minus__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Minus__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Minus__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMinusAccess().getGroup_1()); }
	(rule__Minus__Group_1__0)*
	{ after(grammarAccess.getMinusAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Minus__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Minus__Group_1__0__Impl
	rule__Minus__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Minus__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMinusAccess().getBinaryExpressionLeftAction_1_0()); }
	()
	{ after(grammarAccess.getMinusAccess().getBinaryExpressionLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Minus__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Minus__Group_1__1__Impl
	rule__Minus__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Minus__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMinusAccess().getOpAssignment_1_1()); }
	(rule__Minus__OpAssignment_1_1)
	{ after(grammarAccess.getMinusAccess().getOpAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Minus__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Minus__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Minus__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMinusAccess().getRightAssignment_1_2()); }
	(rule__Minus__RightAssignment_1_2)
	{ after(grammarAccess.getMinusAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Plus__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Plus__Group__0__Impl
	rule__Plus__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Plus__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPlusAccess().getMultParserRuleCall_0()); }
	(ruleMult)
	{ after(grammarAccess.getPlusAccess().getMultParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Plus__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Plus__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Plus__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPlusAccess().getGroup_1()); }
	(rule__Plus__Group_1__0)*
	{ after(grammarAccess.getPlusAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Plus__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Plus__Group_1__0__Impl
	rule__Plus__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Plus__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPlusAccess().getBinaryExpressionLeftAction_1_0()); }
	()
	{ after(grammarAccess.getPlusAccess().getBinaryExpressionLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Plus__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Plus__Group_1__1__Impl
	rule__Plus__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Plus__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPlusAccess().getOpAssignment_1_1()); }
	(rule__Plus__OpAssignment_1_1)
	{ after(grammarAccess.getPlusAccess().getOpAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Plus__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Plus__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Plus__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPlusAccess().getRightAssignment_1_2()); }
	(rule__Plus__RightAssignment_1_2)
	{ after(grammarAccess.getPlusAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Mult__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Mult__Group__0__Impl
	rule__Mult__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Mult__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultAccess().getModParserRuleCall_0()); }
	(ruleMod)
	{ after(grammarAccess.getMultAccess().getModParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Mult__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Mult__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Mult__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultAccess().getGroup_1()); }
	(rule__Mult__Group_1__0)*
	{ after(grammarAccess.getMultAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Mult__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Mult__Group_1__0__Impl
	rule__Mult__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Mult__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultAccess().getBinaryExpressionLeftAction_1_0()); }
	()
	{ after(grammarAccess.getMultAccess().getBinaryExpressionLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Mult__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Mult__Group_1__1__Impl
	rule__Mult__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Mult__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultAccess().getOpAssignment_1_1()); }
	(rule__Mult__OpAssignment_1_1)
	{ after(grammarAccess.getMultAccess().getOpAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Mult__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Mult__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Mult__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultAccess().getRightAssignment_1_2()); }
	(rule__Mult__RightAssignment_1_2)
	{ after(grammarAccess.getMultAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Mod__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Mod__Group__0__Impl
	rule__Mod__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Mod__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModAccess().getWordConcatenationParserRuleCall_0()); }
	(ruleWordConcatenation)
	{ after(grammarAccess.getModAccess().getWordConcatenationParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Mod__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Mod__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Mod__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModAccess().getGroup_1()); }
	(rule__Mod__Group_1__0)*
	{ after(grammarAccess.getModAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Mod__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Mod__Group_1__0__Impl
	rule__Mod__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Mod__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModAccess().getBinaryExpressionLeftAction_1_0()); }
	()
	{ after(grammarAccess.getModAccess().getBinaryExpressionLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Mod__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Mod__Group_1__1__Impl
	rule__Mod__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Mod__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModAccess().getOpAssignment_1_1()); }
	(rule__Mod__OpAssignment_1_1)
	{ after(grammarAccess.getModAccess().getOpAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Mod__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Mod__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Mod__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModAccess().getRightAssignment_1_2()); }
	(rule__Mod__RightAssignment_1_2)
	{ after(grammarAccess.getModAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__WordConcatenation__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__WordConcatenation__Group__0__Impl
	rule__WordConcatenation__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__WordConcatenation__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWordConcatenationAccess().getDivParserRuleCall_0()); }
	(ruleDiv)
	{ after(grammarAccess.getWordConcatenationAccess().getDivParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__WordConcatenation__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__WordConcatenation__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__WordConcatenation__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWordConcatenationAccess().getGroup_1()); }
	(rule__WordConcatenation__Group_1__0)*
	{ after(grammarAccess.getWordConcatenationAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__WordConcatenation__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__WordConcatenation__Group_1__0__Impl
	rule__WordConcatenation__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__WordConcatenation__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWordConcatenationAccess().getBinaryExpressionLeftAction_1_0()); }
	()
	{ after(grammarAccess.getWordConcatenationAccess().getBinaryExpressionLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__WordConcatenation__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__WordConcatenation__Group_1__1__Impl
	rule__WordConcatenation__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__WordConcatenation__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWordConcatenationAccess().getOpAssignment_1_1()); }
	(rule__WordConcatenation__OpAssignment_1_1)
	{ after(grammarAccess.getWordConcatenationAccess().getOpAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__WordConcatenation__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__WordConcatenation__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__WordConcatenation__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWordConcatenationAccess().getRightAssignment_1_2()); }
	(rule__WordConcatenation__RightAssignment_1_2)
	{ after(grammarAccess.getWordConcatenationAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Div__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Div__Group__0__Impl
	rule__Div__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Div__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDivAccess().getNotOrTerminalSimpleExpressionParserRuleCall_0()); }
	(ruleNotOrTerminalSimpleExpression)
	{ after(grammarAccess.getDivAccess().getNotOrTerminalSimpleExpressionParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Div__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Div__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Div__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDivAccess().getGroup_1()); }
	(rule__Div__Group_1__0)*
	{ after(grammarAccess.getDivAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Div__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Div__Group_1__0__Impl
	rule__Div__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Div__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDivAccess().getBinaryExpressionLeftAction_1_0()); }
	()
	{ after(grammarAccess.getDivAccess().getBinaryExpressionLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Div__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Div__Group_1__1__Impl
	rule__Div__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Div__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDivAccess().getOpAssignment_1_1()); }
	(rule__Div__OpAssignment_1_1)
	{ after(grammarAccess.getDivAccess().getOpAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Div__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Div__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Div__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDivAccess().getRightAssignment_1_2()); }
	(rule__Div__RightAssignment_1_2)
	{ after(grammarAccess.getDivAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__NotOrTerminalSimpleExpression__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NotOrTerminalSimpleExpression__Group_0__0__Impl
	rule__NotOrTerminalSimpleExpression__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NotOrTerminalSimpleExpression__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNotOrTerminalSimpleExpressionAccess().getNotAction_0_0()); }
	()
	{ after(grammarAccess.getNotOrTerminalSimpleExpressionAccess().getNotAction_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NotOrTerminalSimpleExpression__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NotOrTerminalSimpleExpression__Group_0__1__Impl
	rule__NotOrTerminalSimpleExpression__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__NotOrTerminalSimpleExpression__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNotOrTerminalSimpleExpressionAccess().getExclamationMarkKeyword_0_1()); }
	ExclamationMark
	{ after(grammarAccess.getNotOrTerminalSimpleExpressionAccess().getExclamationMarkKeyword_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NotOrTerminalSimpleExpression__Group_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NotOrTerminalSimpleExpression__Group_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NotOrTerminalSimpleExpression__Group_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNotOrTerminalSimpleExpressionAccess().getExpAssignment_0_2()); }
	(rule__NotOrTerminalSimpleExpression__ExpAssignment_0_2)
	{ after(grammarAccess.getNotOrTerminalSimpleExpressionAccess().getExpAssignment_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__TerminalSimpleExpression__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TerminalSimpleExpression__Group_0__0__Impl
	rule__TerminalSimpleExpression__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalSimpleExpression__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTerminalSimpleExpressionAccess().getParsExpressionAction_0_0()); }
	()
	{ after(grammarAccess.getTerminalSimpleExpressionAccess().getParsExpressionAction_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalSimpleExpression__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TerminalSimpleExpression__Group_0__1__Impl
	rule__TerminalSimpleExpression__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalSimpleExpression__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTerminalSimpleExpressionAccess().getIsNextAssignment_0_1()); }
	(rule__TerminalSimpleExpression__IsNextAssignment_0_1)?
	{ after(grammarAccess.getTerminalSimpleExpressionAccess().getIsNextAssignment_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalSimpleExpression__Group_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TerminalSimpleExpression__Group_0__2__Impl
	rule__TerminalSimpleExpression__Group_0__3
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalSimpleExpression__Group_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTerminalSimpleExpressionAccess().getLeftParenthesisKeyword_0_2()); }
	LeftParenthesis
	{ after(grammarAccess.getTerminalSimpleExpressionAccess().getLeftParenthesisKeyword_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalSimpleExpression__Group_0__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TerminalSimpleExpression__Group_0__3__Impl
	rule__TerminalSimpleExpression__Group_0__4
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalSimpleExpression__Group_0__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTerminalSimpleExpressionAccess().getSimpleExpressionAssignment_0_3()); }
	(rule__TerminalSimpleExpression__SimpleExpressionAssignment_0_3)
	{ after(grammarAccess.getTerminalSimpleExpressionAccess().getSimpleExpressionAssignment_0_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalSimpleExpression__Group_0__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TerminalSimpleExpression__Group_0__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalSimpleExpression__Group_0__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTerminalSimpleExpressionAccess().getRightParenthesisKeyword_0_4()); }
	RightParenthesis
	{ after(grammarAccess.getTerminalSimpleExpressionAccess().getRightParenthesisKeyword_0_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__TerminalSimpleExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TerminalSimpleExpression__Group_1__0__Impl
	rule__TerminalSimpleExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalSimpleExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTerminalSimpleExpressionAccess().getUnaryExpressionAction_1_0()); }
	()
	{ after(grammarAccess.getTerminalSimpleExpressionAccess().getUnaryExpressionAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalSimpleExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TerminalSimpleExpression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalSimpleExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTerminalSimpleExpressionAccess().getGroup_1_1()); }
	(rule__TerminalSimpleExpression__Group_1_1__0)
	{ after(grammarAccess.getTerminalSimpleExpressionAccess().getGroup_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__TerminalSimpleExpression__Group_1_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TerminalSimpleExpression__Group_1_1__0__Impl
	rule__TerminalSimpleExpression__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalSimpleExpression__Group_1_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTerminalSimpleExpressionAccess().getOperatorAssignment_1_1_0()); }
	(rule__TerminalSimpleExpression__OperatorAssignment_1_1_0)
	{ after(grammarAccess.getTerminalSimpleExpressionAccess().getOperatorAssignment_1_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalSimpleExpression__Group_1_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TerminalSimpleExpression__Group_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalSimpleExpression__Group_1_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTerminalSimpleExpressionAccess().getSimpleExpressionAssignment_1_1_1()); }
	(rule__TerminalSimpleExpression__SimpleExpressionAssignment_1_1_1)
	{ after(grammarAccess.getTerminalSimpleExpressionAccess().getSimpleExpressionAssignment_1_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__TerminalSimpleExpression__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TerminalSimpleExpression__Group_3__0__Impl
	rule__TerminalSimpleExpression__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalSimpleExpression__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTerminalSimpleExpressionAccess().getValueExpressionAction_3_0()); }
	()
	{ after(grammarAccess.getTerminalSimpleExpressionAccess().getValueExpressionAction_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalSimpleExpression__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TerminalSimpleExpression__Group_3__1__Impl
	rule__TerminalSimpleExpression__Group_3__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalSimpleExpression__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTerminalSimpleExpressionAccess().getValueAssignment_3_1()); }
	(rule__TerminalSimpleExpression__ValueAssignment_3_1)
	{ after(grammarAccess.getTerminalSimpleExpressionAccess().getValueAssignment_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalSimpleExpression__Group_3__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TerminalSimpleExpression__Group_3__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalSimpleExpression__Group_3__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTerminalSimpleExpressionAccess().getGroup_3_2()); }
	(rule__TerminalSimpleExpression__Group_3_2__0)*
	{ after(grammarAccess.getTerminalSimpleExpressionAccess().getGroup_3_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__TerminalSimpleExpression__Group_3_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TerminalSimpleExpression__Group_3_2__0__Impl
	rule__TerminalSimpleExpression__Group_3_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalSimpleExpression__Group_3_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTerminalSimpleExpressionAccess().getLeftSquareBracketKeyword_3_2_0()); }
	LeftSquareBracket
	{ after(grammarAccess.getTerminalSimpleExpressionAccess().getLeftSquareBracketKeyword_3_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalSimpleExpression__Group_3_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TerminalSimpleExpression__Group_3_2__1__Impl
	rule__TerminalSimpleExpression__Group_3_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalSimpleExpression__Group_3_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTerminalSimpleExpressionAccess().getArrayAssignment_3_2_1()); }
	(rule__TerminalSimpleExpression__ArrayAssignment_3_2_1)
	{ after(grammarAccess.getTerminalSimpleExpressionAccess().getArrayAssignment_3_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalSimpleExpression__Group_3_2__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TerminalSimpleExpression__Group_3_2__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalSimpleExpression__Group_3_2__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTerminalSimpleExpressionAccess().getRightSquareBracketKeyword_3_2_2()); }
	RightSquareBracket
	{ after(grammarAccess.getTerminalSimpleExpressionAccess().getRightSquareBracketKeyword_3_2_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__TerminalSimpleExpression__Group_4__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TerminalSimpleExpression__Group_4__0__Impl
	rule__TerminalSimpleExpression__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalSimpleExpression__Group_4__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTerminalSimpleExpressionAccess().getVarAction_4_0()); }
	()
	{ after(grammarAccess.getTerminalSimpleExpressionAccess().getVarAction_4_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalSimpleExpression__Group_4__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TerminalSimpleExpression__Group_4__1__Impl
	rule__TerminalSimpleExpression__Group_4__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalSimpleExpression__Group_4__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTerminalSimpleExpressionAccess().getValueAssignment_4_1()); }
	(rule__TerminalSimpleExpression__ValueAssignment_4_1)
	{ after(grammarAccess.getTerminalSimpleExpressionAccess().getValueAssignment_4_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalSimpleExpression__Group_4__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TerminalSimpleExpression__Group_4__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalSimpleExpression__Group_4__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTerminalSimpleExpressionAccess().getAlternatives_4_2()); }
	(rule__TerminalSimpleExpression__Alternatives_4_2)?
	{ after(grammarAccess.getTerminalSimpleExpressionAccess().getAlternatives_4_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__TerminalSimpleExpression__Group_4_2_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TerminalSimpleExpression__Group_4_2_0__0__Impl
	rule__TerminalSimpleExpression__Group_4_2_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalSimpleExpression__Group_4_2_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTerminalSimpleExpressionAccess().getFullStopKeyword_4_2_0_0()); }
	FullStop
	{ after(grammarAccess.getTerminalSimpleExpressionAccess().getFullStopKeyword_4_2_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalSimpleExpression__Group_4_2_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TerminalSimpleExpression__Group_4_2_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalSimpleExpression__Group_4_2_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTerminalSimpleExpressionAccess().getDottedAssignment_4_2_0_1()); }
	(rule__TerminalSimpleExpression__DottedAssignment_4_2_0_1)
	{ after(grammarAccess.getTerminalSimpleExpressionAccess().getDottedAssignment_4_2_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__TerminalSimpleExpression__Group_4_2_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TerminalSimpleExpression__Group_4_2_1__0__Impl
	rule__TerminalSimpleExpression__Group_4_2_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalSimpleExpression__Group_4_2_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTerminalSimpleExpressionAccess().getLeftSquareBracketKeyword_4_2_1_0()); }
	LeftSquareBracket
	{ after(grammarAccess.getTerminalSimpleExpressionAccess().getLeftSquareBracketKeyword_4_2_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalSimpleExpression__Group_4_2_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TerminalSimpleExpression__Group_4_2_1__1__Impl
	rule__TerminalSimpleExpression__Group_4_2_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalSimpleExpression__Group_4_2_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTerminalSimpleExpressionAccess().getArrayAssignment_4_2_1_1()); }
	(rule__TerminalSimpleExpression__ArrayAssignment_4_2_1_1)
	{ after(grammarAccess.getTerminalSimpleExpressionAccess().getArrayAssignment_4_2_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalSimpleExpression__Group_4_2_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TerminalSimpleExpression__Group_4_2_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalSimpleExpression__Group_4_2_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTerminalSimpleExpressionAccess().getRightSquareBracketKeyword_4_2_1_2()); }
	RightSquareBracket
	{ after(grammarAccess.getTerminalSimpleExpressionAccess().getRightSquareBracketKeyword_4_2_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__TerminalSimpleExpression__Group_5__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TerminalSimpleExpression__Group_5__0__Impl
	rule__TerminalSimpleExpression__Group_5__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalSimpleExpression__Group_5__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTerminalSimpleExpressionAccess().getSetElementExpressionAction_5_0()); }
	()
	{ after(grammarAccess.getTerminalSimpleExpressionAccess().getSetElementExpressionAction_5_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalSimpleExpression__Group_5__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TerminalSimpleExpression__Group_5__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalSimpleExpression__Group_5__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTerminalSimpleExpressionAccess().getValAssignment_5_1()); }
	(rule__TerminalSimpleExpression__ValAssignment_5_1)
	{ after(grammarAccess.getTerminalSimpleExpressionAccess().getValAssignment_5_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__TerminalSimpleExpression__Group_6__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TerminalSimpleExpression__Group_6__0__Impl
	rule__TerminalSimpleExpression__Group_6__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalSimpleExpression__Group_6__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTerminalSimpleExpressionAccess().getSetValueParameterAction_6_0()); }
	()
	{ after(grammarAccess.getTerminalSimpleExpressionAccess().getSetValueParameterAction_6_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalSimpleExpression__Group_6__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TerminalSimpleExpression__Group_6__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalSimpleExpression__Group_6__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTerminalSimpleExpressionAccess().getValparamAssignment_6_1()); }
	(rule__TerminalSimpleExpression__ValparamAssignment_6_1)
	{ after(grammarAccess.getTerminalSimpleExpressionAccess().getValparamAssignment_6_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__TerminalSimpleExpression__Group_7__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TerminalSimpleExpression__Group_7__0__Impl
	rule__TerminalSimpleExpression__Group_7__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalSimpleExpression__Group_7__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTerminalSimpleExpressionAccess().getValueExpressionAction_7_0()); }
	()
	{ after(grammarAccess.getTerminalSimpleExpressionAccess().getValueExpressionAction_7_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalSimpleExpression__Group_7__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TerminalSimpleExpression__Group_7__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalSimpleExpression__Group_7__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTerminalSimpleExpressionAccess().getValueAssignment_7_1()); }
	(rule__TerminalSimpleExpression__ValueAssignment_7_1)
	{ after(grammarAccess.getTerminalSimpleExpressionAccess().getValueAssignment_7_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__TerminalSimpleExpression__Group_8__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TerminalSimpleExpression__Group_8__0__Impl
	rule__TerminalSimpleExpression__Group_8__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalSimpleExpression__Group_8__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTerminalSimpleExpressionAccess().getValueExpressionAction_8_0()); }
	()
	{ after(grammarAccess.getTerminalSimpleExpressionAccess().getValueExpressionAction_8_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalSimpleExpression__Group_8__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TerminalSimpleExpression__Group_8__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalSimpleExpression__Group_8__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTerminalSimpleExpressionAccess().getValueAssignment_8_1()); }
	(rule__TerminalSimpleExpression__ValueAssignment_8_1)
	{ after(grammarAccess.getTerminalSimpleExpressionAccess().getValueAssignment_8_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__TerminalSimpleExpression__Group_9__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TerminalSimpleExpression__Group_9__0__Impl
	rule__TerminalSimpleExpression__Group_9__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalSimpleExpression__Group_9__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTerminalSimpleExpressionAccess().getValueExpressionAction_9_0()); }
	()
	{ after(grammarAccess.getTerminalSimpleExpressionAccess().getValueExpressionAction_9_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalSimpleExpression__Group_9__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TerminalSimpleExpression__Group_9__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalSimpleExpression__Group_9__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTerminalSimpleExpressionAccess().getValueAssignment_9_1()); }
	(rule__TerminalSimpleExpression__ValueAssignment_9_1)
	{ after(grammarAccess.getTerminalSimpleExpressionAccess().getValueAssignment_9_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__TerminalSimpleExpression__Group_10__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TerminalSimpleExpression__Group_10__0__Impl
	rule__TerminalSimpleExpression__Group_10__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalSimpleExpression__Group_10__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTerminalSimpleExpressionAccess().getValueExpressionAction_10_0()); }
	()
	{ after(grammarAccess.getTerminalSimpleExpressionAccess().getValueExpressionAction_10_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalSimpleExpression__Group_10__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TerminalSimpleExpression__Group_10__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalSimpleExpression__Group_10__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTerminalSimpleExpressionAccess().getValueAssignment_10_1()); }
	(rule__TerminalSimpleExpression__ValueAssignment_10_1)
	{ after(grammarAccess.getTerminalSimpleExpressionAccess().getValueAssignment_10_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__TerminalSimpleExpression__Group_11__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TerminalSimpleExpression__Group_11__0__Impl
	rule__TerminalSimpleExpression__Group_11__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalSimpleExpression__Group_11__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTerminalSimpleExpressionAccess().getValueExpressionAction_11_0()); }
	()
	{ after(grammarAccess.getTerminalSimpleExpressionAccess().getValueExpressionAction_11_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalSimpleExpression__Group_11__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TerminalSimpleExpression__Group_11__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalSimpleExpression__Group_11__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTerminalSimpleExpressionAccess().getValueAssignment_11_1()); }
	(rule__TerminalSimpleExpression__ValueAssignment_11_1)
	{ after(grammarAccess.getTerminalSimpleExpressionAccess().getValueAssignment_11_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__TerminalSimpleExpression__Group_12__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TerminalSimpleExpression__Group_12__0__Impl
	rule__TerminalSimpleExpression__Group_12__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalSimpleExpression__Group_12__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTerminalSimpleExpressionAccess().getSetExpressionAction_12_0()); }
	()
	{ after(grammarAccess.getTerminalSimpleExpressionAccess().getSetExpressionAction_12_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalSimpleExpression__Group_12__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TerminalSimpleExpression__Group_12__1__Impl
	rule__TerminalSimpleExpression__Group_12__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalSimpleExpression__Group_12__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTerminalSimpleExpressionAccess().getLeftCurlyBracketKeyword_12_1()); }
	LeftCurlyBracket
	{ after(grammarAccess.getTerminalSimpleExpressionAccess().getLeftCurlyBracketKeyword_12_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalSimpleExpression__Group_12__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TerminalSimpleExpression__Group_12__2__Impl
	rule__TerminalSimpleExpression__Group_12__3
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalSimpleExpression__Group_12__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTerminalSimpleExpressionAccess().getSetElementAssignment_12_2()); }
	(rule__TerminalSimpleExpression__SetElementAssignment_12_2)
	{ after(grammarAccess.getTerminalSimpleExpressionAccess().getSetElementAssignment_12_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalSimpleExpression__Group_12__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TerminalSimpleExpression__Group_12__3__Impl
	rule__TerminalSimpleExpression__Group_12__4
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalSimpleExpression__Group_12__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTerminalSimpleExpressionAccess().getGroup_12_3()); }
	(rule__TerminalSimpleExpression__Group_12_3__0)*
	{ after(grammarAccess.getTerminalSimpleExpressionAccess().getGroup_12_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalSimpleExpression__Group_12__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TerminalSimpleExpression__Group_12__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalSimpleExpression__Group_12__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTerminalSimpleExpressionAccess().getRightCurlyBracketKeyword_12_4()); }
	RightCurlyBracket
	{ after(grammarAccess.getTerminalSimpleExpressionAccess().getRightCurlyBracketKeyword_12_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__TerminalSimpleExpression__Group_12_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TerminalSimpleExpression__Group_12_3__0__Impl
	rule__TerminalSimpleExpression__Group_12_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalSimpleExpression__Group_12_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTerminalSimpleExpressionAccess().getCommaKeyword_12_3_0()); }
	Comma
	{ after(grammarAccess.getTerminalSimpleExpressionAccess().getCommaKeyword_12_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalSimpleExpression__Group_12_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TerminalSimpleExpression__Group_12_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalSimpleExpression__Group_12_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTerminalSimpleExpressionAccess().getSetElementAssignment_12_3_1()); }
	(rule__TerminalSimpleExpression__SetElementAssignment_12_3_1)
	{ after(grammarAccess.getTerminalSimpleExpressionAccess().getSetElementAssignment_12_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__TerminalSimpleExpression__Group_13__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TerminalSimpleExpression__Group_13__0__Impl
	rule__TerminalSimpleExpression__Group_13__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalSimpleExpression__Group_13__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTerminalSimpleExpressionAccess().getWordExpressionAction_13_0()); }
	()
	{ after(grammarAccess.getTerminalSimpleExpressionAccess().getWordExpressionAction_13_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalSimpleExpression__Group_13__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TerminalSimpleExpression__Group_13__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalSimpleExpression__Group_13__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTerminalSimpleExpressionAccess().getValueAssignment_13_1()); }
	(rule__TerminalSimpleExpression__ValueAssignment_13_1)
	{ after(grammarAccess.getTerminalSimpleExpressionAccess().getValueAssignment_13_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__TerminalSimpleExpression__Group_14__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TerminalSimpleExpression__Group_14__0__Impl
	rule__TerminalSimpleExpression__Group_14__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalSimpleExpression__Group_14__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTerminalSimpleExpressionAccess().getIntervalExpressionAction_14_0()); }
	()
	{ after(grammarAccess.getTerminalSimpleExpressionAccess().getIntervalExpressionAction_14_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalSimpleExpression__Group_14__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TerminalSimpleExpression__Group_14__1__Impl
	rule__TerminalSimpleExpression__Group_14__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalSimpleExpression__Group_14__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTerminalSimpleExpressionAccess().getLowerBoundAssignment_14_1()); }
	(rule__TerminalSimpleExpression__LowerBoundAssignment_14_1)
	{ after(grammarAccess.getTerminalSimpleExpressionAccess().getLowerBoundAssignment_14_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalSimpleExpression__Group_14__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TerminalSimpleExpression__Group_14__2__Impl
	rule__TerminalSimpleExpression__Group_14__3
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalSimpleExpression__Group_14__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTerminalSimpleExpressionAccess().getFullStopFullStopKeyword_14_2()); }
	FullStopFullStop
	{ after(grammarAccess.getTerminalSimpleExpressionAccess().getFullStopFullStopKeyword_14_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalSimpleExpression__Group_14__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TerminalSimpleExpression__Group_14__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalSimpleExpression__Group_14__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTerminalSimpleExpressionAccess().getUpperBoundAssignment_14_3()); }
	(rule__TerminalSimpleExpression__UpperBoundAssignment_14_3)
	{ after(grammarAccess.getTerminalSimpleExpressionAccess().getUpperBoundAssignment_14_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__TerminalSimpleExpression__Group_15__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TerminalSimpleExpression__Group_15__0__Impl
	rule__TerminalSimpleExpression__Group_15__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalSimpleExpression__Group_15__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTerminalSimpleExpressionAccess().getUntilCTLexpressionAction_15_0()); }
	()
	{ after(grammarAccess.getTerminalSimpleExpressionAccess().getUntilCTLexpressionAction_15_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalSimpleExpression__Group_15__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TerminalSimpleExpression__Group_15__1__Impl
	rule__TerminalSimpleExpression__Group_15__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalSimpleExpression__Group_15__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTerminalSimpleExpressionAccess().getEaAssignment_15_1()); }
	(rule__TerminalSimpleExpression__EaAssignment_15_1)
	{ after(grammarAccess.getTerminalSimpleExpressionAccess().getEaAssignment_15_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalSimpleExpression__Group_15__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TerminalSimpleExpression__Group_15__2__Impl
	rule__TerminalSimpleExpression__Group_15__3
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalSimpleExpression__Group_15__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTerminalSimpleExpressionAccess().getLeftSquareBracketKeyword_15_2()); }
	LeftSquareBracket
	{ after(grammarAccess.getTerminalSimpleExpressionAccess().getLeftSquareBracketKeyword_15_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalSimpleExpression__Group_15__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TerminalSimpleExpression__Group_15__3__Impl
	rule__TerminalSimpleExpression__Group_15__4
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalSimpleExpression__Group_15__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTerminalSimpleExpressionAccess().getArgAssignment_15_3()); }
	(rule__TerminalSimpleExpression__ArgAssignment_15_3)
	{ after(grammarAccess.getTerminalSimpleExpressionAccess().getArgAssignment_15_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalSimpleExpression__Group_15__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TerminalSimpleExpression__Group_15__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalSimpleExpression__Group_15__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTerminalSimpleExpressionAccess().getRightSquareBracketKeyword_15_4()); }
	RightSquareBracket
	{ after(grammarAccess.getTerminalSimpleExpressionAccess().getRightSquareBracketKeyword_15_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__TerminalSimpleExpression__Group_16__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TerminalSimpleExpression__Group_16__0__Impl
	rule__TerminalSimpleExpression__Group_16__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalSimpleExpression__Group_16__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTerminalSimpleExpressionAccess().getUnaryFunctionExpressionAction_16_0()); }
	()
	{ after(grammarAccess.getTerminalSimpleExpressionAccess().getUnaryFunctionExpressionAction_16_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalSimpleExpression__Group_16__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TerminalSimpleExpression__Group_16__1__Impl
	rule__TerminalSimpleExpression__Group_16__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalSimpleExpression__Group_16__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTerminalSimpleExpressionAccess().getFunctionAssignment_16_1()); }
	(rule__TerminalSimpleExpression__FunctionAssignment_16_1)
	{ after(grammarAccess.getTerminalSimpleExpressionAccess().getFunctionAssignment_16_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalSimpleExpression__Group_16__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TerminalSimpleExpression__Group_16__2__Impl
	rule__TerminalSimpleExpression__Group_16__3
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalSimpleExpression__Group_16__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTerminalSimpleExpressionAccess().getLeftParenthesisKeyword_16_2()); }
	LeftParenthesis
	{ after(grammarAccess.getTerminalSimpleExpressionAccess().getLeftParenthesisKeyword_16_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalSimpleExpression__Group_16__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TerminalSimpleExpression__Group_16__3__Impl
	rule__TerminalSimpleExpression__Group_16__4
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalSimpleExpression__Group_16__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTerminalSimpleExpressionAccess().getArgAssignment_16_3()); }
	(rule__TerminalSimpleExpression__ArgAssignment_16_3)
	{ after(grammarAccess.getTerminalSimpleExpressionAccess().getArgAssignment_16_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalSimpleExpression__Group_16__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TerminalSimpleExpression__Group_16__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalSimpleExpression__Group_16__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTerminalSimpleExpressionAccess().getRightParenthesisKeyword_16_4()); }
	RightParenthesis
	{ after(grammarAccess.getTerminalSimpleExpressionAccess().getRightParenthesisKeyword_16_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__TerminalSimpleExpression__Group_17__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TerminalSimpleExpression__Group_17__0__Impl
	rule__TerminalSimpleExpression__Group_17__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalSimpleExpression__Group_17__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTerminalSimpleExpressionAccess().getToIntAction_17_0()); }
	()
	{ after(grammarAccess.getTerminalSimpleExpressionAccess().getToIntAction_17_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalSimpleExpression__Group_17__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TerminalSimpleExpression__Group_17__1__Impl
	rule__TerminalSimpleExpression__Group_17__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalSimpleExpression__Group_17__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTerminalSimpleExpressionAccess().getTointKeyword_17_1()); }
	Toint
	{ after(grammarAccess.getTerminalSimpleExpressionAccess().getTointKeyword_17_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalSimpleExpression__Group_17__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TerminalSimpleExpression__Group_17__2__Impl
	rule__TerminalSimpleExpression__Group_17__3
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalSimpleExpression__Group_17__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTerminalSimpleExpressionAccess().getLeftParenthesisKeyword_17_2()); }
	LeftParenthesis
	{ after(grammarAccess.getTerminalSimpleExpressionAccess().getLeftParenthesisKeyword_17_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalSimpleExpression__Group_17__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TerminalSimpleExpression__Group_17__3__Impl
	rule__TerminalSimpleExpression__Group_17__4
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalSimpleExpression__Group_17__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTerminalSimpleExpressionAccess().getArgAssignment_17_3()); }
	(rule__TerminalSimpleExpression__ArgAssignment_17_3)
	{ after(grammarAccess.getTerminalSimpleExpressionAccess().getArgAssignment_17_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalSimpleExpression__Group_17__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TerminalSimpleExpression__Group_17__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalSimpleExpression__Group_17__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTerminalSimpleExpressionAccess().getRightParenthesisKeyword_17_4()); }
	RightParenthesis
	{ after(grammarAccess.getTerminalSimpleExpressionAccess().getRightParenthesisKeyword_17_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FormalParameter__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FormalParameter__Group__0__Impl
	rule__FormalParameter__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FormalParameter__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFormalParameterAccess().getNameAssignment_0()); }
	(rule__FormalParameter__NameAssignment_0)
	{ after(grammarAccess.getFormalParameterAccess().getNameAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FormalParameter__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FormalParameter__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FormalParameter__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFormalParameterAccess().getGroup_1()); }
	(rule__FormalParameter__Group_1__0)*
	{ after(grammarAccess.getFormalParameterAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FormalParameter__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FormalParameter__Group_1__0__Impl
	rule__FormalParameter__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FormalParameter__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFormalParameterAccess().getFullStopKeyword_1_0()); }
	(FullStop)?
	{ after(grammarAccess.getFormalParameterAccess().getFullStopKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FormalParameter__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FormalParameter__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FormalParameter__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFormalParameterAccess().getIDTerminalRuleCall_1_1()); }
	RULE_ID
	{ after(grammarAccess.getFormalParameterAccess().getIDTerminalRuleCall_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__CaseSimpleExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CaseSimpleExpression__Group__0__Impl
	rule__CaseSimpleExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseSimpleExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCaseSimpleExpressionAccess().getCaseKeyword_0()); }
	Case
	{ after(grammarAccess.getCaseSimpleExpressionAccess().getCaseKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseSimpleExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CaseSimpleExpression__Group__1__Impl
	rule__CaseSimpleExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseSimpleExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getCaseSimpleExpressionAccess().getBranchesAssignment_1()); }
		(rule__CaseSimpleExpression__BranchesAssignment_1)
		{ after(grammarAccess.getCaseSimpleExpressionAccess().getBranchesAssignment_1()); }
	)
	(
		{ before(grammarAccess.getCaseSimpleExpressionAccess().getBranchesAssignment_1()); }
		(rule__CaseSimpleExpression__BranchesAssignment_1)*
		{ after(grammarAccess.getCaseSimpleExpressionAccess().getBranchesAssignment_1()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseSimpleExpression__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CaseSimpleExpression__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseSimpleExpression__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCaseSimpleExpressionAccess().getEsacKeyword_2()); }
	Esac
	{ after(grammarAccess.getCaseSimpleExpressionAccess().getEsacKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__CaseSimpleAssignementExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CaseSimpleAssignementExpression__Group__0__Impl
	rule__CaseSimpleAssignementExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseSimpleAssignementExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCaseSimpleAssignementExpressionAccess().getCaseAssignment_0()); }
	(rule__CaseSimpleAssignementExpression__CaseAssignment_0)
	{ after(grammarAccess.getCaseSimpleAssignementExpressionAccess().getCaseAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseSimpleAssignementExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CaseSimpleAssignementExpression__Group__1__Impl
	rule__CaseSimpleAssignementExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseSimpleAssignementExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCaseSimpleAssignementExpressionAccess().getColonKeyword_1()); }
	Colon
	{ after(grammarAccess.getCaseSimpleAssignementExpressionAccess().getColonKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseSimpleAssignementExpression__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CaseSimpleAssignementExpression__Group__2__Impl
	rule__CaseSimpleAssignementExpression__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseSimpleAssignementExpression__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCaseSimpleAssignementExpressionAccess().getAssignmentAssignment_2()); }
	(rule__CaseSimpleAssignementExpression__AssignmentAssignment_2)
	{ after(grammarAccess.getCaseSimpleAssignementExpressionAccess().getAssignmentAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseSimpleAssignementExpression__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CaseSimpleAssignementExpression__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseSimpleAssignementExpression__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCaseSimpleAssignementExpressionAccess().getSemicolonKeyword_3()); }
	Semicolon
	{ after(grammarAccess.getCaseSimpleAssignementExpressionAccess().getSemicolonKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__RangeExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RangeExpression__Group__0__Impl
	rule__RangeExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RangeExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRangeExpressionAccess().getLowerAssignment_0()); }
	(rule__RangeExpression__LowerAssignment_0)
	{ after(grammarAccess.getRangeExpressionAccess().getLowerAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RangeExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RangeExpression__Group__1__Impl
	rule__RangeExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__RangeExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRangeExpressionAccess().getFullStopFullStopKeyword_1()); }
	FullStopFullStop
	{ after(grammarAccess.getRangeExpressionAccess().getFullStopFullStopKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RangeExpression__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RangeExpression__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RangeExpression__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRangeExpressionAccess().getUpperAssignment_2()); }
	(rule__RangeExpression__UpperAssignment_2)
	{ after(grammarAccess.getRangeExpressionAccess().getUpperAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__RTCTLExpression__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RTCTLExpression__Group_0__0__Impl
	rule__RTCTLExpression__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RTCTLExpression__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRTCTLExpressionAccess().getSingleRTCTLExpressionAction_0_0()); }
	()
	{ after(grammarAccess.getRTCTLExpressionAccess().getSingleRTCTLExpressionAction_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RTCTLExpression__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RTCTLExpression__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RTCTLExpression__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRTCTLExpressionAccess().getCtlExpressionAssignment_0_1()); }
	(rule__RTCTLExpression__CtlExpressionAssignment_0_1)
	{ after(grammarAccess.getRTCTLExpressionAccess().getCtlExpressionAssignment_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__RTCTLExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RTCTLExpression__Group_1__0__Impl
	rule__RTCTLExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RTCTLExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRTCTLExpressionAccess().getUnaryRTCTLExpressionAction_1_0()); }
	()
	{ after(grammarAccess.getRTCTLExpressionAccess().getUnaryRTCTLExpressionAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RTCTLExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RTCTLExpression__Group_1__1__Impl
	rule__RTCTLExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__RTCTLExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRTCTLExpressionAccess().getUnaryAssignment_1_1()); }
	(rule__RTCTLExpression__UnaryAssignment_1_1)
	{ after(grammarAccess.getRTCTLExpressionAccess().getUnaryAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RTCTLExpression__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RTCTLExpression__Group_1__2__Impl
	rule__RTCTLExpression__Group_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__RTCTLExpression__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRTCTLExpressionAccess().getRangeAssignment_1_2()); }
	(rule__RTCTLExpression__RangeAssignment_1_2)
	{ after(grammarAccess.getRTCTLExpressionAccess().getRangeAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RTCTLExpression__Group_1__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RTCTLExpression__Group_1__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RTCTLExpression__Group_1__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRTCTLExpressionAccess().getRctlAssignment_1_3()); }
	(rule__RTCTLExpression__RctlAssignment_1_3)
	{ after(grammarAccess.getRTCTLExpressionAccess().getRctlAssignment_1_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ComputeSpecification__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ComputeSpecification__Group__0__Impl
	rule__ComputeSpecification__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ComputeSpecification__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComputeSpecificationAccess().getCOMPUTEKeyword_0()); }
	COMPUTE
	{ after(grammarAccess.getComputeSpecificationAccess().getCOMPUTEKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ComputeSpecification__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ComputeSpecification__Group__1__Impl
	rule__ComputeSpecification__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ComputeSpecification__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComputeSpecificationAccess().getMinMaxAssignment_1()); }
	(rule__ComputeSpecification__MinMaxAssignment_1)
	{ after(grammarAccess.getComputeSpecificationAccess().getMinMaxAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ComputeSpecification__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ComputeSpecification__Group__2__Impl
	rule__ComputeSpecification__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ComputeSpecification__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComputeSpecificationAccess().getLeftSquareBracketKeyword_2()); }
	LeftSquareBracket
	{ after(grammarAccess.getComputeSpecificationAccess().getLeftSquareBracketKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ComputeSpecification__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ComputeSpecification__Group__3__Impl
	rule__ComputeSpecification__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ComputeSpecification__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComputeSpecificationAccess().getFirstAssignment_3()); }
	(rule__ComputeSpecification__FirstAssignment_3)
	{ after(grammarAccess.getComputeSpecificationAccess().getFirstAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ComputeSpecification__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ComputeSpecification__Group__4__Impl
	rule__ComputeSpecification__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__ComputeSpecification__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComputeSpecificationAccess().getCommaKeyword_4()); }
	Comma
	{ after(grammarAccess.getComputeSpecificationAccess().getCommaKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ComputeSpecification__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ComputeSpecification__Group__5__Impl
	rule__ComputeSpecification__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__ComputeSpecification__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComputeSpecificationAccess().getSecondAssignment_5()); }
	(rule__ComputeSpecification__SecondAssignment_5)
	{ after(grammarAccess.getComputeSpecificationAccess().getSecondAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ComputeSpecification__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ComputeSpecification__Group__6__Impl
	rule__ComputeSpecification__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__ComputeSpecification__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComputeSpecificationAccess().getRightSquareBracketKeyword_6()); }
	RightSquareBracket
	{ after(grammarAccess.getComputeSpecificationAccess().getRightSquareBracketKeyword_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ComputeSpecification__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ComputeSpecification__Group__7__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ComputeSpecification__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComputeSpecificationAccess().getSemicolonAssignment_7()); }
	(rule__ComputeSpecification__SemicolonAssignment_7)?
	{ after(grammarAccess.getComputeSpecificationAccess().getSemicolonAssignment_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VariableID__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VariableID__Group__0__Impl
	rule__VariableID__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableID__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableIDAccess().getTerminalVariableIDParserRuleCall_0()); }
	ruleTerminalVariableID
	{ after(grammarAccess.getVariableIDAccess().getTerminalVariableIDParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableID__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VariableID__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableID__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableIDAccess().getAlternatives_1()); }
	(rule__VariableID__Alternatives_1)*
	{ after(grammarAccess.getVariableIDAccess().getAlternatives_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VariableID__Group_1_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VariableID__Group_1_0__0__Impl
	rule__VariableID__Group_1_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableID__Group_1_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableIDAccess().getFullStopKeyword_1_0_0()); }
	FullStop
	{ after(grammarAccess.getVariableIDAccess().getFullStopKeyword_1_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableID__Group_1_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VariableID__Group_1_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableID__Group_1_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableIDAccess().getTerminalVariableIDParserRuleCall_1_0_1()); }
	ruleTerminalVariableID
	{ after(grammarAccess.getVariableIDAccess().getTerminalVariableIDParserRuleCall_1_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VariableID__Group_1_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VariableID__Group_1_1__0__Impl
	rule__VariableID__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableID__Group_1_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableIDAccess().getLeftSquareBracketKeyword_1_1_0()); }
	LeftSquareBracket
	{ after(grammarAccess.getVariableIDAccess().getLeftSquareBracketKeyword_1_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableID__Group_1_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VariableID__Group_1_1__1__Impl
	rule__VariableID__Group_1_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableID__Group_1_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableIDAccess().getAlternatives_1_1_1()); }
	(rule__VariableID__Alternatives_1_1_1)
	{ after(grammarAccess.getVariableIDAccess().getAlternatives_1_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableID__Group_1_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VariableID__Group_1_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableID__Group_1_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableIDAccess().getRightSquareBracketKeyword_1_1_2()); }
	RightSquareBracket
	{ after(grammarAccess.getVariableIDAccess().getRightSquareBracketKeyword_1_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VariableID__Group_1_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VariableID__Group_1_2__0__Impl
	rule__VariableID__Group_1_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableID__Group_1_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableIDAccess().getLeftSquareBracketKeyword_1_2_0()); }
	LeftSquareBracket
	{ after(grammarAccess.getVariableIDAccess().getLeftSquareBracketKeyword_1_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableID__Group_1_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VariableID__Group_1_2__1__Impl
	rule__VariableID__Group_1_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableID__Group_1_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableIDAccess().getNUMBERParserRuleCall_1_2_1()); }
	ruleNUMBER
	{ after(grammarAccess.getVariableIDAccess().getNUMBERParserRuleCall_1_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableID__Group_1_2__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VariableID__Group_1_2__2__Impl
	rule__VariableID__Group_1_2__3
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableID__Group_1_2__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableIDAccess().getColonKeyword_1_2_2()); }
	Colon
	{ after(grammarAccess.getVariableIDAccess().getColonKeyword_1_2_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableID__Group_1_2__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VariableID__Group_1_2__3__Impl
	rule__VariableID__Group_1_2__4
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableID__Group_1_2__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableIDAccess().getNUMBERParserRuleCall_1_2_3()); }
	ruleNUMBER
	{ after(grammarAccess.getVariableIDAccess().getNUMBERParserRuleCall_1_2_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableID__Group_1_2__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VariableID__Group_1_2__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableID__Group_1_2__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableIDAccess().getRightSquareBracketKeyword_1_2_4()); }
	RightSquareBracket
	{ after(grammarAccess.getVariableIDAccess().getRightSquareBracketKeyword_1_2_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__NUMBER__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NUMBER__Group__0__Impl
	rule__NUMBER__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NUMBER__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNUMBERAccess().getHyphenMinusKeyword_0()); }
	(HyphenMinus)?
	{ after(grammarAccess.getNUMBERAccess().getHyphenMinusKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NUMBER__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NUMBER__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NUMBER__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNUMBERAccess().getINTTerminalRuleCall_1()); }
	RULE_INT
	{ after(grammarAccess.getNUMBERAccess().getINTTerminalRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__NuSmvModel__ModulesAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNuSmvModelAccess().getModulesModuleParserRuleCall_0()); }
		ruleModule
		{ after(grammarAccess.getNuSmvModelAccess().getModulesModuleParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Module__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModuleAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getModuleAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Module__ParamsAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModuleAccess().getParamsFormalParameterParserRuleCall_2_1_0()); }
		ruleFormalParameter
		{ after(grammarAccess.getModuleAccess().getParamsFormalParameterParserRuleCall_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Module__ParamsAssignment_2_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModuleAccess().getParamsFormalParameterParserRuleCall_2_2_1_0()); }
		ruleFormalParameter
		{ after(grammarAccess.getModuleAccess().getParamsFormalParameterParserRuleCall_2_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Module__ModuleElementAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModuleAccess().getModuleElementModuleElementParserRuleCall_3_0()); }
		ruleModuleElement
		{ after(grammarAccess.getModuleAccess().getModuleElementModuleElementParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__VarsAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVariableDeclarationAccess().getVarsVarBodyParserRuleCall_2_0()); }
		ruleVarBody
		{ after(grammarAccess.getVariableDeclarationAccess().getVarsVarBodyParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IVariableDeclaration__VarsAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIVariableDeclarationAccess().getVarsVarBodyParserRuleCall_1_0()); }
		ruleVarBody
		{ after(grammarAccess.getIVariableDeclarationAccess().getVarsVarBodyParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FrozenVariableDeclaration__VarsAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFrozenVariableDeclarationAccess().getVarsVarBodyParserRuleCall_1_0()); }
		ruleVarBody
		{ after(grammarAccess.getFrozenVariableDeclarationAccess().getVarsVarBodyParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarBody__NameAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVarBodyAccess().getNameIDTerminalRuleCall_0_0()); }
		RULE_ID
		{ after(grammarAccess.getVarBodyAccess().getNameIDTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarBody__TypeAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVarBodyAccess().getTypeTypeParserRuleCall_2_0()); }
		ruleType
		{ after(grammarAccess.getVarBodyAccess().getTypeTypeParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarBody__SemicolonAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVarBodyAccess().getSemicolonSemicolonKeyword_3_0()); }
		(
			{ before(grammarAccess.getVarBodyAccess().getSemicolonSemicolonKeyword_3_0()); }
			Semicolon
			{ after(grammarAccess.getVarBodyAccess().getSemicolonSemicolonKeyword_3_0()); }
		)
		{ after(grammarAccess.getVarBodyAccess().getSemicolonSemicolonKeyword_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DefineDeclaration__DefineAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDefineDeclarationAccess().getDefineDEFINEKeyword_0_0()); }
		(
			{ before(grammarAccess.getDefineDeclarationAccess().getDefineDEFINEKeyword_0_0()); }
			DEFINE
			{ after(grammarAccess.getDefineDeclarationAccess().getDefineDEFINEKeyword_0_0()); }
		)
		{ after(grammarAccess.getDefineDeclarationAccess().getDefineDEFINEKeyword_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DefineDeclaration__DefineBodiesAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDefineDeclarationAccess().getDefineBodiesDefineBodyParserRuleCall_1_0()); }
		ruleDefineBody
		{ after(grammarAccess.getDefineDeclarationAccess().getDefineBodiesDefineBodyParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DefineBody__VarAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDefineBodyAccess().getVarIDTerminalRuleCall_0_0()); }
		RULE_ID
		{ after(grammarAccess.getDefineBodyAccess().getVarIDTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DefineBody__AssignmentAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDefineBodyAccess().getAssignmentSimpleExpressionParserRuleCall_2_0()); }
		ruleSimpleExpression
		{ after(grammarAccess.getDefineBodyAccess().getAssignmentSimpleExpressionParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DefineBody__SemicolonAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDefineBodyAccess().getSemicolonSemicolonKeyword_3_0()); }
		(
			{ before(grammarAccess.getDefineBodyAccess().getSemicolonSemicolonKeyword_3_0()); }
			Semicolon
			{ after(grammarAccess.getDefineBodyAccess().getSemicolonSemicolonKeyword_3_0()); }
		)
		{ after(grammarAccess.getDefineBodyAccess().getSemicolonSemicolonKeyword_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstantsDeclaration__ConstantsAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConstantsDeclarationAccess().getConstantsIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getConstantsDeclarationAccess().getConstantsIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstantsDeclaration__ConstantsAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConstantsDeclarationAccess().getConstantsIDTerminalRuleCall_2_1_0()); }
		RULE_ID
		{ after(grammarAccess.getConstantsDeclarationAccess().getConstantsIDTerminalRuleCall_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstantsDeclaration__SemicolonAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConstantsDeclarationAccess().getSemicolonSemicolonKeyword_3_0()); }
		(
			{ before(grammarAccess.getConstantsDeclarationAccess().getSemicolonSemicolonKeyword_3_0()); }
			Semicolon
			{ after(grammarAccess.getConstantsDeclarationAccess().getSemicolonSemicolonKeyword_3_0()); }
		)
		{ after(grammarAccess.getConstantsDeclarationAccess().getSemicolonSemicolonKeyword_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AssignConstraint__AssignAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAssignConstraintAccess().getAssignASSIGNKeyword_0_0()); }
		(
			{ before(grammarAccess.getAssignConstraintAccess().getAssignASSIGNKeyword_0_0()); }
			ASSIGN
			{ after(grammarAccess.getAssignConstraintAccess().getAssignASSIGNKeyword_0_0()); }
		)
		{ after(grammarAccess.getAssignConstraintAccess().getAssignASSIGNKeyword_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AssignConstraint__BodiesAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAssignConstraintAccess().getBodiesAssignBodyParserRuleCall_1_0()); }
		ruleAssignBody
		{ after(grammarAccess.getAssignConstraintAccess().getBodiesAssignBodyParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarBodyAssign__VarAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVarBodyAssignAccess().getVarVariableIDParserRuleCall_0_0()); }
		ruleVariableID
		{ after(grammarAccess.getVarBodyAssignAccess().getVarVariableIDParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarBodyAssign__AssignmentAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVarBodyAssignAccess().getAssignmentSimpleExpressionParserRuleCall_2_0()); }
		ruleSimpleExpression
		{ after(grammarAccess.getVarBodyAssignAccess().getAssignmentSimpleExpressionParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarBodyAssign__SemicolonAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVarBodyAssignAccess().getSemicolonSemicolonKeyword_3_0()); }
		(
			{ before(grammarAccess.getVarBodyAssignAccess().getSemicolonSemicolonKeyword_3_0()); }
			Semicolon
			{ after(grammarAccess.getVarBodyAssignAccess().getSemicolonSemicolonKeyword_3_0()); }
		)
		{ after(grammarAccess.getVarBodyAssignAccess().getSemicolonSemicolonKeyword_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__InitBody__VarAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getInitBodyAccess().getVarVariableIDParserRuleCall_2_0()); }
		ruleVariableID
		{ after(grammarAccess.getInitBodyAccess().getVarVariableIDParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__InitBody__InitialAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getInitBodyAccess().getInitialSimpleExpressionParserRuleCall_5_0()); }
		ruleSimpleExpression
		{ after(grammarAccess.getInitBodyAccess().getInitialSimpleExpressionParserRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__InitBody__SemicolonAssignment_6
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getInitBodyAccess().getSemicolonSemicolonKeyword_6_0()); }
		(
			{ before(grammarAccess.getInitBodyAccess().getSemicolonSemicolonKeyword_6_0()); }
			Semicolon
			{ after(grammarAccess.getInitBodyAccess().getSemicolonSemicolonKeyword_6_0()); }
		)
		{ after(grammarAccess.getInitBodyAccess().getSemicolonSemicolonKeyword_6_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NextBody__VarAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNextBodyAccess().getVarVariableIDParserRuleCall_2_0()); }
		ruleVariableID
		{ after(grammarAccess.getNextBodyAccess().getVarVariableIDParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NextBody__NextAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNextBodyAccess().getNextNextExpressionParserRuleCall_5_0()); }
		ruleNextExpression
		{ after(grammarAccess.getNextBodyAccess().getNextNextExpressionParserRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NextBody__SemicolonAssignment_6
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNextBodyAccess().getSemicolonSemicolonKeyword_6_0()); }
		(
			{ before(grammarAccess.getNextBodyAccess().getSemicolonSemicolonKeyword_6_0()); }
			Semicolon
			{ after(grammarAccess.getNextBodyAccess().getSemicolonSemicolonKeyword_6_0()); }
		)
		{ after(grammarAccess.getNextBodyAccess().getSemicolonSemicolonKeyword_6_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TransConstraint__TransExpressionAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTransConstraintAccess().getTransExpressionSimpleExpressionParserRuleCall_1_0()); }
		ruleSimpleExpression
		{ after(grammarAccess.getTransConstraintAccess().getTransExpressionSimpleExpressionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TransConstraint__SemicolonAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTransConstraintAccess().getSemicolonSemicolonKeyword_2_0()); }
		(
			{ before(grammarAccess.getTransConstraintAccess().getSemicolonSemicolonKeyword_2_0()); }
			Semicolon
			{ after(grammarAccess.getTransConstraintAccess().getSemicolonSemicolonKeyword_2_0()); }
		)
		{ after(grammarAccess.getTransConstraintAccess().getSemicolonSemicolonKeyword_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__InitConstraint__InitExpressionAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getInitConstraintAccess().getInitExpressionSimpleExpressionParserRuleCall_1_0()); }
		ruleSimpleExpression
		{ after(grammarAccess.getInitConstraintAccess().getInitExpressionSimpleExpressionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__InitConstraint__SemicolonAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getInitConstraintAccess().getSemicolonSemicolonKeyword_2_0()); }
		(
			{ before(grammarAccess.getInitConstraintAccess().getSemicolonSemicolonKeyword_2_0()); }
			Semicolon
			{ after(grammarAccess.getInitConstraintAccess().getSemicolonSemicolonKeyword_2_0()); }
		)
		{ after(grammarAccess.getInitConstraintAccess().getSemicolonSemicolonKeyword_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__InvarConstraint__InvarExpressionAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getInvarConstraintAccess().getInvarExpressionSimpleExpressionParserRuleCall_1_0()); }
		ruleSimpleExpression
		{ after(grammarAccess.getInvarConstraintAccess().getInvarExpressionSimpleExpressionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__InvarConstraint__SemicolonAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getInvarConstraintAccess().getSemicolonSemicolonKeyword_2_0()); }
		(
			{ before(grammarAccess.getInvarConstraintAccess().getSemicolonSemicolonKeyword_2_0()); }
			Semicolon
			{ after(grammarAccess.getInvarConstraintAccess().getSemicolonSemicolonKeyword_2_0()); }
		)
		{ after(grammarAccess.getInvarConstraintAccess().getSemicolonSemicolonKeyword_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FairnessExpression__FairnessExprAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFairnessExpressionAccess().getFairnessExprSimpleExpressionParserRuleCall_1_0()); }
		ruleSimpleExpression
		{ after(grammarAccess.getFairnessExpressionAccess().getFairnessExprSimpleExpressionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FairnessExpression__SemicolonAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFairnessExpressionAccess().getSemicolonSemicolonKeyword_2_0()); }
		(
			{ before(grammarAccess.getFairnessExpressionAccess().getSemicolonSemicolonKeyword_2_0()); }
			Semicolon
			{ after(grammarAccess.getFairnessExpressionAccess().getSemicolonSemicolonKeyword_2_0()); }
		)
		{ after(grammarAccess.getFairnessExpressionAccess().getSemicolonSemicolonKeyword_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__JusticeExpression__JusticeExprAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getJusticeExpressionAccess().getJusticeExprSimpleExpressionParserRuleCall_1_0()); }
		ruleSimpleExpression
		{ after(grammarAccess.getJusticeExpressionAccess().getJusticeExprSimpleExpressionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__JusticeExpression__SemicolonAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getJusticeExpressionAccess().getSemicolonSemicolonKeyword_2_0()); }
		(
			{ before(grammarAccess.getJusticeExpressionAccess().getSemicolonSemicolonKeyword_2_0()); }
			Semicolon
			{ after(grammarAccess.getJusticeExpressionAccess().getSemicolonSemicolonKeyword_2_0()); }
		)
		{ after(grammarAccess.getJusticeExpressionAccess().getSemicolonSemicolonKeyword_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CompassionExpression__FirstExprAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCompassionExpressionAccess().getFirstExprSimpleExpressionParserRuleCall_1_0()); }
		ruleSimpleExpression
		{ after(grammarAccess.getCompassionExpressionAccess().getFirstExprSimpleExpressionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CompassionExpression__SecondExprAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCompassionExpressionAccess().getSecondExprSimpleExpressionParserRuleCall_3_0()); }
		ruleSimpleExpression
		{ after(grammarAccess.getCompassionExpressionAccess().getSecondExprSimpleExpressionParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CompassionExpression__SemicolonAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCompassionExpressionAccess().getSemicolonSemicolonKeyword_5_0()); }
		(
			{ before(grammarAccess.getCompassionExpressionAccess().getSemicolonSemicolonKeyword_5_0()); }
			Semicolon
			{ after(grammarAccess.getCompassionExpressionAccess().getSemicolonSemicolonKeyword_5_0()); }
		)
		{ after(grammarAccess.getCompassionExpressionAccess().getSemicolonSemicolonKeyword_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CtlSpecification__SpecKeyWordAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCtlSpecificationAccess().getSpecKeyWordAlternatives_0_0()); }
		(rule__CtlSpecification__SpecKeyWordAlternatives_0_0)
		{ after(grammarAccess.getCtlSpecificationAccess().getSpecKeyWordAlternatives_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CtlSpecification__NameKeyWordAssignment_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCtlSpecificationAccess().getNameKeyWordNAMEKeyword_1_0_0()); }
		(
			{ before(grammarAccess.getCtlSpecificationAccess().getNameKeyWordNAMEKeyword_1_0_0()); }
			NAME
			{ after(grammarAccess.getCtlSpecificationAccess().getNameKeyWordNAMEKeyword_1_0_0()); }
		)
		{ after(grammarAccess.getCtlSpecificationAccess().getNameKeyWordNAMEKeyword_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CtlSpecification__NameAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCtlSpecificationAccess().getNameIDTerminalRuleCall_1_1_0()); }
		RULE_ID
		{ after(grammarAccess.getCtlSpecificationAccess().getNameIDTerminalRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CtlSpecification__CtlExpressionAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCtlSpecificationAccess().getCtlExpressionCTLExpressionParserRuleCall_2_0()); }
		ruleCTLExpression
		{ after(grammarAccess.getCtlSpecificationAccess().getCtlExpressionCTLExpressionParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CtlSpecification__SemicolonAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCtlSpecificationAccess().getSemicolonSemicolonKeyword_3_0()); }
		(
			{ before(grammarAccess.getCtlSpecificationAccess().getSemicolonSemicolonKeyword_3_0()); }
			Semicolon
			{ after(grammarAccess.getCtlSpecificationAccess().getSemicolonSemicolonKeyword_3_0()); }
		)
		{ after(grammarAccess.getCtlSpecificationAccess().getSemicolonSemicolonKeyword_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PslSpecification__NameKeyWordAssignment_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPslSpecificationAccess().getNameKeyWordNAMEKeyword_1_0_0()); }
		(
			{ before(grammarAccess.getPslSpecificationAccess().getNameKeyWordNAMEKeyword_1_0_0()); }
			NAME
			{ after(grammarAccess.getPslSpecificationAccess().getNameKeyWordNAMEKeyword_1_0_0()); }
		)
		{ after(grammarAccess.getPslSpecificationAccess().getNameKeyWordNAMEKeyword_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PslSpecification__NameAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPslSpecificationAccess().getNameIDTerminalRuleCall_1_1_0()); }
		RULE_ID
		{ after(grammarAccess.getPslSpecificationAccess().getNameIDTerminalRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PslSpecification__PslExpressionAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPslSpecificationAccess().getPslExpressionPSLExpressionParserRuleCall_2_0()); }
		rulePSLExpression
		{ after(grammarAccess.getPslSpecificationAccess().getPslExpressionPSLExpressionParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PslSpecification__SemicolonAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPslSpecificationAccess().getSemicolonSemicolonKeyword_3_0()); }
		(
			{ before(grammarAccess.getPslSpecificationAccess().getSemicolonSemicolonKeyword_3_0()); }
			Semicolon
			{ after(grammarAccess.getPslSpecificationAccess().getSemicolonSemicolonKeyword_3_0()); }
		)
		{ after(grammarAccess.getPslSpecificationAccess().getSemicolonSemicolonKeyword_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__InvarSpecification__InvarSpecAssignment_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getInvarSpecificationAccess().getInvarSpecNextExpressionParserRuleCall_0_1_0()); }
		ruleNextExpression
		{ after(grammarAccess.getInvarSpecificationAccess().getInvarSpecNextExpressionParserRuleCall_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__InvarSpecification__NameAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getInvarSpecificationAccess().getNameIDTerminalRuleCall_1_1_0()); }
		RULE_ID
		{ after(grammarAccess.getInvarSpecificationAccess().getNameIDTerminalRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__InvarSpecification__InvarSpecAssignment_1_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getInvarSpecificationAccess().getInvarSpecNextExpressionParserRuleCall_1_3_0()); }
		ruleNextExpression
		{ after(grammarAccess.getInvarSpecificationAccess().getInvarSpecNextExpressionParserRuleCall_1_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__InvarSpecification__SemicolonAssignment_1_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getInvarSpecificationAccess().getSemicolonSemicolonKeyword_1_4_0()); }
		(
			{ before(grammarAccess.getInvarSpecificationAccess().getSemicolonSemicolonKeyword_1_4_0()); }
			Semicolon
			{ after(grammarAccess.getInvarSpecificationAccess().getSemicolonSemicolonKeyword_1_4_0()); }
		)
		{ after(grammarAccess.getInvarSpecificationAccess().getSemicolonSemicolonKeyword_1_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IsaDeclaration__IdAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIsaDeclarationAccess().getIdIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getIsaDeclarationAccess().getIdIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LtlSpecification__NameIdAssignment_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLtlSpecificationAccess().getNameIdNAMEKeyword_1_0_0()); }
		(
			{ before(grammarAccess.getLtlSpecificationAccess().getNameIdNAMEKeyword_1_0_0()); }
			NAME
			{ after(grammarAccess.getLtlSpecificationAccess().getNameIdNAMEKeyword_1_0_0()); }
		)
		{ after(grammarAccess.getLtlSpecificationAccess().getNameIdNAMEKeyword_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LtlSpecification__NameAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLtlSpecificationAccess().getNameIDTerminalRuleCall_1_1_0()); }
		RULE_ID
		{ after(grammarAccess.getLtlSpecificationAccess().getNameIDTerminalRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LtlSpecification__LtlExpressionAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLtlSpecificationAccess().getLtlExpressionLTLExpressionParserRuleCall_2_0()); }
		ruleLTLExpression
		{ after(grammarAccess.getLtlSpecificationAccess().getLtlExpressionLTLExpressionParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LtlSpecification__SemicolonAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLtlSpecificationAccess().getSemicolonSemicolonKeyword_3_0()); }
		(
			{ before(grammarAccess.getLtlSpecificationAccess().getSemicolonSemicolonKeyword_3_0()); }
			Semicolon
			{ after(grammarAccess.getLtlSpecificationAccess().getSemicolonSemicolonKeyword_3_0()); }
		)
		{ after(grammarAccess.getLtlSpecificationAccess().getSemicolonSemicolonKeyword_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleType__WordNumberAssignment_1_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSimpleTypeAccess().getWordNumberNUMBERParserRuleCall_1_1_2_0()); }
		ruleNUMBER
		{ after(grammarAccess.getSimpleTypeAccess().getWordNumberNUMBERParserRuleCall_1_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleType__UWordNumberAssignment_2_1_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSimpleTypeAccess().getUWordNumberNUMBERParserRuleCall_2_1_3_0()); }
		ruleNUMBER
		{ after(grammarAccess.getSimpleTypeAccess().getUWordNumberNUMBERParserRuleCall_2_1_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleType__SignedNumberAssignment_3_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSimpleTypeAccess().getSignedNumberNUMBERParserRuleCall_3_1_2_0()); }
		ruleNUMBER
		{ after(grammarAccess.getSimpleTypeAccess().getSignedNumberNUMBERParserRuleCall_3_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleType__ValAssignment_4_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSimpleTypeAccess().getValValParserRuleCall_4_2_0()); }
		ruleVal
		{ after(grammarAccess.getSimpleTypeAccess().getValValParserRuleCall_4_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleType__ValAssignment_4_3_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSimpleTypeAccess().getValValParserRuleCall_4_3_1_0()); }
		ruleVal
		{ after(grammarAccess.getSimpleTypeAccess().getValValParserRuleCall_4_3_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleType__LowAssignment_5_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSimpleTypeAccess().getLowAlternatives_5_1_0_0()); }
		(rule__SimpleType__LowAlternatives_5_1_0_0)
		{ after(grammarAccess.getSimpleTypeAccess().getLowAlternatives_5_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleType__HighAssignment_5_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSimpleTypeAccess().getHighAlternatives_5_1_2_0()); }
		(rule__SimpleType__HighAlternatives_5_1_2_0)
		{ after(grammarAccess.getSimpleTypeAccess().getHighAlternatives_5_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleType__LowerBoundAssignment_6_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSimpleTypeAccess().getLowerBoundAlternatives_6_2_0()); }
		(rule__SimpleType__LowerBoundAlternatives_6_2_0)
		{ after(grammarAccess.getSimpleTypeAccess().getLowerBoundAlternatives_6_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleType__UpperBoundAssignment_6_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSimpleTypeAccess().getUpperBoundAlternatives_6_4_0()); }
		(rule__SimpleType__UpperBoundAlternatives_6_4_0)
		{ after(grammarAccess.getSimpleTypeAccess().getUpperBoundAlternatives_6_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleType__TypeAssignment_6_6
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSimpleTypeAccess().getTypeSimpleTypeParserRuleCall_6_6_0()); }
		ruleSimpleType
		{ after(grammarAccess.getSimpleTypeAccess().getTypeSimpleTypeParserRuleCall_6_6_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ModuleType__ModuleAssignment_0_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModuleTypeAccess().getModuleModuleCrossReference_0_1_1_0()); }
		(
			{ before(grammarAccess.getModuleTypeAccess().getModuleModuleIDTerminalRuleCall_0_1_1_0_1()); }
			RULE_ID
			{ after(grammarAccess.getModuleTypeAccess().getModuleModuleIDTerminalRuleCall_0_1_1_0_1()); }
		)
		{ after(grammarAccess.getModuleTypeAccess().getModuleModuleCrossReference_0_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ModuleType__ParamsAssignment_0_1_2_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModuleTypeAccess().getParamsSimpleExpressionParserRuleCall_0_1_2_1_0_0()); }
		ruleSimpleExpression
		{ after(grammarAccess.getModuleTypeAccess().getParamsSimpleExpressionParserRuleCall_0_1_2_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ModuleType__ParAssignment_0_1_2_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModuleTypeAccess().getParVarBodyCrossReference_0_1_2_1_1_0()); }
		(
			{ before(grammarAccess.getModuleTypeAccess().getParVarBodyIDTerminalRuleCall_0_1_2_1_1_0_1()); }
			RULE_ID
			{ after(grammarAccess.getModuleTypeAccess().getParVarBodyIDTerminalRuleCall_0_1_2_1_1_0_1()); }
		)
		{ after(grammarAccess.getModuleTypeAccess().getParVarBodyCrossReference_0_1_2_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ModuleType__ParamsAssignment_0_1_2_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModuleTypeAccess().getParamsSimpleExpressionParserRuleCall_0_1_2_2_1_0()); }
		ruleSimpleExpression
		{ after(grammarAccess.getModuleTypeAccess().getParamsSimpleExpressionParserRuleCall_0_1_2_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ModuleType__ModuleAssignment_1_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModuleTypeAccess().getModuleModuleCrossReference_1_1_0_0()); }
		(
			{ before(grammarAccess.getModuleTypeAccess().getModuleModuleIDTerminalRuleCall_1_1_0_0_1()); }
			RULE_ID
			{ after(grammarAccess.getModuleTypeAccess().getModuleModuleIDTerminalRuleCall_1_1_0_0_1()); }
		)
		{ after(grammarAccess.getModuleTypeAccess().getModuleModuleCrossReference_1_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ModuleType__ParamsAssignment_1_1_1_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModuleTypeAccess().getParamsSimpleExpressionParserRuleCall_1_1_1_1_0_0()); }
		ruleSimpleExpression
		{ after(grammarAccess.getModuleTypeAccess().getParamsSimpleExpressionParserRuleCall_1_1_1_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ModuleType__ParAssignment_1_1_1_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModuleTypeAccess().getParVarBodyCrossReference_1_1_1_1_1_0()); }
		(
			{ before(grammarAccess.getModuleTypeAccess().getParVarBodyIDTerminalRuleCall_1_1_1_1_1_0_1()); }
			RULE_ID
			{ after(grammarAccess.getModuleTypeAccess().getParVarBodyIDTerminalRuleCall_1_1_1_1_1_0_1()); }
		)
		{ after(grammarAccess.getModuleTypeAccess().getParVarBodyCrossReference_1_1_1_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ModuleType__ParamsAssignment_1_1_1_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModuleTypeAccess().getParamsSimpleExpressionParserRuleCall_1_1_1_2_1_0()); }
		ruleSimpleExpression
		{ after(grammarAccess.getModuleTypeAccess().getParamsSimpleExpressionParserRuleCall_1_1_1_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Val__NameAssignment_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getValAccess().getNameIDTerminalRuleCall_1_0_0()); }
		RULE_ID
		{ after(grammarAccess.getValAccess().getNameIDTerminalRuleCall_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Val__NumAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getValAccess().getNumNUMBERParserRuleCall_1_1_0()); }
		ruleNUMBER
		{ after(grammarAccess.getValAccess().getNumNUMBERParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NextExpression__SimpleExpressionAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNextExpressionAccess().getSimpleExpressionSimpleExpressionParserRuleCall_0()); }
		ruleSimpleExpression
		{ after(grammarAccess.getNextExpressionAccess().getSimpleExpressionSimpleExpressionParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LTLbinExpression__OperatorAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLTLbinExpressionAccess().getOperatorLTLbinoperatorsEnumRuleCall_1_1_0()); }
		ruleLTLbinoperators
		{ after(grammarAccess.getLTLbinExpressionAccess().getOperatorLTLbinoperatorsEnumRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LTLbinExpression__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLTLbinExpressionAccess().getRightImpliesExpressionParserRuleCall_1_2_0()); }
		ruleImpliesExpression
		{ after(grammarAccess.getLTLbinExpressionAccess().getRightImpliesExpressionParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ImpliesExpression__OperatorAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getImpliesExpressionAccess().getOperatorImpliesoperatorEnumRuleCall_1_1_0()); }
		ruleimpliesoperator
		{ after(grammarAccess.getImpliesExpressionAccess().getOperatorImpliesoperatorEnumRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ImpliesExpression__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getImpliesExpressionAccess().getRightIffExpressionParserRuleCall_1_2_0()); }
		ruleIffExpression
		{ after(grammarAccess.getImpliesExpressionAccess().getRightIffExpressionParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IffExpression__OperatorAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIffExpressionAccess().getOperatorIffoperatorEnumRuleCall_1_1_0()); }
		ruleiffoperator
		{ after(grammarAccess.getIffExpressionAccess().getOperatorIffoperatorEnumRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IffExpression__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIffExpressionAccess().getRightOrExpressionParserRuleCall_1_2_0()); }
		ruleOrExpression
		{ after(grammarAccess.getIffExpressionAccess().getRightOrExpressionParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__OperatorAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOrExpressionAccess().getOperatorOroperatorsEnumRuleCall_1_1_0()); }
		ruleoroperators
		{ after(grammarAccess.getOrExpressionAccess().getOperatorOroperatorsEnumRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOrExpressionAccess().getRightAndExpressionParserRuleCall_1_2_0()); }
		ruleAndExpression
		{ after(grammarAccess.getOrExpressionAccess().getRightAndExpressionParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__OperatorAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAndExpressionAccess().getOperatorAndoperatorEnumRuleCall_1_1_0()); }
		ruleandoperator
		{ after(grammarAccess.getAndExpressionAccess().getOperatorAndoperatorEnumRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAndExpressionAccess().getRightComparisonExpressionParserRuleCall_1_2_0()); }
		ruleComparisonExpression
		{ after(grammarAccess.getAndExpressionAccess().getRightComparisonExpressionParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonExpression__OperatorAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getComparisonExpressionAccess().getOperatorComparisonoperatorsEnumRuleCall_1_1_0()); }
		rulecomparisonoperators
		{ after(grammarAccess.getComparisonExpressionAccess().getOperatorComparisonoperatorsEnumRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonExpression__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getComparisonExpressionAccess().getRightInExpressionParserRuleCall_1_2_0()); }
		ruleInExpression
		{ after(grammarAccess.getComparisonExpressionAccess().getRightInExpressionParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__InExpression__OpAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getInExpressionAccess().getOpInKeyword_1_1_0()); }
		(
			{ before(grammarAccess.getInExpressionAccess().getOpInKeyword_1_1_0()); }
			In
			{ after(grammarAccess.getInExpressionAccess().getOpInKeyword_1_1_0()); }
		)
		{ after(grammarAccess.getInExpressionAccess().getOpInKeyword_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__InExpression__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getInExpressionAccess().getRightUnionExpressionParserRuleCall_1_2_0()); }
		ruleUnionExpression
		{ after(grammarAccess.getInExpressionAccess().getRightUnionExpressionParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__UnionExpression__OpAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getUnionExpressionAccess().getOpUnionKeyword_1_1_0()); }
		(
			{ before(grammarAccess.getUnionExpressionAccess().getOpUnionKeyword_1_1_0()); }
			Union
			{ after(grammarAccess.getUnionExpressionAccess().getOpUnionKeyword_1_1_0()); }
		)
		{ after(grammarAccess.getUnionExpressionAccess().getOpUnionKeyword_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__UnionExpression__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getUnionExpressionAccess().getRightRightShiftParserRuleCall_1_2_0()); }
		ruleRightShift
		{ after(grammarAccess.getUnionExpressionAccess().getRightRightShiftParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RightShift__OpAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRightShiftAccess().getOpGreaterThanSignGreaterThanSignKeyword_1_1_0()); }
		(
			{ before(grammarAccess.getRightShiftAccess().getOpGreaterThanSignGreaterThanSignKeyword_1_1_0()); }
			GreaterThanSignGreaterThanSign
			{ after(grammarAccess.getRightShiftAccess().getOpGreaterThanSignGreaterThanSignKeyword_1_1_0()); }
		)
		{ after(grammarAccess.getRightShiftAccess().getOpGreaterThanSignGreaterThanSignKeyword_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RightShift__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRightShiftAccess().getRightLeftShiftParserRuleCall_1_2_0()); }
		ruleLeftShift
		{ after(grammarAccess.getRightShiftAccess().getRightLeftShiftParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LeftShift__OpAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLeftShiftAccess().getOpLessThanSignLessThanSignKeyword_1_1_0()); }
		(
			{ before(grammarAccess.getLeftShiftAccess().getOpLessThanSignLessThanSignKeyword_1_1_0()); }
			LessThanSignLessThanSign
			{ after(grammarAccess.getLeftShiftAccess().getOpLessThanSignLessThanSignKeyword_1_1_0()); }
		)
		{ after(grammarAccess.getLeftShiftAccess().getOpLessThanSignLessThanSignKeyword_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LeftShift__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLeftShiftAccess().getRightMinusParserRuleCall_1_2_0()); }
		ruleMinus
		{ after(grammarAccess.getLeftShiftAccess().getRightMinusParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Minus__OpAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMinusAccess().getOpHyphenMinusKeyword_1_1_0()); }
		(
			{ before(grammarAccess.getMinusAccess().getOpHyphenMinusKeyword_1_1_0()); }
			HyphenMinus
			{ after(grammarAccess.getMinusAccess().getOpHyphenMinusKeyword_1_1_0()); }
		)
		{ after(grammarAccess.getMinusAccess().getOpHyphenMinusKeyword_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Minus__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMinusAccess().getRightPlusParserRuleCall_1_2_0()); }
		rulePlus
		{ after(grammarAccess.getMinusAccess().getRightPlusParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Plus__OpAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPlusAccess().getOpPlusSignKeyword_1_1_0()); }
		(
			{ before(grammarAccess.getPlusAccess().getOpPlusSignKeyword_1_1_0()); }
			PlusSign
			{ after(grammarAccess.getPlusAccess().getOpPlusSignKeyword_1_1_0()); }
		)
		{ after(grammarAccess.getPlusAccess().getOpPlusSignKeyword_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Plus__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPlusAccess().getRightMultParserRuleCall_1_2_0()); }
		ruleMult
		{ after(grammarAccess.getPlusAccess().getRightMultParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Mult__OpAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMultAccess().getOpAsteriskKeyword_1_1_0()); }
		(
			{ before(grammarAccess.getMultAccess().getOpAsteriskKeyword_1_1_0()); }
			Asterisk
			{ after(grammarAccess.getMultAccess().getOpAsteriskKeyword_1_1_0()); }
		)
		{ after(grammarAccess.getMultAccess().getOpAsteriskKeyword_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Mult__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMultAccess().getRightModParserRuleCall_1_2_0()); }
		ruleMod
		{ after(grammarAccess.getMultAccess().getRightModParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Mod__OpAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModAccess().getOpModKeyword_1_1_0()); }
		(
			{ before(grammarAccess.getModAccess().getOpModKeyword_1_1_0()); }
			Mod
			{ after(grammarAccess.getModAccess().getOpModKeyword_1_1_0()); }
		)
		{ after(grammarAccess.getModAccess().getOpModKeyword_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Mod__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModAccess().getRightWordConcatenationParserRuleCall_1_2_0()); }
		ruleWordConcatenation
		{ after(grammarAccess.getModAccess().getRightWordConcatenationParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__WordConcatenation__OpAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getWordConcatenationAccess().getOpColonColonKeyword_1_1_0()); }
		(
			{ before(grammarAccess.getWordConcatenationAccess().getOpColonColonKeyword_1_1_0()); }
			ColonColon
			{ after(grammarAccess.getWordConcatenationAccess().getOpColonColonKeyword_1_1_0()); }
		)
		{ after(grammarAccess.getWordConcatenationAccess().getOpColonColonKeyword_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__WordConcatenation__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getWordConcatenationAccess().getRightDivParserRuleCall_1_2_0()); }
		ruleDiv
		{ after(grammarAccess.getWordConcatenationAccess().getRightDivParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Div__OpAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDivAccess().getOpSolidusKeyword_1_1_0()); }
		(
			{ before(grammarAccess.getDivAccess().getOpSolidusKeyword_1_1_0()); }
			Solidus
			{ after(grammarAccess.getDivAccess().getOpSolidusKeyword_1_1_0()); }
		)
		{ after(grammarAccess.getDivAccess().getOpSolidusKeyword_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Div__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDivAccess().getRightNotOrTerminalSimpleExpressionParserRuleCall_1_2_0()); }
		ruleNotOrTerminalSimpleExpression
		{ after(grammarAccess.getDivAccess().getRightNotOrTerminalSimpleExpressionParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NotOrTerminalSimpleExpression__ExpAssignment_0_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNotOrTerminalSimpleExpressionAccess().getExpTerminalSimpleExpressionParserRuleCall_0_2_0()); }
		ruleTerminalSimpleExpression
		{ after(grammarAccess.getNotOrTerminalSimpleExpressionAccess().getExpTerminalSimpleExpressionParserRuleCall_0_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalSimpleExpression__IsNextAssignment_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTerminalSimpleExpressionAccess().getIsNextNextKeyword_0_1_0()); }
		(
			{ before(grammarAccess.getTerminalSimpleExpressionAccess().getIsNextNextKeyword_0_1_0()); }
			Next
			{ after(grammarAccess.getTerminalSimpleExpressionAccess().getIsNextNextKeyword_0_1_0()); }
		)
		{ after(grammarAccess.getTerminalSimpleExpressionAccess().getIsNextNextKeyword_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalSimpleExpression__SimpleExpressionAssignment_0_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTerminalSimpleExpressionAccess().getSimpleExpressionSimpleExpressionParserRuleCall_0_3_0()); }
		ruleSimpleExpression
		{ after(grammarAccess.getTerminalSimpleExpressionAccess().getSimpleExpressionSimpleExpressionParserRuleCall_0_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalSimpleExpression__OperatorAssignment_1_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTerminalSimpleExpressionAccess().getOperatorAlternatives_1_1_0_0()); }
		(rule__TerminalSimpleExpression__OperatorAlternatives_1_1_0_0)
		{ after(grammarAccess.getTerminalSimpleExpressionAccess().getOperatorAlternatives_1_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalSimpleExpression__SimpleExpressionAssignment_1_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTerminalSimpleExpressionAccess().getSimpleExpressionSimpleExpressionParserRuleCall_1_1_1_0()); }
		ruleSimpleExpression
		{ after(grammarAccess.getTerminalSimpleExpressionAccess().getSimpleExpressionSimpleExpressionParserRuleCall_1_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalSimpleExpression__ValueAssignment_3_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTerminalSimpleExpressionAccess().getValueVariableIDParserRuleCall_3_1_0()); }
		ruleVariableID
		{ after(grammarAccess.getTerminalSimpleExpressionAccess().getValueVariableIDParserRuleCall_3_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalSimpleExpression__ArrayAssignment_3_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTerminalSimpleExpressionAccess().getArrayNUMBERParserRuleCall_3_2_1_0()); }
		ruleNUMBER
		{ after(grammarAccess.getTerminalSimpleExpressionAccess().getArrayNUMBERParserRuleCall_3_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalSimpleExpression__ValueAssignment_4_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTerminalSimpleExpressionAccess().getValueVarBodyCrossReference_4_1_0()); }
		(
			{ before(grammarAccess.getTerminalSimpleExpressionAccess().getValueVarBodyIDTerminalRuleCall_4_1_0_1()); }
			RULE_ID
			{ after(grammarAccess.getTerminalSimpleExpressionAccess().getValueVarBodyIDTerminalRuleCall_4_1_0_1()); }
		)
		{ after(grammarAccess.getTerminalSimpleExpressionAccess().getValueVarBodyCrossReference_4_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalSimpleExpression__DottedAssignment_4_2_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTerminalSimpleExpressionAccess().getDottedTerminalSimpleExpressionParserRuleCall_4_2_0_1_0()); }
		ruleTerminalSimpleExpression
		{ after(grammarAccess.getTerminalSimpleExpressionAccess().getDottedTerminalSimpleExpressionParserRuleCall_4_2_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalSimpleExpression__ArrayAssignment_4_2_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTerminalSimpleExpressionAccess().getArrayNUMBERParserRuleCall_4_2_1_1_0()); }
		ruleNUMBER
		{ after(grammarAccess.getTerminalSimpleExpressionAccess().getArrayNUMBERParserRuleCall_4_2_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalSimpleExpression__ValAssignment_5_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTerminalSimpleExpressionAccess().getValValCrossReference_5_1_0()); }
		(
			{ before(grammarAccess.getTerminalSimpleExpressionAccess().getValValIDTerminalRuleCall_5_1_0_1()); }
			RULE_ID
			{ after(grammarAccess.getTerminalSimpleExpressionAccess().getValValIDTerminalRuleCall_5_1_0_1()); }
		)
		{ after(grammarAccess.getTerminalSimpleExpressionAccess().getValValCrossReference_5_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalSimpleExpression__ValparamAssignment_6_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTerminalSimpleExpressionAccess().getValparamFormalParameterCrossReference_6_1_0()); }
		(
			{ before(grammarAccess.getTerminalSimpleExpressionAccess().getValparamFormalParameterIDTerminalRuleCall_6_1_0_1()); }
			RULE_ID
			{ after(grammarAccess.getTerminalSimpleExpressionAccess().getValparamFormalParameterIDTerminalRuleCall_6_1_0_1()); }
		)
		{ after(grammarAccess.getTerminalSimpleExpressionAccess().getValparamFormalParameterCrossReference_6_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalSimpleExpression__ValueAssignment_7_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTerminalSimpleExpressionAccess().getValueIDTerminalRuleCall_7_1_0()); }
		RULE_ID
		{ after(grammarAccess.getTerminalSimpleExpressionAccess().getValueIDTerminalRuleCall_7_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalSimpleExpression__ValueAssignment_8_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTerminalSimpleExpressionAccess().getValueNUMBERParserRuleCall_8_1_0()); }
		ruleNUMBER
		{ after(grammarAccess.getTerminalSimpleExpressionAccess().getValueNUMBERParserRuleCall_8_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalSimpleExpression__ValueAssignment_9_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTerminalSimpleExpressionAccess().getValueTRUEKeyword_9_1_0()); }
		(
			{ before(grammarAccess.getTerminalSimpleExpressionAccess().getValueTRUEKeyword_9_1_0()); }
			TRUE
			{ after(grammarAccess.getTerminalSimpleExpressionAccess().getValueTRUEKeyword_9_1_0()); }
		)
		{ after(grammarAccess.getTerminalSimpleExpressionAccess().getValueTRUEKeyword_9_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalSimpleExpression__ValueAssignment_10_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTerminalSimpleExpressionAccess().getValueFALSEKeyword_10_1_0()); }
		(
			{ before(grammarAccess.getTerminalSimpleExpressionAccess().getValueFALSEKeyword_10_1_0()); }
			FALSE
			{ after(grammarAccess.getTerminalSimpleExpressionAccess().getValueFALSEKeyword_10_1_0()); }
		)
		{ after(grammarAccess.getTerminalSimpleExpressionAccess().getValueFALSEKeyword_10_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalSimpleExpression__ValueAssignment_11_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTerminalSimpleExpressionAccess().getValueSelfKeyword_11_1_0()); }
		(
			{ before(grammarAccess.getTerminalSimpleExpressionAccess().getValueSelfKeyword_11_1_0()); }
			Self
			{ after(grammarAccess.getTerminalSimpleExpressionAccess().getValueSelfKeyword_11_1_0()); }
		)
		{ after(grammarAccess.getTerminalSimpleExpressionAccess().getValueSelfKeyword_11_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalSimpleExpression__SetElementAssignment_12_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTerminalSimpleExpressionAccess().getSetElementSimpleExpressionParserRuleCall_12_2_0()); }
		ruleSimpleExpression
		{ after(grammarAccess.getTerminalSimpleExpressionAccess().getSetElementSimpleExpressionParserRuleCall_12_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalSimpleExpression__SetElementAssignment_12_3_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTerminalSimpleExpressionAccess().getSetElementSimpleExpressionParserRuleCall_12_3_1_0()); }
		ruleSimpleExpression
		{ after(grammarAccess.getTerminalSimpleExpressionAccess().getSetElementSimpleExpressionParserRuleCall_12_3_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalSimpleExpression__ValueAssignment_13_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTerminalSimpleExpressionAccess().getValueWORDTerminalRuleCall_13_1_0()); }
		RULE_WORD
		{ after(grammarAccess.getTerminalSimpleExpressionAccess().getValueWORDTerminalRuleCall_13_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalSimpleExpression__LowerBoundAssignment_14_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTerminalSimpleExpressionAccess().getLowerBoundNUMBERParserRuleCall_14_1_0()); }
		ruleNUMBER
		{ after(grammarAccess.getTerminalSimpleExpressionAccess().getLowerBoundNUMBERParserRuleCall_14_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalSimpleExpression__UpperBoundAssignment_14_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTerminalSimpleExpressionAccess().getUpperBoundNUMBERParserRuleCall_14_3_0()); }
		ruleNUMBER
		{ after(grammarAccess.getTerminalSimpleExpressionAccess().getUpperBoundNUMBERParserRuleCall_14_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalSimpleExpression__EaAssignment_15_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTerminalSimpleExpressionAccess().getEaAlternatives_15_1_0()); }
		(rule__TerminalSimpleExpression__EaAlternatives_15_1_0)
		{ after(grammarAccess.getTerminalSimpleExpressionAccess().getEaAlternatives_15_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalSimpleExpression__ArgAssignment_15_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTerminalSimpleExpressionAccess().getArgLTLbinExpressionParserRuleCall_15_3_0()); }
		ruleLTLbinExpression
		{ after(grammarAccess.getTerminalSimpleExpressionAccess().getArgLTLbinExpressionParserRuleCall_15_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalSimpleExpression__FunctionAssignment_16_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTerminalSimpleExpressionAccess().getFunctionAlternatives_16_1_0()); }
		(rule__TerminalSimpleExpression__FunctionAlternatives_16_1_0)
		{ after(grammarAccess.getTerminalSimpleExpressionAccess().getFunctionAlternatives_16_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalSimpleExpression__ArgAssignment_16_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTerminalSimpleExpressionAccess().getArgSimpleExpressionParserRuleCall_16_3_0()); }
		ruleSimpleExpression
		{ after(grammarAccess.getTerminalSimpleExpressionAccess().getArgSimpleExpressionParserRuleCall_16_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalSimpleExpression__ArgAssignment_17_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTerminalSimpleExpressionAccess().getArgSimpleExpressionParserRuleCall_17_3_0()); }
		ruleSimpleExpression
		{ after(grammarAccess.getTerminalSimpleExpressionAccess().getArgSimpleExpressionParserRuleCall_17_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FormalParameter__NameAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFormalParameterAccess().getNameIDTerminalRuleCall_0_0()); }
		RULE_ID
		{ after(grammarAccess.getFormalParameterAccess().getNameIDTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseSimpleExpression__BranchesAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCaseSimpleExpressionAccess().getBranchesCaseSimpleAssignementExpressionParserRuleCall_1_0()); }
		ruleCaseSimpleAssignementExpression
		{ after(grammarAccess.getCaseSimpleExpressionAccess().getBranchesCaseSimpleAssignementExpressionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseSimpleAssignementExpression__CaseAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCaseSimpleAssignementExpressionAccess().getCaseSimpleExpressionParserRuleCall_0_0()); }
		ruleSimpleExpression
		{ after(grammarAccess.getCaseSimpleAssignementExpressionAccess().getCaseSimpleExpressionParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseSimpleAssignementExpression__AssignmentAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCaseSimpleAssignementExpressionAccess().getAssignmentSimpleExpressionParserRuleCall_2_0()); }
		ruleSimpleExpression
		{ after(grammarAccess.getCaseSimpleAssignementExpressionAccess().getAssignmentSimpleExpressionParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CTLExpression__SimpleExpressionAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCTLExpressionAccess().getSimpleExpressionSimpleExpressionParserRuleCall_0()); }
		ruleSimpleExpression
		{ after(grammarAccess.getCTLExpressionAccess().getSimpleExpressionSimpleExpressionParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PSLExpression__SimpleExpressionAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPSLExpressionAccess().getSimpleExpressionSimpleExpressionParserRuleCall_0()); }
		ruleSimpleExpression
		{ after(grammarAccess.getPSLExpressionAccess().getSimpleExpressionSimpleExpressionParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LTLExpression__SimpleExpressionAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLTLExpressionAccess().getSimpleExpressionSimpleExpressionParserRuleCall_0()); }
		ruleSimpleExpression
		{ after(grammarAccess.getLTLExpressionAccess().getSimpleExpressionSimpleExpressionParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RangeExpression__LowerAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRangeExpressionAccess().getLowerNUMBERParserRuleCall_0_0()); }
		ruleNUMBER
		{ after(grammarAccess.getRangeExpressionAccess().getLowerNUMBERParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RangeExpression__UpperAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRangeExpressionAccess().getUpperNUMBERParserRuleCall_2_0()); }
		ruleNUMBER
		{ after(grammarAccess.getRangeExpressionAccess().getUpperNUMBERParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RTCTLExpression__CtlExpressionAssignment_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRTCTLExpressionAccess().getCtlExpressionAlternatives_0_1_0()); }
		(rule__RTCTLExpression__CtlExpressionAlternatives_0_1_0)
		{ after(grammarAccess.getRTCTLExpressionAccess().getCtlExpressionAlternatives_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RTCTLExpression__UnaryAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRTCTLExpressionAccess().getUnaryAlternatives_1_1_0()); }
		(rule__RTCTLExpression__UnaryAlternatives_1_1_0)
		{ after(grammarAccess.getRTCTLExpressionAccess().getUnaryAlternatives_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RTCTLExpression__RangeAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRTCTLExpressionAccess().getRangeRangeExpressionParserRuleCall_1_2_0()); }
		ruleRangeExpression
		{ after(grammarAccess.getRTCTLExpressionAccess().getRangeRangeExpressionParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RTCTLExpression__RctlAssignment_1_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRTCTLExpressionAccess().getRctlRTCTLExpressionParserRuleCall_1_3_0()); }
		ruleRTCTLExpression
		{ after(grammarAccess.getRTCTLExpressionAccess().getRctlRTCTLExpressionParserRuleCall_1_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ComputeSpecification__MinMaxAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getComputeSpecificationAccess().getMinMaxAlternatives_1_0()); }
		(rule__ComputeSpecification__MinMaxAlternatives_1_0)
		{ after(grammarAccess.getComputeSpecificationAccess().getMinMaxAlternatives_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ComputeSpecification__FirstAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getComputeSpecificationAccess().getFirstRTCTLExpressionParserRuleCall_3_0()); }
		ruleRTCTLExpression
		{ after(grammarAccess.getComputeSpecificationAccess().getFirstRTCTLExpressionParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ComputeSpecification__SecondAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getComputeSpecificationAccess().getSecondRTCTLExpressionParserRuleCall_5_0()); }
		ruleRTCTLExpression
		{ after(grammarAccess.getComputeSpecificationAccess().getSecondRTCTLExpressionParserRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ComputeSpecification__SemicolonAssignment_7
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getComputeSpecificationAccess().getSemicolonSemicolonKeyword_7_0()); }
		(
			{ before(grammarAccess.getComputeSpecificationAccess().getSemicolonSemicolonKeyword_7_0()); }
			Semicolon
			{ after(grammarAccess.getComputeSpecificationAccess().getSemicolonSemicolonKeyword_7_0()); }
		)
		{ after(grammarAccess.getComputeSpecificationAccess().getSemicolonSemicolonKeyword_7_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}
