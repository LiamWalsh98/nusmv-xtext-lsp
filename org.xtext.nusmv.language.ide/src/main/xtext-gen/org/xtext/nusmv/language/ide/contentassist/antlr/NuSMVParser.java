/*
 * generated by Xtext 2.21.0
 */
package org.xtext.nusmv.language.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.xtext.nusmv.language.ide.contentassist.antlr.internal.InternalNuSMVParser;
import org.xtext.nusmv.language.services.NuSMVGrammarAccess;

public class NuSMVParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(NuSMVGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, NuSMVGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getModuleElementAccess().getAlternatives(), "rule__ModuleElement__Alternatives");
			builder.put(grammarAccess.getAssignBodyAccess().getAlternatives(), "rule__AssignBody__Alternatives");
			builder.put(grammarAccess.getFairnessConstraintAccess().getAlternatives(), "rule__FairnessConstraint__Alternatives");
			builder.put(grammarAccess.getCtlSpecificationAccess().getSpecKeyWordAlternatives_0_0(), "rule__CtlSpecification__SpecKeyWordAlternatives_0_0");
			builder.put(grammarAccess.getInvarSpecificationAccess().getAlternatives(), "rule__InvarSpecification__Alternatives");
			builder.put(grammarAccess.getTypeAccess().getAlternatives(), "rule__Type__Alternatives");
			builder.put(grammarAccess.getSimpleTypeAccess().getAlternatives(), "rule__SimpleType__Alternatives");
			builder.put(grammarAccess.getSimpleTypeAccess().getLowAlternatives_5_1_0_0(), "rule__SimpleType__LowAlternatives_5_1_0_0");
			builder.put(grammarAccess.getSimpleTypeAccess().getHighAlternatives_5_1_2_0(), "rule__SimpleType__HighAlternatives_5_1_2_0");
			builder.put(grammarAccess.getSimpleTypeAccess().getLowerBoundAlternatives_6_2_0(), "rule__SimpleType__LowerBoundAlternatives_6_2_0");
			builder.put(grammarAccess.getSimpleTypeAccess().getUpperBoundAlternatives_6_4_0(), "rule__SimpleType__UpperBoundAlternatives_6_4_0");
			builder.put(grammarAccess.getModuleTypeAccess().getAlternatives(), "rule__ModuleType__Alternatives");
			builder.put(grammarAccess.getModuleTypeAccess().getAlternatives_0_1_2_1(), "rule__ModuleType__Alternatives_0_1_2_1");
			builder.put(grammarAccess.getModuleTypeAccess().getAlternatives_1_1_1_1(), "rule__ModuleType__Alternatives_1_1_1_1");
			builder.put(grammarAccess.getValAccess().getAlternatives_1(), "rule__Val__Alternatives_1");
			builder.put(grammarAccess.getNotOrTerminalSimpleExpressionAccess().getAlternatives(), "rule__NotOrTerminalSimpleExpression__Alternatives");
			builder.put(grammarAccess.getTerminalSimpleExpressionAccess().getAlternatives(), "rule__TerminalSimpleExpression__Alternatives");
			builder.put(grammarAccess.getTerminalSimpleExpressionAccess().getOperatorAlternatives_1_1_0_0(), "rule__TerminalSimpleExpression__OperatorAlternatives_1_1_0_0");
			builder.put(grammarAccess.getTerminalSimpleExpressionAccess().getAlternatives_4_2(), "rule__TerminalSimpleExpression__Alternatives_4_2");
			builder.put(grammarAccess.getTerminalSimpleExpressionAccess().getEaAlternatives_15_1_0(), "rule__TerminalSimpleExpression__EaAlternatives_15_1_0");
			builder.put(grammarAccess.getTerminalSimpleExpressionAccess().getFunctionAlternatives_16_1_0(), "rule__TerminalSimpleExpression__FunctionAlternatives_16_1_0");
			builder.put(grammarAccess.getRTCTLExpressionAccess().getAlternatives(), "rule__RTCTLExpression__Alternatives");
			builder.put(grammarAccess.getRTCTLExpressionAccess().getCtlExpressionAlternatives_0_1_0(), "rule__RTCTLExpression__CtlExpressionAlternatives_0_1_0");
			builder.put(grammarAccess.getRTCTLExpressionAccess().getUnaryAlternatives_1_1_0(), "rule__RTCTLExpression__UnaryAlternatives_1_1_0");
			builder.put(grammarAccess.getComputeSpecificationAccess().getMinMaxAlternatives_1_0(), "rule__ComputeSpecification__MinMaxAlternatives_1_0");
			builder.put(grammarAccess.getVariableIDAccess().getAlternatives_1(), "rule__VariableID__Alternatives_1");
			builder.put(grammarAccess.getVariableIDAccess().getAlternatives_1_1_1(), "rule__VariableID__Alternatives_1_1_1");
			builder.put(grammarAccess.getComparisonoperatorsAccess().getAlternatives(), "rule__Comparisonoperators__Alternatives");
			builder.put(grammarAccess.getOroperatorsAccess().getAlternatives(), "rule__Oroperators__Alternatives");
			builder.put(grammarAccess.getLTLbinoperatorsAccess().getAlternatives(), "rule__LTLbinoperators__Alternatives");
			builder.put(grammarAccess.getModuleAccess().getGroup(), "rule__Module__Group__0");
			builder.put(grammarAccess.getModuleAccess().getGroup_2(), "rule__Module__Group_2__0");
			builder.put(grammarAccess.getModuleAccess().getGroup_2_2(), "rule__Module__Group_2_2__0");
			builder.put(grammarAccess.getVariableDeclarationAccess().getGroup(), "rule__VariableDeclaration__Group__0");
			builder.put(grammarAccess.getIVariableDeclarationAccess().getGroup(), "rule__IVariableDeclaration__Group__0");
			builder.put(grammarAccess.getFrozenVariableDeclarationAccess().getGroup(), "rule__FrozenVariableDeclaration__Group__0");
			builder.put(grammarAccess.getVarBodyAccess().getGroup(), "rule__VarBody__Group__0");
			builder.put(grammarAccess.getDefineDeclarationAccess().getGroup(), "rule__DefineDeclaration__Group__0");
			builder.put(grammarAccess.getDefineBodyAccess().getGroup(), "rule__DefineBody__Group__0");
			builder.put(grammarAccess.getConstantsDeclarationAccess().getGroup(), "rule__ConstantsDeclaration__Group__0");
			builder.put(grammarAccess.getConstantsDeclarationAccess().getGroup_2(), "rule__ConstantsDeclaration__Group_2__0");
			builder.put(grammarAccess.getAssignConstraintAccess().getGroup(), "rule__AssignConstraint__Group__0");
			builder.put(grammarAccess.getVarBodyAssignAccess().getGroup(), "rule__VarBodyAssign__Group__0");
			builder.put(grammarAccess.getInitBodyAccess().getGroup(), "rule__InitBody__Group__0");
			builder.put(grammarAccess.getNextBodyAccess().getGroup(), "rule__NextBody__Group__0");
			builder.put(grammarAccess.getTransConstraintAccess().getGroup(), "rule__TransConstraint__Group__0");
			builder.put(grammarAccess.getInitConstraintAccess().getGroup(), "rule__InitConstraint__Group__0");
			builder.put(grammarAccess.getInvarConstraintAccess().getGroup(), "rule__InvarConstraint__Group__0");
			builder.put(grammarAccess.getFairnessExpressionAccess().getGroup(), "rule__FairnessExpression__Group__0");
			builder.put(grammarAccess.getJusticeExpressionAccess().getGroup(), "rule__JusticeExpression__Group__0");
			builder.put(grammarAccess.getCompassionExpressionAccess().getGroup(), "rule__CompassionExpression__Group__0");
			builder.put(grammarAccess.getCtlSpecificationAccess().getGroup(), "rule__CtlSpecification__Group__0");
			builder.put(grammarAccess.getCtlSpecificationAccess().getGroup_1(), "rule__CtlSpecification__Group_1__0");
			builder.put(grammarAccess.getPslSpecificationAccess().getGroup(), "rule__PslSpecification__Group__0");
			builder.put(grammarAccess.getPslSpecificationAccess().getGroup_1(), "rule__PslSpecification__Group_1__0");
			builder.put(grammarAccess.getInvarSpecificationAccess().getGroup_0(), "rule__InvarSpecification__Group_0__0");
			builder.put(grammarAccess.getInvarSpecificationAccess().getGroup_1(), "rule__InvarSpecification__Group_1__0");
			builder.put(grammarAccess.getIsaDeclarationAccess().getGroup(), "rule__IsaDeclaration__Group__0");
			builder.put(grammarAccess.getLtlSpecificationAccess().getGroup(), "rule__LtlSpecification__Group__0");
			builder.put(grammarAccess.getLtlSpecificationAccess().getGroup_1(), "rule__LtlSpecification__Group_1__0");
			builder.put(grammarAccess.getSimpleTypeAccess().getGroup_0(), "rule__SimpleType__Group_0__0");
			builder.put(grammarAccess.getSimpleTypeAccess().getGroup_1(), "rule__SimpleType__Group_1__0");
			builder.put(grammarAccess.getSimpleTypeAccess().getGroup_1_1(), "rule__SimpleType__Group_1_1__0");
			builder.put(grammarAccess.getSimpleTypeAccess().getGroup_2(), "rule__SimpleType__Group_2__0");
			builder.put(grammarAccess.getSimpleTypeAccess().getGroup_2_1(), "rule__SimpleType__Group_2_1__0");
			builder.put(grammarAccess.getSimpleTypeAccess().getGroup_3(), "rule__SimpleType__Group_3__0");
			builder.put(grammarAccess.getSimpleTypeAccess().getGroup_3_1(), "rule__SimpleType__Group_3_1__0");
			builder.put(grammarAccess.getSimpleTypeAccess().getGroup_4(), "rule__SimpleType__Group_4__0");
			builder.put(grammarAccess.getSimpleTypeAccess().getGroup_4_3(), "rule__SimpleType__Group_4_3__0");
			builder.put(grammarAccess.getSimpleTypeAccess().getGroup_5(), "rule__SimpleType__Group_5__0");
			builder.put(grammarAccess.getSimpleTypeAccess().getGroup_5_1(), "rule__SimpleType__Group_5_1__0");
			builder.put(grammarAccess.getSimpleTypeAccess().getGroup_6(), "rule__SimpleType__Group_6__0");
			builder.put(grammarAccess.getModuleTypeAccess().getGroup_0(), "rule__ModuleType__Group_0__0");
			builder.put(grammarAccess.getModuleTypeAccess().getGroup_0_1(), "rule__ModuleType__Group_0_1__0");
			builder.put(grammarAccess.getModuleTypeAccess().getGroup_0_1_2(), "rule__ModuleType__Group_0_1_2__0");
			builder.put(grammarAccess.getModuleTypeAccess().getGroup_0_1_2_2(), "rule__ModuleType__Group_0_1_2_2__0");
			builder.put(grammarAccess.getModuleTypeAccess().getGroup_1(), "rule__ModuleType__Group_1__0");
			builder.put(grammarAccess.getModuleTypeAccess().getGroup_1_1(), "rule__ModuleType__Group_1_1__0");
			builder.put(grammarAccess.getModuleTypeAccess().getGroup_1_1_1(), "rule__ModuleType__Group_1_1_1__0");
			builder.put(grammarAccess.getModuleTypeAccess().getGroup_1_1_1_2(), "rule__ModuleType__Group_1_1_1_2__0");
			builder.put(grammarAccess.getValAccess().getGroup(), "rule__Val__Group__0");
			builder.put(grammarAccess.getLTLbinExpressionAccess().getGroup(), "rule__LTLbinExpression__Group__0");
			builder.put(grammarAccess.getLTLbinExpressionAccess().getGroup_1(), "rule__LTLbinExpression__Group_1__0");
			builder.put(grammarAccess.getImpliesExpressionAccess().getGroup(), "rule__ImpliesExpression__Group__0");
			builder.put(grammarAccess.getImpliesExpressionAccess().getGroup_1(), "rule__ImpliesExpression__Group_1__0");
			builder.put(grammarAccess.getIffExpressionAccess().getGroup(), "rule__IffExpression__Group__0");
			builder.put(grammarAccess.getIffExpressionAccess().getGroup_1(), "rule__IffExpression__Group_1__0");
			builder.put(grammarAccess.getOrExpressionAccess().getGroup(), "rule__OrExpression__Group__0");
			builder.put(grammarAccess.getOrExpressionAccess().getGroup_1(), "rule__OrExpression__Group_1__0");
			builder.put(grammarAccess.getAndExpressionAccess().getGroup(), "rule__AndExpression__Group__0");
			builder.put(grammarAccess.getAndExpressionAccess().getGroup_1(), "rule__AndExpression__Group_1__0");
			builder.put(grammarAccess.getComparisonExpressionAccess().getGroup(), "rule__ComparisonExpression__Group__0");
			builder.put(grammarAccess.getComparisonExpressionAccess().getGroup_1(), "rule__ComparisonExpression__Group_1__0");
			builder.put(grammarAccess.getInExpressionAccess().getGroup(), "rule__InExpression__Group__0");
			builder.put(grammarAccess.getInExpressionAccess().getGroup_1(), "rule__InExpression__Group_1__0");
			builder.put(grammarAccess.getUnionExpressionAccess().getGroup(), "rule__UnionExpression__Group__0");
			builder.put(grammarAccess.getUnionExpressionAccess().getGroup_1(), "rule__UnionExpression__Group_1__0");
			builder.put(grammarAccess.getRightShiftAccess().getGroup(), "rule__RightShift__Group__0");
			builder.put(grammarAccess.getRightShiftAccess().getGroup_1(), "rule__RightShift__Group_1__0");
			builder.put(grammarAccess.getLeftShiftAccess().getGroup(), "rule__LeftShift__Group__0");
			builder.put(grammarAccess.getLeftShiftAccess().getGroup_1(), "rule__LeftShift__Group_1__0");
			builder.put(grammarAccess.getMinusAccess().getGroup(), "rule__Minus__Group__0");
			builder.put(grammarAccess.getMinusAccess().getGroup_1(), "rule__Minus__Group_1__0");
			builder.put(grammarAccess.getPlusAccess().getGroup(), "rule__Plus__Group__0");
			builder.put(grammarAccess.getPlusAccess().getGroup_1(), "rule__Plus__Group_1__0");
			builder.put(grammarAccess.getMultAccess().getGroup(), "rule__Mult__Group__0");
			builder.put(grammarAccess.getMultAccess().getGroup_1(), "rule__Mult__Group_1__0");
			builder.put(grammarAccess.getModAccess().getGroup(), "rule__Mod__Group__0");
			builder.put(grammarAccess.getModAccess().getGroup_1(), "rule__Mod__Group_1__0");
			builder.put(grammarAccess.getWordConcatenationAccess().getGroup(), "rule__WordConcatenation__Group__0");
			builder.put(grammarAccess.getWordConcatenationAccess().getGroup_1(), "rule__WordConcatenation__Group_1__0");
			builder.put(grammarAccess.getDivAccess().getGroup(), "rule__Div__Group__0");
			builder.put(grammarAccess.getDivAccess().getGroup_1(), "rule__Div__Group_1__0");
			builder.put(grammarAccess.getNotOrTerminalSimpleExpressionAccess().getGroup_0(), "rule__NotOrTerminalSimpleExpression__Group_0__0");
			builder.put(grammarAccess.getTerminalSimpleExpressionAccess().getGroup_0(), "rule__TerminalSimpleExpression__Group_0__0");
			builder.put(grammarAccess.getTerminalSimpleExpressionAccess().getGroup_1(), "rule__TerminalSimpleExpression__Group_1__0");
			builder.put(grammarAccess.getTerminalSimpleExpressionAccess().getGroup_1_1(), "rule__TerminalSimpleExpression__Group_1_1__0");
			builder.put(grammarAccess.getTerminalSimpleExpressionAccess().getGroup_3(), "rule__TerminalSimpleExpression__Group_3__0");
			builder.put(grammarAccess.getTerminalSimpleExpressionAccess().getGroup_3_2(), "rule__TerminalSimpleExpression__Group_3_2__0");
			builder.put(grammarAccess.getTerminalSimpleExpressionAccess().getGroup_4(), "rule__TerminalSimpleExpression__Group_4__0");
			builder.put(grammarAccess.getTerminalSimpleExpressionAccess().getGroup_4_2_0(), "rule__TerminalSimpleExpression__Group_4_2_0__0");
			builder.put(grammarAccess.getTerminalSimpleExpressionAccess().getGroup_4_2_1(), "rule__TerminalSimpleExpression__Group_4_2_1__0");
			builder.put(grammarAccess.getTerminalSimpleExpressionAccess().getGroup_5(), "rule__TerminalSimpleExpression__Group_5__0");
			builder.put(grammarAccess.getTerminalSimpleExpressionAccess().getGroup_6(), "rule__TerminalSimpleExpression__Group_6__0");
			builder.put(grammarAccess.getTerminalSimpleExpressionAccess().getGroup_7(), "rule__TerminalSimpleExpression__Group_7__0");
			builder.put(grammarAccess.getTerminalSimpleExpressionAccess().getGroup_8(), "rule__TerminalSimpleExpression__Group_8__0");
			builder.put(grammarAccess.getTerminalSimpleExpressionAccess().getGroup_9(), "rule__TerminalSimpleExpression__Group_9__0");
			builder.put(grammarAccess.getTerminalSimpleExpressionAccess().getGroup_10(), "rule__TerminalSimpleExpression__Group_10__0");
			builder.put(grammarAccess.getTerminalSimpleExpressionAccess().getGroup_11(), "rule__TerminalSimpleExpression__Group_11__0");
			builder.put(grammarAccess.getTerminalSimpleExpressionAccess().getGroup_12(), "rule__TerminalSimpleExpression__Group_12__0");
			builder.put(grammarAccess.getTerminalSimpleExpressionAccess().getGroup_12_3(), "rule__TerminalSimpleExpression__Group_12_3__0");
			builder.put(grammarAccess.getTerminalSimpleExpressionAccess().getGroup_13(), "rule__TerminalSimpleExpression__Group_13__0");
			builder.put(grammarAccess.getTerminalSimpleExpressionAccess().getGroup_14(), "rule__TerminalSimpleExpression__Group_14__0");
			builder.put(grammarAccess.getTerminalSimpleExpressionAccess().getGroup_15(), "rule__TerminalSimpleExpression__Group_15__0");
			builder.put(grammarAccess.getTerminalSimpleExpressionAccess().getGroup_16(), "rule__TerminalSimpleExpression__Group_16__0");
			builder.put(grammarAccess.getTerminalSimpleExpressionAccess().getGroup_17(), "rule__TerminalSimpleExpression__Group_17__0");
			builder.put(grammarAccess.getFormalParameterAccess().getGroup(), "rule__FormalParameter__Group__0");
			builder.put(grammarAccess.getFormalParameterAccess().getGroup_1(), "rule__FormalParameter__Group_1__0");
			builder.put(grammarAccess.getCaseSimpleExpressionAccess().getGroup(), "rule__CaseSimpleExpression__Group__0");
			builder.put(grammarAccess.getCaseSimpleAssignementExpressionAccess().getGroup(), "rule__CaseSimpleAssignementExpression__Group__0");
			builder.put(grammarAccess.getRangeExpressionAccess().getGroup(), "rule__RangeExpression__Group__0");
			builder.put(grammarAccess.getRTCTLExpressionAccess().getGroup_0(), "rule__RTCTLExpression__Group_0__0");
			builder.put(grammarAccess.getRTCTLExpressionAccess().getGroup_1(), "rule__RTCTLExpression__Group_1__0");
			builder.put(grammarAccess.getComputeSpecificationAccess().getGroup(), "rule__ComputeSpecification__Group__0");
			builder.put(grammarAccess.getVariableIDAccess().getGroup(), "rule__VariableID__Group__0");
			builder.put(grammarAccess.getVariableIDAccess().getGroup_1_0(), "rule__VariableID__Group_1_0__0");
			builder.put(grammarAccess.getVariableIDAccess().getGroup_1_1(), "rule__VariableID__Group_1_1__0");
			builder.put(grammarAccess.getVariableIDAccess().getGroup_1_2(), "rule__VariableID__Group_1_2__0");
			builder.put(grammarAccess.getNUMBERAccess().getGroup(), "rule__NUMBER__Group__0");
			builder.put(grammarAccess.getNuSmvModelAccess().getModulesAssignment(), "rule__NuSmvModel__ModulesAssignment");
			builder.put(grammarAccess.getModuleAccess().getNameAssignment_1(), "rule__Module__NameAssignment_1");
			builder.put(grammarAccess.getModuleAccess().getParamsAssignment_2_1(), "rule__Module__ParamsAssignment_2_1");
			builder.put(grammarAccess.getModuleAccess().getParamsAssignment_2_2_1(), "rule__Module__ParamsAssignment_2_2_1");
			builder.put(grammarAccess.getModuleAccess().getModuleElementAssignment_3(), "rule__Module__ModuleElementAssignment_3");
			builder.put(grammarAccess.getVariableDeclarationAccess().getVarsAssignment_2(), "rule__VariableDeclaration__VarsAssignment_2");
			builder.put(grammarAccess.getIVariableDeclarationAccess().getVarsAssignment_1(), "rule__IVariableDeclaration__VarsAssignment_1");
			builder.put(grammarAccess.getFrozenVariableDeclarationAccess().getVarsAssignment_1(), "rule__FrozenVariableDeclaration__VarsAssignment_1");
			builder.put(grammarAccess.getVarBodyAccess().getNameAssignment_0(), "rule__VarBody__NameAssignment_0");
			builder.put(grammarAccess.getVarBodyAccess().getTypeAssignment_2(), "rule__VarBody__TypeAssignment_2");
			builder.put(grammarAccess.getVarBodyAccess().getSemicolonAssignment_3(), "rule__VarBody__SemicolonAssignment_3");
			builder.put(grammarAccess.getDefineDeclarationAccess().getDefineAssignment_0(), "rule__DefineDeclaration__DefineAssignment_0");
			builder.put(grammarAccess.getDefineDeclarationAccess().getDefineBodiesAssignment_1(), "rule__DefineDeclaration__DefineBodiesAssignment_1");
			builder.put(grammarAccess.getDefineBodyAccess().getVarAssignment_0(), "rule__DefineBody__VarAssignment_0");
			builder.put(grammarAccess.getDefineBodyAccess().getAssignmentAssignment_2(), "rule__DefineBody__AssignmentAssignment_2");
			builder.put(grammarAccess.getDefineBodyAccess().getSemicolonAssignment_3(), "rule__DefineBody__SemicolonAssignment_3");
			builder.put(grammarAccess.getConstantsDeclarationAccess().getConstantsAssignment_1(), "rule__ConstantsDeclaration__ConstantsAssignment_1");
			builder.put(grammarAccess.getConstantsDeclarationAccess().getConstantsAssignment_2_1(), "rule__ConstantsDeclaration__ConstantsAssignment_2_1");
			builder.put(grammarAccess.getConstantsDeclarationAccess().getSemicolonAssignment_3(), "rule__ConstantsDeclaration__SemicolonAssignment_3");
			builder.put(grammarAccess.getAssignConstraintAccess().getAssignAssignment_0(), "rule__AssignConstraint__AssignAssignment_0");
			builder.put(grammarAccess.getAssignConstraintAccess().getBodiesAssignment_1(), "rule__AssignConstraint__BodiesAssignment_1");
			builder.put(grammarAccess.getVarBodyAssignAccess().getVarAssignment_0(), "rule__VarBodyAssign__VarAssignment_0");
			builder.put(grammarAccess.getVarBodyAssignAccess().getAssignmentAssignment_2(), "rule__VarBodyAssign__AssignmentAssignment_2");
			builder.put(grammarAccess.getVarBodyAssignAccess().getSemicolonAssignment_3(), "rule__VarBodyAssign__SemicolonAssignment_3");
			builder.put(grammarAccess.getInitBodyAccess().getVarAssignment_2(), "rule__InitBody__VarAssignment_2");
			builder.put(grammarAccess.getInitBodyAccess().getInitialAssignment_5(), "rule__InitBody__InitialAssignment_5");
			builder.put(grammarAccess.getInitBodyAccess().getSemicolonAssignment_6(), "rule__InitBody__SemicolonAssignment_6");
			builder.put(grammarAccess.getNextBodyAccess().getVarAssignment_2(), "rule__NextBody__VarAssignment_2");
			builder.put(grammarAccess.getNextBodyAccess().getNextAssignment_5(), "rule__NextBody__NextAssignment_5");
			builder.put(grammarAccess.getNextBodyAccess().getSemicolonAssignment_6(), "rule__NextBody__SemicolonAssignment_6");
			builder.put(grammarAccess.getTransConstraintAccess().getTransExpressionAssignment_1(), "rule__TransConstraint__TransExpressionAssignment_1");
			builder.put(grammarAccess.getTransConstraintAccess().getSemicolonAssignment_2(), "rule__TransConstraint__SemicolonAssignment_2");
			builder.put(grammarAccess.getInitConstraintAccess().getInitExpressionAssignment_1(), "rule__InitConstraint__InitExpressionAssignment_1");
			builder.put(grammarAccess.getInitConstraintAccess().getSemicolonAssignment_2(), "rule__InitConstraint__SemicolonAssignment_2");
			builder.put(grammarAccess.getInvarConstraintAccess().getInvarExpressionAssignment_1(), "rule__InvarConstraint__InvarExpressionAssignment_1");
			builder.put(grammarAccess.getInvarConstraintAccess().getSemicolonAssignment_2(), "rule__InvarConstraint__SemicolonAssignment_2");
			builder.put(grammarAccess.getFairnessExpressionAccess().getFairnessExprAssignment_1(), "rule__FairnessExpression__FairnessExprAssignment_1");
			builder.put(grammarAccess.getFairnessExpressionAccess().getSemicolonAssignment_2(), "rule__FairnessExpression__SemicolonAssignment_2");
			builder.put(grammarAccess.getJusticeExpressionAccess().getJusticeExprAssignment_1(), "rule__JusticeExpression__JusticeExprAssignment_1");
			builder.put(grammarAccess.getJusticeExpressionAccess().getSemicolonAssignment_2(), "rule__JusticeExpression__SemicolonAssignment_2");
			builder.put(grammarAccess.getCompassionExpressionAccess().getFirstExprAssignment_1(), "rule__CompassionExpression__FirstExprAssignment_1");
			builder.put(grammarAccess.getCompassionExpressionAccess().getSecondExprAssignment_3(), "rule__CompassionExpression__SecondExprAssignment_3");
			builder.put(grammarAccess.getCompassionExpressionAccess().getSemicolonAssignment_5(), "rule__CompassionExpression__SemicolonAssignment_5");
			builder.put(grammarAccess.getCtlSpecificationAccess().getSpecKeyWordAssignment_0(), "rule__CtlSpecification__SpecKeyWordAssignment_0");
			builder.put(grammarAccess.getCtlSpecificationAccess().getNameKeyWordAssignment_1_0(), "rule__CtlSpecification__NameKeyWordAssignment_1_0");
			builder.put(grammarAccess.getCtlSpecificationAccess().getNameAssignment_1_1(), "rule__CtlSpecification__NameAssignment_1_1");
			builder.put(grammarAccess.getCtlSpecificationAccess().getCtlExpressionAssignment_2(), "rule__CtlSpecification__CtlExpressionAssignment_2");
			builder.put(grammarAccess.getCtlSpecificationAccess().getSemicolonAssignment_3(), "rule__CtlSpecification__SemicolonAssignment_3");
			builder.put(grammarAccess.getPslSpecificationAccess().getNameKeyWordAssignment_1_0(), "rule__PslSpecification__NameKeyWordAssignment_1_0");
			builder.put(grammarAccess.getPslSpecificationAccess().getNameAssignment_1_1(), "rule__PslSpecification__NameAssignment_1_1");
			builder.put(grammarAccess.getPslSpecificationAccess().getPslExpressionAssignment_2(), "rule__PslSpecification__PslExpressionAssignment_2");
			builder.put(grammarAccess.getPslSpecificationAccess().getSemicolonAssignment_3(), "rule__PslSpecification__SemicolonAssignment_3");
			builder.put(grammarAccess.getInvarSpecificationAccess().getInvarSpecAssignment_0_1(), "rule__InvarSpecification__InvarSpecAssignment_0_1");
			builder.put(grammarAccess.getInvarSpecificationAccess().getNameAssignment_1_1(), "rule__InvarSpecification__NameAssignment_1_1");
			builder.put(grammarAccess.getInvarSpecificationAccess().getInvarSpecAssignment_1_3(), "rule__InvarSpecification__InvarSpecAssignment_1_3");
			builder.put(grammarAccess.getInvarSpecificationAccess().getSemicolonAssignment_1_4(), "rule__InvarSpecification__SemicolonAssignment_1_4");
			builder.put(grammarAccess.getIsaDeclarationAccess().getIdAssignment_1(), "rule__IsaDeclaration__IdAssignment_1");
			builder.put(grammarAccess.getLtlSpecificationAccess().getNameIdAssignment_1_0(), "rule__LtlSpecification__NameIdAssignment_1_0");
			builder.put(grammarAccess.getLtlSpecificationAccess().getNameAssignment_1_1(), "rule__LtlSpecification__NameAssignment_1_1");
			builder.put(grammarAccess.getLtlSpecificationAccess().getLtlExpressionAssignment_2(), "rule__LtlSpecification__LtlExpressionAssignment_2");
			builder.put(grammarAccess.getLtlSpecificationAccess().getSemicolonAssignment_3(), "rule__LtlSpecification__SemicolonAssignment_3");
			builder.put(grammarAccess.getSimpleTypeAccess().getWordNumberAssignment_1_1_2(), "rule__SimpleType__WordNumberAssignment_1_1_2");
			builder.put(grammarAccess.getSimpleTypeAccess().getUWordNumberAssignment_2_1_3(), "rule__SimpleType__UWordNumberAssignment_2_1_3");
			builder.put(grammarAccess.getSimpleTypeAccess().getSignedNumberAssignment_3_1_2(), "rule__SimpleType__SignedNumberAssignment_3_1_2");
			builder.put(grammarAccess.getSimpleTypeAccess().getValAssignment_4_2(), "rule__SimpleType__ValAssignment_4_2");
			builder.put(grammarAccess.getSimpleTypeAccess().getValAssignment_4_3_1(), "rule__SimpleType__ValAssignment_4_3_1");
			builder.put(grammarAccess.getSimpleTypeAccess().getLowAssignment_5_1_0(), "rule__SimpleType__LowAssignment_5_1_0");
			builder.put(grammarAccess.getSimpleTypeAccess().getHighAssignment_5_1_2(), "rule__SimpleType__HighAssignment_5_1_2");
			builder.put(grammarAccess.getSimpleTypeAccess().getLowerBoundAssignment_6_2(), "rule__SimpleType__LowerBoundAssignment_6_2");
			builder.put(grammarAccess.getSimpleTypeAccess().getUpperBoundAssignment_6_4(), "rule__SimpleType__UpperBoundAssignment_6_4");
			builder.put(grammarAccess.getSimpleTypeAccess().getTypeAssignment_6_6(), "rule__SimpleType__TypeAssignment_6_6");
			builder.put(grammarAccess.getModuleTypeAccess().getModuleAssignment_0_1_1(), "rule__ModuleType__ModuleAssignment_0_1_1");
			builder.put(grammarAccess.getModuleTypeAccess().getParamsAssignment_0_1_2_1_0(), "rule__ModuleType__ParamsAssignment_0_1_2_1_0");
			builder.put(grammarAccess.getModuleTypeAccess().getParAssignment_0_1_2_1_1(), "rule__ModuleType__ParAssignment_0_1_2_1_1");
			builder.put(grammarAccess.getModuleTypeAccess().getParamsAssignment_0_1_2_2_1(), "rule__ModuleType__ParamsAssignment_0_1_2_2_1");
			builder.put(grammarAccess.getModuleTypeAccess().getModuleAssignment_1_1_0(), "rule__ModuleType__ModuleAssignment_1_1_0");
			builder.put(grammarAccess.getModuleTypeAccess().getParamsAssignment_1_1_1_1_0(), "rule__ModuleType__ParamsAssignment_1_1_1_1_0");
			builder.put(grammarAccess.getModuleTypeAccess().getParAssignment_1_1_1_1_1(), "rule__ModuleType__ParAssignment_1_1_1_1_1");
			builder.put(grammarAccess.getModuleTypeAccess().getParamsAssignment_1_1_1_2_1(), "rule__ModuleType__ParamsAssignment_1_1_1_2_1");
			builder.put(grammarAccess.getValAccess().getNameAssignment_1_0(), "rule__Val__NameAssignment_1_0");
			builder.put(grammarAccess.getValAccess().getNumAssignment_1_1(), "rule__Val__NumAssignment_1_1");
			builder.put(grammarAccess.getNextExpressionAccess().getSimpleExpressionAssignment(), "rule__NextExpression__SimpleExpressionAssignment");
			builder.put(grammarAccess.getLTLbinExpressionAccess().getOperatorAssignment_1_1(), "rule__LTLbinExpression__OperatorAssignment_1_1");
			builder.put(grammarAccess.getLTLbinExpressionAccess().getRightAssignment_1_2(), "rule__LTLbinExpression__RightAssignment_1_2");
			builder.put(grammarAccess.getImpliesExpressionAccess().getOperatorAssignment_1_1(), "rule__ImpliesExpression__OperatorAssignment_1_1");
			builder.put(grammarAccess.getImpliesExpressionAccess().getRightAssignment_1_2(), "rule__ImpliesExpression__RightAssignment_1_2");
			builder.put(grammarAccess.getIffExpressionAccess().getOperatorAssignment_1_1(), "rule__IffExpression__OperatorAssignment_1_1");
			builder.put(grammarAccess.getIffExpressionAccess().getRightAssignment_1_2(), "rule__IffExpression__RightAssignment_1_2");
			builder.put(grammarAccess.getOrExpressionAccess().getOperatorAssignment_1_1(), "rule__OrExpression__OperatorAssignment_1_1");
			builder.put(grammarAccess.getOrExpressionAccess().getRightAssignment_1_2(), "rule__OrExpression__RightAssignment_1_2");
			builder.put(grammarAccess.getAndExpressionAccess().getOperatorAssignment_1_1(), "rule__AndExpression__OperatorAssignment_1_1");
			builder.put(grammarAccess.getAndExpressionAccess().getRightAssignment_1_2(), "rule__AndExpression__RightAssignment_1_2");
			builder.put(grammarAccess.getComparisonExpressionAccess().getOperatorAssignment_1_1(), "rule__ComparisonExpression__OperatorAssignment_1_1");
			builder.put(grammarAccess.getComparisonExpressionAccess().getRightAssignment_1_2(), "rule__ComparisonExpression__RightAssignment_1_2");
			builder.put(grammarAccess.getInExpressionAccess().getOpAssignment_1_1(), "rule__InExpression__OpAssignment_1_1");
			builder.put(grammarAccess.getInExpressionAccess().getRightAssignment_1_2(), "rule__InExpression__RightAssignment_1_2");
			builder.put(grammarAccess.getUnionExpressionAccess().getOpAssignment_1_1(), "rule__UnionExpression__OpAssignment_1_1");
			builder.put(grammarAccess.getUnionExpressionAccess().getRightAssignment_1_2(), "rule__UnionExpression__RightAssignment_1_2");
			builder.put(grammarAccess.getRightShiftAccess().getOpAssignment_1_1(), "rule__RightShift__OpAssignment_1_1");
			builder.put(grammarAccess.getRightShiftAccess().getRightAssignment_1_2(), "rule__RightShift__RightAssignment_1_2");
			builder.put(grammarAccess.getLeftShiftAccess().getOpAssignment_1_1(), "rule__LeftShift__OpAssignment_1_1");
			builder.put(grammarAccess.getLeftShiftAccess().getRightAssignment_1_2(), "rule__LeftShift__RightAssignment_1_2");
			builder.put(grammarAccess.getMinusAccess().getOpAssignment_1_1(), "rule__Minus__OpAssignment_1_1");
			builder.put(grammarAccess.getMinusAccess().getRightAssignment_1_2(), "rule__Minus__RightAssignment_1_2");
			builder.put(grammarAccess.getPlusAccess().getOpAssignment_1_1(), "rule__Plus__OpAssignment_1_1");
			builder.put(grammarAccess.getPlusAccess().getRightAssignment_1_2(), "rule__Plus__RightAssignment_1_2");
			builder.put(grammarAccess.getMultAccess().getOpAssignment_1_1(), "rule__Mult__OpAssignment_1_1");
			builder.put(grammarAccess.getMultAccess().getRightAssignment_1_2(), "rule__Mult__RightAssignment_1_2");
			builder.put(grammarAccess.getModAccess().getOpAssignment_1_1(), "rule__Mod__OpAssignment_1_1");
			builder.put(grammarAccess.getModAccess().getRightAssignment_1_2(), "rule__Mod__RightAssignment_1_2");
			builder.put(grammarAccess.getWordConcatenationAccess().getOpAssignment_1_1(), "rule__WordConcatenation__OpAssignment_1_1");
			builder.put(grammarAccess.getWordConcatenationAccess().getRightAssignment_1_2(), "rule__WordConcatenation__RightAssignment_1_2");
			builder.put(grammarAccess.getDivAccess().getOpAssignment_1_1(), "rule__Div__OpAssignment_1_1");
			builder.put(grammarAccess.getDivAccess().getRightAssignment_1_2(), "rule__Div__RightAssignment_1_2");
			builder.put(grammarAccess.getNotOrTerminalSimpleExpressionAccess().getExpAssignment_0_2(), "rule__NotOrTerminalSimpleExpression__ExpAssignment_0_2");
			builder.put(grammarAccess.getTerminalSimpleExpressionAccess().getIsNextAssignment_0_1(), "rule__TerminalSimpleExpression__IsNextAssignment_0_1");
			builder.put(grammarAccess.getTerminalSimpleExpressionAccess().getSimpleExpressionAssignment_0_3(), "rule__TerminalSimpleExpression__SimpleExpressionAssignment_0_3");
			builder.put(grammarAccess.getTerminalSimpleExpressionAccess().getOperatorAssignment_1_1_0(), "rule__TerminalSimpleExpression__OperatorAssignment_1_1_0");
			builder.put(grammarAccess.getTerminalSimpleExpressionAccess().getSimpleExpressionAssignment_1_1_1(), "rule__TerminalSimpleExpression__SimpleExpressionAssignment_1_1_1");
			builder.put(grammarAccess.getTerminalSimpleExpressionAccess().getValueAssignment_3_1(), "rule__TerminalSimpleExpression__ValueAssignment_3_1");
			builder.put(grammarAccess.getTerminalSimpleExpressionAccess().getArrayAssignment_3_2_1(), "rule__TerminalSimpleExpression__ArrayAssignment_3_2_1");
			builder.put(grammarAccess.getTerminalSimpleExpressionAccess().getValueAssignment_4_1(), "rule__TerminalSimpleExpression__ValueAssignment_4_1");
			builder.put(grammarAccess.getTerminalSimpleExpressionAccess().getDottedAssignment_4_2_0_1(), "rule__TerminalSimpleExpression__DottedAssignment_4_2_0_1");
			builder.put(grammarAccess.getTerminalSimpleExpressionAccess().getArrayAssignment_4_2_1_1(), "rule__TerminalSimpleExpression__ArrayAssignment_4_2_1_1");
			builder.put(grammarAccess.getTerminalSimpleExpressionAccess().getValAssignment_5_1(), "rule__TerminalSimpleExpression__ValAssignment_5_1");
			builder.put(grammarAccess.getTerminalSimpleExpressionAccess().getValparamAssignment_6_1(), "rule__TerminalSimpleExpression__ValparamAssignment_6_1");
			builder.put(grammarAccess.getTerminalSimpleExpressionAccess().getValueAssignment_7_1(), "rule__TerminalSimpleExpression__ValueAssignment_7_1");
			builder.put(grammarAccess.getTerminalSimpleExpressionAccess().getValueAssignment_8_1(), "rule__TerminalSimpleExpression__ValueAssignment_8_1");
			builder.put(grammarAccess.getTerminalSimpleExpressionAccess().getValueAssignment_9_1(), "rule__TerminalSimpleExpression__ValueAssignment_9_1");
			builder.put(grammarAccess.getTerminalSimpleExpressionAccess().getValueAssignment_10_1(), "rule__TerminalSimpleExpression__ValueAssignment_10_1");
			builder.put(grammarAccess.getTerminalSimpleExpressionAccess().getValueAssignment_11_1(), "rule__TerminalSimpleExpression__ValueAssignment_11_1");
			builder.put(grammarAccess.getTerminalSimpleExpressionAccess().getSetElementAssignment_12_2(), "rule__TerminalSimpleExpression__SetElementAssignment_12_2");
			builder.put(grammarAccess.getTerminalSimpleExpressionAccess().getSetElementAssignment_12_3_1(), "rule__TerminalSimpleExpression__SetElementAssignment_12_3_1");
			builder.put(grammarAccess.getTerminalSimpleExpressionAccess().getValueAssignment_13_1(), "rule__TerminalSimpleExpression__ValueAssignment_13_1");
			builder.put(grammarAccess.getTerminalSimpleExpressionAccess().getLowerBoundAssignment_14_1(), "rule__TerminalSimpleExpression__LowerBoundAssignment_14_1");
			builder.put(grammarAccess.getTerminalSimpleExpressionAccess().getUpperBoundAssignment_14_3(), "rule__TerminalSimpleExpression__UpperBoundAssignment_14_3");
			builder.put(grammarAccess.getTerminalSimpleExpressionAccess().getEaAssignment_15_1(), "rule__TerminalSimpleExpression__EaAssignment_15_1");
			builder.put(grammarAccess.getTerminalSimpleExpressionAccess().getArgAssignment_15_3(), "rule__TerminalSimpleExpression__ArgAssignment_15_3");
			builder.put(grammarAccess.getTerminalSimpleExpressionAccess().getFunctionAssignment_16_1(), "rule__TerminalSimpleExpression__FunctionAssignment_16_1");
			builder.put(grammarAccess.getTerminalSimpleExpressionAccess().getArgAssignment_16_3(), "rule__TerminalSimpleExpression__ArgAssignment_16_3");
			builder.put(grammarAccess.getTerminalSimpleExpressionAccess().getArgAssignment_17_3(), "rule__TerminalSimpleExpression__ArgAssignment_17_3");
			builder.put(grammarAccess.getFormalParameterAccess().getNameAssignment_0(), "rule__FormalParameter__NameAssignment_0");
			builder.put(grammarAccess.getCaseSimpleExpressionAccess().getBranchesAssignment_1(), "rule__CaseSimpleExpression__BranchesAssignment_1");
			builder.put(grammarAccess.getCaseSimpleAssignementExpressionAccess().getCaseAssignment_0(), "rule__CaseSimpleAssignementExpression__CaseAssignment_0");
			builder.put(grammarAccess.getCaseSimpleAssignementExpressionAccess().getAssignmentAssignment_2(), "rule__CaseSimpleAssignementExpression__AssignmentAssignment_2");
			builder.put(grammarAccess.getCTLExpressionAccess().getSimpleExpressionAssignment(), "rule__CTLExpression__SimpleExpressionAssignment");
			builder.put(grammarAccess.getPSLExpressionAccess().getSimpleExpressionAssignment(), "rule__PSLExpression__SimpleExpressionAssignment");
			builder.put(grammarAccess.getLTLExpressionAccess().getSimpleExpressionAssignment(), "rule__LTLExpression__SimpleExpressionAssignment");
			builder.put(grammarAccess.getRangeExpressionAccess().getLowerAssignment_0(), "rule__RangeExpression__LowerAssignment_0");
			builder.put(grammarAccess.getRangeExpressionAccess().getUpperAssignment_2(), "rule__RangeExpression__UpperAssignment_2");
			builder.put(grammarAccess.getRTCTLExpressionAccess().getCtlExpressionAssignment_0_1(), "rule__RTCTLExpression__CtlExpressionAssignment_0_1");
			builder.put(grammarAccess.getRTCTLExpressionAccess().getUnaryAssignment_1_1(), "rule__RTCTLExpression__UnaryAssignment_1_1");
			builder.put(grammarAccess.getRTCTLExpressionAccess().getRangeAssignment_1_2(), "rule__RTCTLExpression__RangeAssignment_1_2");
			builder.put(grammarAccess.getRTCTLExpressionAccess().getRctlAssignment_1_3(), "rule__RTCTLExpression__RctlAssignment_1_3");
			builder.put(grammarAccess.getComputeSpecificationAccess().getMinMaxAssignment_1(), "rule__ComputeSpecification__MinMaxAssignment_1");
			builder.put(grammarAccess.getComputeSpecificationAccess().getFirstAssignment_3(), "rule__ComputeSpecification__FirstAssignment_3");
			builder.put(grammarAccess.getComputeSpecificationAccess().getSecondAssignment_5(), "rule__ComputeSpecification__SecondAssignment_5");
			builder.put(grammarAccess.getComputeSpecificationAccess().getSemicolonAssignment_7(), "rule__ComputeSpecification__SemicolonAssignment_7");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private NuSMVGrammarAccess grammarAccess;

	@Override
	protected InternalNuSMVParser createParser() {
		InternalNuSMVParser result = new InternalNuSMVParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] {  };
	}

	public NuSMVGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(NuSMVGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
