/*
 * generated by Xtext
 */
package org.xtext.nusmv.language.scoping

import java.util.ArrayList

import org.eclipse.xtext.scoping.IScope
import org.eclipse.xtext.scoping.Scopes
import org.eclipse.xtext.scoping.impl.SimpleScope
import org.eclipse.xtext.resource.EObjectDescription
import org.eclipse.xtext.resource.IEObjectDescription
import org.eclipse.xtext.naming.QualifiedName

import org.eclipse.emf.common.util.EList
import org.eclipse.emf.ecore.EReference

import org.xtext.nusmv.language.nuSMV.Module
import org.xtext.nusmv.language.nuSMV.VarBody
import org.xtext.nusmv.language.nuSMV.ModuleElement
import org.xtext.nusmv.language.nuSMV.NuSmvModel
import org.xtext.nusmv.language.nuSMV.SetExpression
import org.xtext.nusmv.language.nuSMV.InitBody
import org.xtext.nusmv.language.nuSMV.VariableDeclaration
import org.xtext.nusmv.language.nuSMV.AssignBody
import org.xtext.nusmv.language.nuSMV.ModuleType
import org.xtext.nusmv.language.nuSMV.SimpleType
import org.xtext.nusmv.language.nuSMV.SyncrProcessType
import org.xtext.nusmv.language.nuSMV.AsyncrProcessType
import org.xtext.nusmv.language.nuSMV.Type
import org.xtext.nusmv.language.nuSMV.SimpleExpression
import org.xtext.nusmv.language.services.NuSMVGrammarAccess.TerminalSimpleExpressionElements

/**
 * This class contains custom scoping description.
 * 
 * see : http://www.eclipse.org/Xtext/documentation.html#scoping
 * on how and when to use it 
 *
 */
class NuSMVScopeProvider extends org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider {
	
	def IScope scope_InitBody_vars(AssignBody ctx, EReference ref) {
		var EList<Module> modules
		var EList<VarBody> modelems
		var EList<ModuleElement> prova
		modules = (ctx.eContainer as NuSmvModel).modules
		for (module : modules){
			for(varb :module.moduleElement){
				if(varb instanceof VariableDeclaration){
				  modelems.addAll((varb).vars)
				  }
				  
		}
		prova.addAll(module.moduleElement);
		}

		System.out.println("PPPPPPPPPPP"+modules);
		
		return Scopes.scopeFor(modules);

	}
	
	ArrayList<EObjectDescription> list
	
	def Iterable<IEObjectDescription> getVarsNames(NuSmvModel m){
		list = new ArrayList<EObjectDescription>();
		for (module : m.modules){
			if (module instanceof VariableDeclaration)
			list.add(new EObjectDescription(QualifiedName.create(module.name),module,null));
		}
		return null;
	}
	
	def IScope scope_InitBody(InitBody ctx, EReference ref) {
		return new SimpleScope (getVarsNames(ctx.eContainer as NuSmvModel));
	}

	def IScope scope_InitBody_vars(InitBody ctx, EReference ref) {
		
		System.out.println("ci sono ");
		return new SimpleScope(null);
	}


//	def Iterable<IEObjectDescription> getVarsNames(NuSmvModel m) {
//   		return list;
//   	}
	
	def IScope scope_InitBody_initial(InitBody ctx, EReference ref) {
		val head = ctx.initial
		switch(head){
			SetExpression : Scopes.scopeFor(head.setElement)
			default : IScope::NULLSCOPE
   		}
   	}
	
	def IScope scope_VarBody_params(VarBody ctx, EReference ref) {
		val head = ctx.type
		switch(head){
			ModuleType : {if(head instanceof AsyncrProcessType) Scopes.scopeFor(head.params)
					 if(head instanceof SyncrProcessType) Scopes.scopeFor(head.params)}
			SimpleType : IScope::NULLSCOPE
			default : IScope::NULLSCOPE
   		}
   	}
	
	def IScope scope_Type_params(Type ctx, EReference ref) {
		switch(ctx){
		ModuleType : Scopes.scopeFor(ctx.params)
		default : IScope::NULLSCOPE
   	}
   }
	
	def IScope scope_Service_extras(SimpleExpression ctx, EReference ref) {
		if(ctx instanceof TerminalSimpleExpressionElements)
		return Scopes.scopeFor(ctx.eContainingFeature.EAnnotations)
		else
       return IScope::NULLSCOPE
   }
	
//	def IScope scope_DotExpression_tail(DotExpression exp, EReference ref) {
//       	val head = exp.ref;
//       	switch (head) {
//           	EntityRef : Scopes::scopeFor(head.entity.features)
//           	DotExpression : {
//               	val tail = head.tail
//               	switch (tail) {
//                   	Attribute : IScope::NULLSCOPE
//                   	Reference : Scopes::scopeFor(tail.type.features)
//             	  	default: IScope::NULLSCOPE
//               	}
//           	}
//            
//           	default: IScope::NULLSCOPE
//       	}
//   	}

}
