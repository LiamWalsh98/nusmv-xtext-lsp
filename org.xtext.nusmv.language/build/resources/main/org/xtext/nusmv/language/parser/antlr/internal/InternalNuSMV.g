/*
 * generated by Xtext 2.21.0
 */
grammar InternalNuSMV;

options {
	superClass=AbstractInternalAntlrParser;
	backtrack=true;
}

@lexer::header {
package org.xtext.nusmv.language.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.nusmv.language.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.nusmv.language.services.NuSMVGrammarAccess;

}

@parser::members {

/*
  This grammar contains a lot of empty actions to work around a bug in ANTLR.
  Otherwise the ANTLR tool will create synpreds that cannot be compiled in some rare cases.
*/

 	private NuSMVGrammarAccess grammarAccess;

    public InternalNuSMVParser(TokenStream input, NuSMVGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "NuSmvModel";
   	}

   	@Override
   	protected NuSMVGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleNuSmvModel
entryRuleNuSmvModel returns [EObject current=null]@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT");
}:
	{ newCompositeNode(grammarAccess.getNuSmvModelRule()); }
	iv_ruleNuSmvModel=ruleNuSmvModel
	{ $current=$iv_ruleNuSmvModel.current; }
	EOF;
finally {
	myHiddenTokenState.restore();
}

// Rule NuSmvModel
ruleNuSmvModel returns [EObject current=null]
@init {
	enterRule();
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT");
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getNuSmvModelAccess().getModulesModuleParserRuleCall_0());
			}
			lv_modules_0_0=ruleModule
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getNuSmvModelRule());
				}
				add(
					$current,
					"modules",
					lv_modules_0_0,
					"org.xtext.nusmv.language.NuSMV.Module");
				afterParserOrEnumRuleCall();
			}
		)
	)*
;
finally {
	myHiddenTokenState.restore();
}

// Entry rule entryRuleModule
entryRuleModule returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModuleRule()); }
	iv_ruleModule=ruleModule
	{ $current=$iv_ruleModule.current; }
	EOF;

// Rule Module
ruleModule returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='MODULE'
		{
			newLeafNode(otherlv_0, grammarAccess.getModuleAccess().getMODULEKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getModuleAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getModuleRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.xtext.nusmv.language.NuSMV.ID");
				}
			)
		)
		(
			otherlv_2='('
			{
				newLeafNode(otherlv_2, grammarAccess.getModuleAccess().getLeftParenthesisKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getModuleAccess().getParamsFormalParameterParserRuleCall_2_1_0());
					}
					lv_params_3_0=ruleFormalParameter
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getModuleRule());
						}
						add(
							$current,
							"params",
							lv_params_3_0,
							"org.xtext.nusmv.language.NuSMV.FormalParameter");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_4=','
				{
					newLeafNode(otherlv_4, grammarAccess.getModuleAccess().getCommaKeyword_2_2_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getModuleAccess().getParamsFormalParameterParserRuleCall_2_2_1_0());
						}
						lv_params_5_0=ruleFormalParameter
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getModuleRule());
							}
							add(
								$current,
								"params",
								lv_params_5_0,
								"org.xtext.nusmv.language.NuSMV.FormalParameter");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
			otherlv_6=')'
			{
				newLeafNode(otherlv_6, grammarAccess.getModuleAccess().getRightParenthesisKeyword_2_3());
			}
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getModuleAccess().getModuleElementModuleElementParserRuleCall_3_0());
				}
				lv_moduleElement_7_0=ruleModuleElement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModuleRule());
					}
					add(
						$current,
						"moduleElement",
						lv_moduleElement_7_0,
						"org.xtext.nusmv.language.NuSMV.ModuleElement");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleModuleElement
entryRuleModuleElement returns [EObject current=null]@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT");
}:
	{ newCompositeNode(grammarAccess.getModuleElementRule()); }
	iv_ruleModuleElement=ruleModuleElement
	{ $current=$iv_ruleModuleElement.current; }
	EOF;
finally {
	myHiddenTokenState.restore();
}

// Rule ModuleElement
ruleModuleElement returns [EObject current=null]
@init {
	enterRule();
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT");
}
@after {
	leaveRule();
}:
	(
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getModuleElementAccess().getVariableDeclarationParserRuleCall_0());
		}
		this_VariableDeclaration_0=ruleVariableDeclaration
		{
			$current = $this_VariableDeclaration_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getModuleElementAccess().getIVariableDeclarationParserRuleCall_1());
		}
		this_IVariableDeclaration_1=ruleIVariableDeclaration
		{
			$current = $this_IVariableDeclaration_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getModuleElementAccess().getFrozenVariableDeclarationParserRuleCall_2());
		}
		this_FrozenVariableDeclaration_2=ruleFrozenVariableDeclaration
		{
			$current = $this_FrozenVariableDeclaration_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getModuleElementAccess().getDefineDeclarationParserRuleCall_3());
		}
		this_DefineDeclaration_3=ruleDefineDeclaration
		{
			$current = $this_DefineDeclaration_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getModuleElementAccess().getConstantsDeclarationParserRuleCall_4());
		}
		this_ConstantsDeclaration_4=ruleConstantsDeclaration
		{
			$current = $this_ConstantsDeclaration_4.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getModuleElementAccess().getAssignConstraintParserRuleCall_5());
		}
		this_AssignConstraint_5=ruleAssignConstraint
		{
			$current = $this_AssignConstraint_5.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getModuleElementAccess().getTransConstraintParserRuleCall_6());
		}
		this_TransConstraint_6=ruleTransConstraint
		{
			$current = $this_TransConstraint_6.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getModuleElementAccess().getInitConstraintParserRuleCall_7());
		}
		this_InitConstraint_7=ruleInitConstraint
		{
			$current = $this_InitConstraint_7.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getModuleElementAccess().getInvarConstraintParserRuleCall_8());
		}
		this_InvarConstraint_8=ruleInvarConstraint
		{
			$current = $this_InvarConstraint_8.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getModuleElementAccess().getFairnessConstraintParserRuleCall_9());
		}
		this_FairnessConstraint_9=ruleFairnessConstraint
		{
			$current = $this_FairnessConstraint_9.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getModuleElementAccess().getCtlSpecificationParserRuleCall_10());
		}
		this_CtlSpecification_10=ruleCtlSpecification
		{
			$current = $this_CtlSpecification_10.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getModuleElementAccess().getPslSpecificationParserRuleCall_11());
		}
		this_PslSpecification_11=rulePslSpecification
		{
			$current = $this_PslSpecification_11.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getModuleElementAccess().getInvarSpecificationParserRuleCall_12());
		}
		this_InvarSpecification_12=ruleInvarSpecification
		{
			$current = $this_InvarSpecification_12.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getModuleElementAccess().getLtlSpecificationParserRuleCall_13());
		}
		this_LtlSpecification_13=ruleLtlSpecification
		{
			$current = $this_LtlSpecification_13.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getModuleElementAccess().getIsaDeclarationParserRuleCall_14());
		}
		this_IsaDeclaration_14=ruleIsaDeclaration
		{
			$current = $this_IsaDeclaration_14.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getModuleElementAccess().getComputeSpecificationParserRuleCall_15());
		}
		this_ComputeSpecification_15=ruleComputeSpecification
		{
			$current = $this_ComputeSpecification_15.current;
			afterParserOrEnumRuleCall();
		}
	)
;
finally {
	myHiddenTokenState.restore();
}

// Entry rule entryRuleVariableDeclaration
entryRuleVariableDeclaration returns [EObject current=null]@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT");
}:
	{ newCompositeNode(grammarAccess.getVariableDeclarationRule()); }
	iv_ruleVariableDeclaration=ruleVariableDeclaration
	{ $current=$iv_ruleVariableDeclaration.current; }
	EOF;
finally {
	myHiddenTokenState.restore();
}

// Rule VariableDeclaration
ruleVariableDeclaration returns [EObject current=null]
@init {
	enterRule();
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT");
}
@after {
	leaveRule();
}:
	(
		otherlv_0='VAR'
		{
			newLeafNode(otherlv_0, grammarAccess.getVariableDeclarationAccess().getVARKeyword_0());
		}
		(
			{
				/* */
			}
			{
				$current = forceCreateModelElement(
					grammarAccess.getVariableDeclarationAccess().getVariableDeclarationAction_1(),
					$current);
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getVariableDeclarationAccess().getVarsVarBodyParserRuleCall_2_0());
				}
				lv_vars_2_0=ruleVarBody
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVariableDeclarationRule());
					}
					add(
						$current,
						"vars",
						lv_vars_2_0,
						"org.xtext.nusmv.language.NuSMV.VarBody");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;
finally {
	myHiddenTokenState.restore();
}

// Entry rule entryRuleIVariableDeclaration
entryRuleIVariableDeclaration returns [EObject current=null]@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT");
}:
	{ newCompositeNode(grammarAccess.getIVariableDeclarationRule()); }
	iv_ruleIVariableDeclaration=ruleIVariableDeclaration
	{ $current=$iv_ruleIVariableDeclaration.current; }
	EOF;
finally {
	myHiddenTokenState.restore();
}

// Rule IVariableDeclaration
ruleIVariableDeclaration returns [EObject current=null]
@init {
	enterRule();
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT");
}
@after {
	leaveRule();
}:
	(
		otherlv_0='IVAR'
		{
			newLeafNode(otherlv_0, grammarAccess.getIVariableDeclarationAccess().getIVARKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getIVariableDeclarationAccess().getVarsVarBodyParserRuleCall_1_0());
				}
				lv_vars_1_0=ruleVarBody
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIVariableDeclarationRule());
					}
					add(
						$current,
						"vars",
						lv_vars_1_0,
						"org.xtext.nusmv.language.NuSMV.VarBody");
					afterParserOrEnumRuleCall();
				}
			)
		)+
	)
;
finally {
	myHiddenTokenState.restore();
}

// Entry rule entryRuleFrozenVariableDeclaration
entryRuleFrozenVariableDeclaration returns [EObject current=null]@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT");
}:
	{ newCompositeNode(grammarAccess.getFrozenVariableDeclarationRule()); }
	iv_ruleFrozenVariableDeclaration=ruleFrozenVariableDeclaration
	{ $current=$iv_ruleFrozenVariableDeclaration.current; }
	EOF;
finally {
	myHiddenTokenState.restore();
}

// Rule FrozenVariableDeclaration
ruleFrozenVariableDeclaration returns [EObject current=null]
@init {
	enterRule();
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT");
}
@after {
	leaveRule();
}:
	(
		otherlv_0='FROZENVAR'
		{
			newLeafNode(otherlv_0, grammarAccess.getFrozenVariableDeclarationAccess().getFROZENVARKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getFrozenVariableDeclarationAccess().getVarsVarBodyParserRuleCall_1_0());
				}
				lv_vars_1_0=ruleVarBody
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFrozenVariableDeclarationRule());
					}
					add(
						$current,
						"vars",
						lv_vars_1_0,
						"org.xtext.nusmv.language.NuSMV.VarBody");
					afterParserOrEnumRuleCall();
				}
			)
		)+
	)
;
finally {
	myHiddenTokenState.restore();
}

// Entry rule entryRuleVarBody
entryRuleVarBody returns [EObject current=null]@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT");
}:
	{ newCompositeNode(grammarAccess.getVarBodyRule()); }
	iv_ruleVarBody=ruleVarBody
	{ $current=$iv_ruleVarBody.current; }
	EOF;
finally {
	myHiddenTokenState.restore();
}

// Rule VarBody
ruleVarBody returns [EObject current=null]
@init {
	enterRule();
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT");
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_ID
				{
					newLeafNode(lv_name_0_0, grammarAccess.getVarBodyAccess().getNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getVarBodyRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"org.xtext.nusmv.language.NuSMV.ID");
				}
			)
		)
		otherlv_1=':'
		{
			newLeafNode(otherlv_1, grammarAccess.getVarBodyAccess().getColonKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getVarBodyAccess().getTypeTypeParserRuleCall_2_0());
				}
				lv_type_2_0=ruleType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVarBodyRule());
					}
					set(
						$current,
						"type",
						lv_type_2_0,
						"org.xtext.nusmv.language.NuSMV.Type");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				lv_semicolon_3_0=';'
				{
					newLeafNode(lv_semicolon_3_0, grammarAccess.getVarBodyAccess().getSemicolonSemicolonKeyword_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getVarBodyRule());
					}
					setWithLastConsumed($current, "semicolon", true, ";");
				}
			)
		)
	)
;
finally {
	myHiddenTokenState.restore();
}

// Entry rule entryRuleDefineDeclaration
entryRuleDefineDeclaration returns [EObject current=null]@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT");
}:
	{ newCompositeNode(grammarAccess.getDefineDeclarationRule()); }
	iv_ruleDefineDeclaration=ruleDefineDeclaration
	{ $current=$iv_ruleDefineDeclaration.current; }
	EOF;
finally {
	myHiddenTokenState.restore();
}

// Rule DefineDeclaration
ruleDefineDeclaration returns [EObject current=null]
@init {
	enterRule();
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT");
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_define_0_0='DEFINE'
				{
					newLeafNode(lv_define_0_0, grammarAccess.getDefineDeclarationAccess().getDefineDEFINEKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDefineDeclarationRule());
					}
					setWithLastConsumed($current, "define", lv_define_0_0, "DEFINE");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getDefineDeclarationAccess().getDefineBodiesDefineBodyParserRuleCall_1_0());
				}
				lv_defineBodies_1_0=ruleDefineBody
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDefineDeclarationRule());
					}
					add(
						$current,
						"defineBodies",
						lv_defineBodies_1_0,
						"org.xtext.nusmv.language.NuSMV.DefineBody");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;
finally {
	myHiddenTokenState.restore();
}

// Entry rule entryRuleDefineBody
entryRuleDefineBody returns [EObject current=null]@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT");
}:
	{ newCompositeNode(grammarAccess.getDefineBodyRule()); }
	iv_ruleDefineBody=ruleDefineBody
	{ $current=$iv_ruleDefineBody.current; }
	EOF;
finally {
	myHiddenTokenState.restore();
}

// Rule DefineBody
ruleDefineBody returns [EObject current=null]
@init {
	enterRule();
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT");
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_var_0_0=RULE_ID
				{
					newLeafNode(lv_var_0_0, grammarAccess.getDefineBodyAccess().getVarIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDefineBodyRule());
					}
					setWithLastConsumed(
						$current,
						"var",
						lv_var_0_0,
						"org.xtext.nusmv.language.NuSMV.ID");
				}
			)
		)
		otherlv_1=':='
		{
			newLeafNode(otherlv_1, grammarAccess.getDefineBodyAccess().getColonEqualsSignKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getDefineBodyAccess().getAssignmentSimpleExpressionParserRuleCall_2_0());
				}
				lv_assignment_2_0=ruleSimpleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDefineBodyRule());
					}
					set(
						$current,
						"assignment",
						lv_assignment_2_0,
						"org.xtext.nusmv.language.NuSMV.SimpleExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				lv_semicolon_3_0=';'
				{
					newLeafNode(lv_semicolon_3_0, grammarAccess.getDefineBodyAccess().getSemicolonSemicolonKeyword_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDefineBodyRule());
					}
					setWithLastConsumed($current, "semicolon", true, ";");
				}
			)
		)
	)
;
finally {
	myHiddenTokenState.restore();
}

// Entry rule entryRuleConstantsDeclaration
entryRuleConstantsDeclaration returns [EObject current=null]@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT");
}:
	{ newCompositeNode(grammarAccess.getConstantsDeclarationRule()); }
	iv_ruleConstantsDeclaration=ruleConstantsDeclaration
	{ $current=$iv_ruleConstantsDeclaration.current; }
	EOF;
finally {
	myHiddenTokenState.restore();
}

// Rule ConstantsDeclaration
ruleConstantsDeclaration returns [EObject current=null]
@init {
	enterRule();
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT");
}
@after {
	leaveRule();
}:
	(
		otherlv_0='CONSTANTS'
		{
			newLeafNode(otherlv_0, grammarAccess.getConstantsDeclarationAccess().getCONSTANTSKeyword_0());
		}
		(
			(
				lv_constants_1_0=RULE_ID
				{
					newLeafNode(lv_constants_1_0, grammarAccess.getConstantsDeclarationAccess().getConstantsIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getConstantsDeclarationRule());
					}
					addWithLastConsumed(
						$current,
						"constants",
						lv_constants_1_0,
						"org.xtext.nusmv.language.NuSMV.ID");
				}
			)
		)
		(
			otherlv_2=','
			{
				newLeafNode(otherlv_2, grammarAccess.getConstantsDeclarationAccess().getCommaKeyword_2_0());
			}
			(
				(
					lv_constants_3_0=RULE_ID
					{
						newLeafNode(lv_constants_3_0, grammarAccess.getConstantsDeclarationAccess().getConstantsIDTerminalRuleCall_2_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getConstantsDeclarationRule());
						}
						addWithLastConsumed(
							$current,
							"constants",
							lv_constants_3_0,
							"org.xtext.nusmv.language.NuSMV.ID");
					}
				)
			)
		)*
		(
			(
				lv_semicolon_4_0=';'
				{
					newLeafNode(lv_semicolon_4_0, grammarAccess.getConstantsDeclarationAccess().getSemicolonSemicolonKeyword_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getConstantsDeclarationRule());
					}
					setWithLastConsumed($current, "semicolon", true, ";");
				}
			)
		)
	)
;
finally {
	myHiddenTokenState.restore();
}

// Entry rule entryRuleAssignConstraint
entryRuleAssignConstraint returns [EObject current=null]@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT");
}:
	{ newCompositeNode(grammarAccess.getAssignConstraintRule()); }
	iv_ruleAssignConstraint=ruleAssignConstraint
	{ $current=$iv_ruleAssignConstraint.current; }
	EOF;
finally {
	myHiddenTokenState.restore();
}

// Rule AssignConstraint
ruleAssignConstraint returns [EObject current=null]
@init {
	enterRule();
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT");
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_assign_0_0='ASSIGN'
				{
					newLeafNode(lv_assign_0_0, grammarAccess.getAssignConstraintAccess().getAssignASSIGNKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAssignConstraintRule());
					}
					setWithLastConsumed($current, "assign", lv_assign_0_0, "ASSIGN");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getAssignConstraintAccess().getBodiesAssignBodyParserRuleCall_1_0());
				}
				lv_bodies_1_0=ruleAssignBody
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAssignConstraintRule());
					}
					add(
						$current,
						"bodies",
						lv_bodies_1_0,
						"org.xtext.nusmv.language.NuSMV.AssignBody");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;
finally {
	myHiddenTokenState.restore();
}

// Entry rule entryRuleAssignBody
entryRuleAssignBody returns [EObject current=null]@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT");
}:
	{ newCompositeNode(grammarAccess.getAssignBodyRule()); }
	iv_ruleAssignBody=ruleAssignBody
	{ $current=$iv_ruleAssignBody.current; }
	EOF;
finally {
	myHiddenTokenState.restore();
}

// Rule AssignBody
ruleAssignBody returns [EObject current=null]
@init {
	enterRule();
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT");
}
@after {
	leaveRule();
}:
	(
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getAssignBodyAccess().getVarBodyAssignParserRuleCall_0());
		}
		this_VarBodyAssign_0=ruleVarBodyAssign
		{
			$current = $this_VarBodyAssign_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getAssignBodyAccess().getInitBodyParserRuleCall_1());
		}
		this_InitBody_1=ruleInitBody
		{
			$current = $this_InitBody_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getAssignBodyAccess().getNextBodyParserRuleCall_2());
		}
		this_NextBody_2=ruleNextBody
		{
			$current = $this_NextBody_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;
finally {
	myHiddenTokenState.restore();
}

// Entry rule entryRuleVarBodyAssign
entryRuleVarBodyAssign returns [EObject current=null]@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT");
}:
	{ newCompositeNode(grammarAccess.getVarBodyAssignRule()); }
	iv_ruleVarBodyAssign=ruleVarBodyAssign
	{ $current=$iv_ruleVarBodyAssign.current; }
	EOF;
finally {
	myHiddenTokenState.restore();
}

// Rule VarBodyAssign
ruleVarBodyAssign returns [EObject current=null]
@init {
	enterRule();
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT");
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getVarBodyAssignAccess().getVarVariableIDParserRuleCall_0_0());
				}
				lv_var_0_0=ruleVariableID
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVarBodyAssignRule());
					}
					set(
						$current,
						"var",
						lv_var_0_0,
						"org.xtext.nusmv.language.NuSMV.VariableID");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1=':='
		{
			newLeafNode(otherlv_1, grammarAccess.getVarBodyAssignAccess().getColonEqualsSignKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getVarBodyAssignAccess().getAssignmentSimpleExpressionParserRuleCall_2_0());
				}
				lv_assignment_2_0=ruleSimpleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVarBodyAssignRule());
					}
					set(
						$current,
						"assignment",
						lv_assignment_2_0,
						"org.xtext.nusmv.language.NuSMV.SimpleExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				lv_semicolon_3_0=';'
				{
					newLeafNode(lv_semicolon_3_0, grammarAccess.getVarBodyAssignAccess().getSemicolonSemicolonKeyword_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getVarBodyAssignRule());
					}
					setWithLastConsumed($current, "semicolon", true, ";");
				}
			)
		)
	)
;
finally {
	myHiddenTokenState.restore();
}

// Entry rule entryRuleInitBody
entryRuleInitBody returns [EObject current=null]@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT");
}:
	{ newCompositeNode(grammarAccess.getInitBodyRule()); }
	iv_ruleInitBody=ruleInitBody
	{ $current=$iv_ruleInitBody.current; }
	EOF;
finally {
	myHiddenTokenState.restore();
}

// Rule InitBody
ruleInitBody returns [EObject current=null]
@init {
	enterRule();
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT");
}
@after {
	leaveRule();
}:
	(
		otherlv_0='init'
		{
			newLeafNode(otherlv_0, grammarAccess.getInitBodyAccess().getInitKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getInitBodyAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getInitBodyAccess().getVarVariableIDParserRuleCall_2_0());
				}
				lv_var_2_0=ruleVariableID
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getInitBodyRule());
					}
					set(
						$current,
						"var",
						lv_var_2_0,
						"org.xtext.nusmv.language.NuSMV.VariableID");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getInitBodyAccess().getRightParenthesisKeyword_3());
		}
		otherlv_4=':='
		{
			newLeafNode(otherlv_4, grammarAccess.getInitBodyAccess().getColonEqualsSignKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getInitBodyAccess().getInitialSimpleExpressionParserRuleCall_5_0());
				}
				lv_initial_5_0=ruleSimpleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getInitBodyRule());
					}
					set(
						$current,
						"initial",
						lv_initial_5_0,
						"org.xtext.nusmv.language.NuSMV.SimpleExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				lv_semicolon_6_0=';'
				{
					newLeafNode(lv_semicolon_6_0, grammarAccess.getInitBodyAccess().getSemicolonSemicolonKeyword_6_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getInitBodyRule());
					}
					setWithLastConsumed($current, "semicolon", true, ";");
				}
			)
		)
	)
;
finally {
	myHiddenTokenState.restore();
}

// Entry rule entryRuleNextBody
entryRuleNextBody returns [EObject current=null]@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT");
}:
	{ newCompositeNode(grammarAccess.getNextBodyRule()); }
	iv_ruleNextBody=ruleNextBody
	{ $current=$iv_ruleNextBody.current; }
	EOF;
finally {
	myHiddenTokenState.restore();
}

// Rule NextBody
ruleNextBody returns [EObject current=null]
@init {
	enterRule();
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT");
}
@after {
	leaveRule();
}:
	(
		otherlv_0='next'
		{
			newLeafNode(otherlv_0, grammarAccess.getNextBodyAccess().getNextKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getNextBodyAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getNextBodyAccess().getVarVariableIDParserRuleCall_2_0());
				}
				lv_var_2_0=ruleVariableID
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getNextBodyRule());
					}
					set(
						$current,
						"var",
						lv_var_2_0,
						"org.xtext.nusmv.language.NuSMV.VariableID");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getNextBodyAccess().getRightParenthesisKeyword_3());
		}
		otherlv_4=':='
		{
			newLeafNode(otherlv_4, grammarAccess.getNextBodyAccess().getColonEqualsSignKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getNextBodyAccess().getNextNextExpressionParserRuleCall_5_0());
				}
				lv_next_5_0=ruleNextExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getNextBodyRule());
					}
					set(
						$current,
						"next",
						lv_next_5_0,
						"org.xtext.nusmv.language.NuSMV.NextExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				lv_semicolon_6_0=';'
				{
					newLeafNode(lv_semicolon_6_0, grammarAccess.getNextBodyAccess().getSemicolonSemicolonKeyword_6_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getNextBodyRule());
					}
					setWithLastConsumed($current, "semicolon", true, ";");
				}
			)
		)
	)
;
finally {
	myHiddenTokenState.restore();
}

// Entry rule entryRuleTransConstraint
entryRuleTransConstraint returns [EObject current=null]@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT");
}:
	{ newCompositeNode(grammarAccess.getTransConstraintRule()); }
	iv_ruleTransConstraint=ruleTransConstraint
	{ $current=$iv_ruleTransConstraint.current; }
	EOF;
finally {
	myHiddenTokenState.restore();
}

// Rule TransConstraint
ruleTransConstraint returns [EObject current=null]
@init {
	enterRule();
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT");
}
@after {
	leaveRule();
}:
	(
		otherlv_0='TRANS'
		{
			newLeafNode(otherlv_0, grammarAccess.getTransConstraintAccess().getTRANSKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getTransConstraintAccess().getTransExpressionSimpleExpressionParserRuleCall_1_0());
				}
				lv_transExpression_1_0=ruleSimpleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTransConstraintRule());
					}
					set(
						$current,
						"transExpression",
						lv_transExpression_1_0,
						"org.xtext.nusmv.language.NuSMV.SimpleExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				lv_semicolon_2_0=';'
				{
					newLeafNode(lv_semicolon_2_0, grammarAccess.getTransConstraintAccess().getSemicolonSemicolonKeyword_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTransConstraintRule());
					}
					setWithLastConsumed($current, "semicolon", true, ";");
				}
			)
		)?
	)
;
finally {
	myHiddenTokenState.restore();
}

// Entry rule entryRuleInitConstraint
entryRuleInitConstraint returns [EObject current=null]@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT");
}:
	{ newCompositeNode(grammarAccess.getInitConstraintRule()); }
	iv_ruleInitConstraint=ruleInitConstraint
	{ $current=$iv_ruleInitConstraint.current; }
	EOF;
finally {
	myHiddenTokenState.restore();
}

// Rule InitConstraint
ruleInitConstraint returns [EObject current=null]
@init {
	enterRule();
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT");
}
@after {
	leaveRule();
}:
	(
		otherlv_0='INIT'
		{
			newLeafNode(otherlv_0, grammarAccess.getInitConstraintAccess().getINITKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getInitConstraintAccess().getInitExpressionSimpleExpressionParserRuleCall_1_0());
				}
				lv_initExpression_1_0=ruleSimpleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getInitConstraintRule());
					}
					set(
						$current,
						"initExpression",
						lv_initExpression_1_0,
						"org.xtext.nusmv.language.NuSMV.SimpleExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				lv_semicolon_2_0=';'
				{
					newLeafNode(lv_semicolon_2_0, grammarAccess.getInitConstraintAccess().getSemicolonSemicolonKeyword_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getInitConstraintRule());
					}
					setWithLastConsumed($current, "semicolon", true, ";");
				}
			)
		)?
	)
;
finally {
	myHiddenTokenState.restore();
}

// Entry rule entryRuleInvarConstraint
entryRuleInvarConstraint returns [EObject current=null]@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT");
}:
	{ newCompositeNode(grammarAccess.getInvarConstraintRule()); }
	iv_ruleInvarConstraint=ruleInvarConstraint
	{ $current=$iv_ruleInvarConstraint.current; }
	EOF;
finally {
	myHiddenTokenState.restore();
}

// Rule InvarConstraint
ruleInvarConstraint returns [EObject current=null]
@init {
	enterRule();
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT");
}
@after {
	leaveRule();
}:
	(
		otherlv_0='INVAR'
		{
			newLeafNode(otherlv_0, grammarAccess.getInvarConstraintAccess().getINVARKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getInvarConstraintAccess().getInvarExpressionSimpleExpressionParserRuleCall_1_0());
				}
				lv_invarExpression_1_0=ruleSimpleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getInvarConstraintRule());
					}
					set(
						$current,
						"invarExpression",
						lv_invarExpression_1_0,
						"org.xtext.nusmv.language.NuSMV.SimpleExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				lv_semicolon_2_0=';'
				{
					newLeafNode(lv_semicolon_2_0, grammarAccess.getInvarConstraintAccess().getSemicolonSemicolonKeyword_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getInvarConstraintRule());
					}
					setWithLastConsumed($current, "semicolon", true, ";");
				}
			)
		)?
	)
;
finally {
	myHiddenTokenState.restore();
}

// Entry rule entryRuleFairnessConstraint
entryRuleFairnessConstraint returns [EObject current=null]@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT");
}:
	{ newCompositeNode(grammarAccess.getFairnessConstraintRule()); }
	iv_ruleFairnessConstraint=ruleFairnessConstraint
	{ $current=$iv_ruleFairnessConstraint.current; }
	EOF;
finally {
	myHiddenTokenState.restore();
}

// Rule FairnessConstraint
ruleFairnessConstraint returns [EObject current=null]
@init {
	enterRule();
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT");
}
@after {
	leaveRule();
}:
	(
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getFairnessConstraintAccess().getFairnessExpressionParserRuleCall_0());
		}
		this_FairnessExpression_0=ruleFairnessExpression
		{
			$current = $this_FairnessExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getFairnessConstraintAccess().getJusticeExpressionParserRuleCall_1());
		}
		this_JusticeExpression_1=ruleJusticeExpression
		{
			$current = $this_JusticeExpression_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getFairnessConstraintAccess().getCompassionExpressionParserRuleCall_2());
		}
		this_CompassionExpression_2=ruleCompassionExpression
		{
			$current = $this_CompassionExpression_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;
finally {
	myHiddenTokenState.restore();
}

// Entry rule entryRuleFairnessExpression
entryRuleFairnessExpression returns [EObject current=null]@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT");
}:
	{ newCompositeNode(grammarAccess.getFairnessExpressionRule()); }
	iv_ruleFairnessExpression=ruleFairnessExpression
	{ $current=$iv_ruleFairnessExpression.current; }
	EOF;
finally {
	myHiddenTokenState.restore();
}

// Rule FairnessExpression
ruleFairnessExpression returns [EObject current=null]
@init {
	enterRule();
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT");
}
@after {
	leaveRule();
}:
	(
		otherlv_0='FAIRNESS'
		{
			newLeafNode(otherlv_0, grammarAccess.getFairnessExpressionAccess().getFAIRNESSKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getFairnessExpressionAccess().getFairnessExprSimpleExpressionParserRuleCall_1_0());
				}
				lv_fairnessExpr_1_0=ruleSimpleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFairnessExpressionRule());
					}
					set(
						$current,
						"fairnessExpr",
						lv_fairnessExpr_1_0,
						"org.xtext.nusmv.language.NuSMV.SimpleExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				lv_semicolon_2_0=';'
				{
					newLeafNode(lv_semicolon_2_0, grammarAccess.getFairnessExpressionAccess().getSemicolonSemicolonKeyword_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFairnessExpressionRule());
					}
					setWithLastConsumed($current, "semicolon", true, ";");
				}
			)
		)?
	)
;
finally {
	myHiddenTokenState.restore();
}

// Entry rule entryRuleJusticeExpression
entryRuleJusticeExpression returns [EObject current=null]@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT");
}:
	{ newCompositeNode(grammarAccess.getJusticeExpressionRule()); }
	iv_ruleJusticeExpression=ruleJusticeExpression
	{ $current=$iv_ruleJusticeExpression.current; }
	EOF;
finally {
	myHiddenTokenState.restore();
}

// Rule JusticeExpression
ruleJusticeExpression returns [EObject current=null]
@init {
	enterRule();
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT");
}
@after {
	leaveRule();
}:
	(
		otherlv_0='JUSTICE'
		{
			newLeafNode(otherlv_0, grammarAccess.getJusticeExpressionAccess().getJUSTICEKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getJusticeExpressionAccess().getJusticeExprSimpleExpressionParserRuleCall_1_0());
				}
				lv_justiceExpr_1_0=ruleSimpleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getJusticeExpressionRule());
					}
					set(
						$current,
						"justiceExpr",
						lv_justiceExpr_1_0,
						"org.xtext.nusmv.language.NuSMV.SimpleExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				lv_semicolon_2_0=';'
				{
					newLeafNode(lv_semicolon_2_0, grammarAccess.getJusticeExpressionAccess().getSemicolonSemicolonKeyword_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getJusticeExpressionRule());
					}
					setWithLastConsumed($current, "semicolon", true, ";");
				}
			)
		)?
	)
;
finally {
	myHiddenTokenState.restore();
}

// Entry rule entryRuleCompassionExpression
entryRuleCompassionExpression returns [EObject current=null]@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT");
}:
	{ newCompositeNode(grammarAccess.getCompassionExpressionRule()); }
	iv_ruleCompassionExpression=ruleCompassionExpression
	{ $current=$iv_ruleCompassionExpression.current; }
	EOF;
finally {
	myHiddenTokenState.restore();
}

// Rule CompassionExpression
ruleCompassionExpression returns [EObject current=null]
@init {
	enterRule();
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT");
}
@after {
	leaveRule();
}:
	(
		otherlv_0='COMPASSION ('
		{
			newLeafNode(otherlv_0, grammarAccess.getCompassionExpressionAccess().getCOMPASSIONKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCompassionExpressionAccess().getFirstExprSimpleExpressionParserRuleCall_1_0());
				}
				lv_firstExpr_1_0=ruleSimpleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCompassionExpressionRule());
					}
					set(
						$current,
						"firstExpr",
						lv_firstExpr_1_0,
						"org.xtext.nusmv.language.NuSMV.SimpleExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2=','
		{
			newLeafNode(otherlv_2, grammarAccess.getCompassionExpressionAccess().getCommaKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCompassionExpressionAccess().getSecondExprSimpleExpressionParserRuleCall_3_0());
				}
				lv_secondExpr_3_0=ruleSimpleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCompassionExpressionRule());
					}
					set(
						$current,
						"secondExpr",
						lv_secondExpr_3_0,
						"org.xtext.nusmv.language.NuSMV.SimpleExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4=')'
		{
			newLeafNode(otherlv_4, grammarAccess.getCompassionExpressionAccess().getRightParenthesisKeyword_4());
		}
		(
			(
				lv_semicolon_5_0=';'
				{
					newLeafNode(lv_semicolon_5_0, grammarAccess.getCompassionExpressionAccess().getSemicolonSemicolonKeyword_5_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getCompassionExpressionRule());
					}
					setWithLastConsumed($current, "semicolon", true, ";");
				}
			)
		)?
	)
;
finally {
	myHiddenTokenState.restore();
}

// Entry rule entryRuleCtlSpecification
entryRuleCtlSpecification returns [EObject current=null]@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT");
}:
	{ newCompositeNode(grammarAccess.getCtlSpecificationRule()); }
	iv_ruleCtlSpecification=ruleCtlSpecification
	{ $current=$iv_ruleCtlSpecification.current; }
	EOF;
finally {
	myHiddenTokenState.restore();
}

// Rule CtlSpecification
ruleCtlSpecification returns [EObject current=null]
@init {
	enterRule();
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT");
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					lv_specKeyWord_0_1='CTLSPEC'
					{
						newLeafNode(lv_specKeyWord_0_1, grammarAccess.getCtlSpecificationAccess().getSpecKeyWordCTLSPECKeyword_0_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getCtlSpecificationRule());
						}
						setWithLastConsumed($current, "specKeyWord", lv_specKeyWord_0_1, null);
					}
					    |
					lv_specKeyWord_0_2='SPEC'
					{
						newLeafNode(lv_specKeyWord_0_2, grammarAccess.getCtlSpecificationAccess().getSpecKeyWordSPECKeyword_0_0_1());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getCtlSpecificationRule());
						}
						setWithLastConsumed($current, "specKeyWord", lv_specKeyWord_0_2, null);
					}
				)
			)
		)
		(
			(
				(
					lv_nameKeyWord_1_0='NAME'
					{
						newLeafNode(lv_nameKeyWord_1_0, grammarAccess.getCtlSpecificationAccess().getNameKeyWordNAMEKeyword_1_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getCtlSpecificationRule());
						}
						setWithLastConsumed($current, "nameKeyWord", true, "NAME");
					}
				)
			)
			(
				(
					lv_name_2_0=RULE_ID
					{
						newLeafNode(lv_name_2_0, grammarAccess.getCtlSpecificationAccess().getNameIDTerminalRuleCall_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getCtlSpecificationRule());
						}
						setWithLastConsumed(
							$current,
							"name",
							lv_name_2_0,
							"org.xtext.nusmv.language.NuSMV.ID");
					}
				)
			)
			otherlv_3=':='
			{
				newLeafNode(otherlv_3, grammarAccess.getCtlSpecificationAccess().getColonEqualsSignKeyword_1_2());
			}
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getCtlSpecificationAccess().getCtlExpressionCTLExpressionParserRuleCall_2_0());
				}
				lv_ctlExpression_4_0=ruleCTLExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCtlSpecificationRule());
					}
					set(
						$current,
						"ctlExpression",
						lv_ctlExpression_4_0,
						"org.xtext.nusmv.language.NuSMV.CTLExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				lv_semicolon_5_0=';'
				{
					newLeafNode(lv_semicolon_5_0, grammarAccess.getCtlSpecificationAccess().getSemicolonSemicolonKeyword_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getCtlSpecificationRule());
					}
					setWithLastConsumed($current, "semicolon", true, ";");
				}
			)
		)?
	)
;
finally {
	myHiddenTokenState.restore();
}

// Entry rule entryRulePslSpecification
entryRulePslSpecification returns [EObject current=null]@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT");
}:
	{ newCompositeNode(grammarAccess.getPslSpecificationRule()); }
	iv_rulePslSpecification=rulePslSpecification
	{ $current=$iv_rulePslSpecification.current; }
	EOF;
finally {
	myHiddenTokenState.restore();
}

// Rule PslSpecification
rulePslSpecification returns [EObject current=null]
@init {
	enterRule();
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT");
}
@after {
	leaveRule();
}:
	(
		otherlv_0='PSLSPEC'
		{
			newLeafNode(otherlv_0, grammarAccess.getPslSpecificationAccess().getPSLSPECKeyword_0());
		}
		(
			(
				(
					lv_nameKeyWord_1_0='NAME'
					{
						newLeafNode(lv_nameKeyWord_1_0, grammarAccess.getPslSpecificationAccess().getNameKeyWordNAMEKeyword_1_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getPslSpecificationRule());
						}
						setWithLastConsumed($current, "nameKeyWord", true, "NAME");
					}
				)
			)
			(
				(
					lv_name_2_0=RULE_ID
					{
						newLeafNode(lv_name_2_0, grammarAccess.getPslSpecificationAccess().getNameIDTerminalRuleCall_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getPslSpecificationRule());
						}
						setWithLastConsumed(
							$current,
							"name",
							lv_name_2_0,
							"org.xtext.nusmv.language.NuSMV.ID");
					}
				)
			)
			otherlv_3=':='
			{
				newLeafNode(otherlv_3, grammarAccess.getPslSpecificationAccess().getColonEqualsSignKeyword_1_2());
			}
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getPslSpecificationAccess().getPslExpressionPSLExpressionParserRuleCall_2_0());
				}
				lv_pslExpression_4_0=rulePSLExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPslSpecificationRule());
					}
					set(
						$current,
						"pslExpression",
						lv_pslExpression_4_0,
						"org.xtext.nusmv.language.NuSMV.PSLExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				lv_semicolon_5_0=';'
				{
					newLeafNode(lv_semicolon_5_0, grammarAccess.getPslSpecificationAccess().getSemicolonSemicolonKeyword_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPslSpecificationRule());
					}
					setWithLastConsumed($current, "semicolon", true, ";");
				}
			)
		)?
	)
;
finally {
	myHiddenTokenState.restore();
}

// Entry rule entryRuleInvarSpecification
entryRuleInvarSpecification returns [EObject current=null]@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT");
}:
	{ newCompositeNode(grammarAccess.getInvarSpecificationRule()); }
	iv_ruleInvarSpecification=ruleInvarSpecification
	{ $current=$iv_ruleInvarSpecification.current; }
	EOF;
finally {
	myHiddenTokenState.restore();
}

// Rule InvarSpecification
ruleInvarSpecification returns [EObject current=null]
@init {
	enterRule();
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT");
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='INVARSPEC'
			{
				newLeafNode(otherlv_0, grammarAccess.getInvarSpecificationAccess().getINVARSPECKeyword_0_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getInvarSpecificationAccess().getInvarSpecNextExpressionParserRuleCall_0_1_0());
					}
					lv_invarSpec_1_0=ruleNextExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getInvarSpecificationRule());
						}
						set(
							$current,
							"invarSpec",
							lv_invarSpec_1_0,
							"org.xtext.nusmv.language.NuSMV.NextExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_2=';'
			{
				newLeafNode(otherlv_2, grammarAccess.getInvarSpecificationAccess().getSemicolonKeyword_0_2());
			}
		)
		    |
		(
			otherlv_3='INVARSPEC'
			{
				newLeafNode(otherlv_3, grammarAccess.getInvarSpecificationAccess().getINVARSPECKeyword_1_0());
			}
			(
				(
					lv_name_4_0=RULE_ID
					{
						newLeafNode(lv_name_4_0, grammarAccess.getInvarSpecificationAccess().getNameIDTerminalRuleCall_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getInvarSpecificationRule());
						}
						setWithLastConsumed(
							$current,
							"name",
							lv_name_4_0,
							"org.xtext.nusmv.language.NuSMV.ID");
					}
				)
			)
			otherlv_5=':='
			{
				newLeafNode(otherlv_5, grammarAccess.getInvarSpecificationAccess().getColonEqualsSignKeyword_1_2());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getInvarSpecificationAccess().getInvarSpecNextExpressionParserRuleCall_1_3_0());
					}
					lv_invarSpec_6_0=ruleNextExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getInvarSpecificationRule());
						}
						set(
							$current,
							"invarSpec",
							lv_invarSpec_6_0,
							"org.xtext.nusmv.language.NuSMV.NextExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					lv_semicolon_7_0=';'
					{
						newLeafNode(lv_semicolon_7_0, grammarAccess.getInvarSpecificationAccess().getSemicolonSemicolonKeyword_1_4_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getInvarSpecificationRule());
						}
						setWithLastConsumed($current, "semicolon", true, ";");
					}
				)
			)?
		)
	)
;
finally {
	myHiddenTokenState.restore();
}

// Entry rule entryRuleIsaDeclaration
entryRuleIsaDeclaration returns [EObject current=null]@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT");
}:
	{ newCompositeNode(grammarAccess.getIsaDeclarationRule()); }
	iv_ruleIsaDeclaration=ruleIsaDeclaration
	{ $current=$iv_ruleIsaDeclaration.current; }
	EOF;
finally {
	myHiddenTokenState.restore();
}

// Rule IsaDeclaration
ruleIsaDeclaration returns [EObject current=null]
@init {
	enterRule();
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT");
}
@after {
	leaveRule();
}:
	(
		otherlv_0='ISA'
		{
			newLeafNode(otherlv_0, grammarAccess.getIsaDeclarationAccess().getISAKeyword_0());
		}
		(
			(
				lv_id_1_0=RULE_ID
				{
					newLeafNode(lv_id_1_0, grammarAccess.getIsaDeclarationAccess().getIdIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getIsaDeclarationRule());
					}
					setWithLastConsumed(
						$current,
						"id",
						lv_id_1_0,
						"org.xtext.nusmv.language.NuSMV.ID");
				}
			)
		)
	)
;
finally {
	myHiddenTokenState.restore();
}

// Entry rule entryRuleLtlSpecification
entryRuleLtlSpecification returns [EObject current=null]@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT");
}:
	{ newCompositeNode(grammarAccess.getLtlSpecificationRule()); }
	iv_ruleLtlSpecification=ruleLtlSpecification
	{ $current=$iv_ruleLtlSpecification.current; }
	EOF;
finally {
	myHiddenTokenState.restore();
}

// Rule LtlSpecification
ruleLtlSpecification returns [EObject current=null]
@init {
	enterRule();
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT");
}
@after {
	leaveRule();
}:
	(
		otherlv_0='LTLSPEC'
		{
			newLeafNode(otherlv_0, grammarAccess.getLtlSpecificationAccess().getLTLSPECKeyword_0());
		}
		(
			(
				(
					lv_nameId_1_0='NAME'
					{
						newLeafNode(lv_nameId_1_0, grammarAccess.getLtlSpecificationAccess().getNameIdNAMEKeyword_1_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getLtlSpecificationRule());
						}
						setWithLastConsumed($current, "nameId", true, "NAME");
					}
				)
			)
			(
				(
					lv_name_2_0=RULE_ID
					{
						newLeafNode(lv_name_2_0, grammarAccess.getLtlSpecificationAccess().getNameIDTerminalRuleCall_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getLtlSpecificationRule());
						}
						setWithLastConsumed(
							$current,
							"name",
							lv_name_2_0,
							"org.xtext.nusmv.language.NuSMV.ID");
					}
				)
			)
			otherlv_3=':='
			{
				newLeafNode(otherlv_3, grammarAccess.getLtlSpecificationAccess().getColonEqualsSignKeyword_1_2());
			}
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getLtlSpecificationAccess().getLtlExpressionLTLExpressionParserRuleCall_2_0());
				}
				lv_ltlExpression_4_0=ruleLTLExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLtlSpecificationRule());
					}
					set(
						$current,
						"ltlExpression",
						lv_ltlExpression_4_0,
						"org.xtext.nusmv.language.NuSMV.LTLExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				lv_semicolon_5_0=';'
				{
					newLeafNode(lv_semicolon_5_0, grammarAccess.getLtlSpecificationAccess().getSemicolonSemicolonKeyword_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getLtlSpecificationRule());
					}
					setWithLastConsumed($current, "semicolon", true, ";");
				}
			)
		)?
	)
;
finally {
	myHiddenTokenState.restore();
}

// Entry rule entryRuleType
entryRuleType returns [EObject current=null]@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT");
}:
	{ newCompositeNode(grammarAccess.getTypeRule()); }
	iv_ruleType=ruleType
	{ $current=$iv_ruleType.current; }
	EOF;
finally {
	myHiddenTokenState.restore();
}

// Rule Type
ruleType returns [EObject current=null]
@init {
	enterRule();
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT");
}
@after {
	leaveRule();
}:
	(
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getTypeAccess().getSimpleTypeParserRuleCall_0());
		}
		this_SimpleType_0=ruleSimpleType
		{
			$current = $this_SimpleType_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getTypeAccess().getModuleTypeParserRuleCall_1());
		}
		this_ModuleType_1=ruleModuleType
		{
			$current = $this_ModuleType_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;
finally {
	myHiddenTokenState.restore();
}

// Entry rule entryRuleSimpleType
entryRuleSimpleType returns [EObject current=null]@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT");
}:
	{ newCompositeNode(grammarAccess.getSimpleTypeRule()); }
	iv_ruleSimpleType=ruleSimpleType
	{ $current=$iv_ruleSimpleType.current; }
	EOF;
finally {
	myHiddenTokenState.restore();
}

// Rule SimpleType
ruleSimpleType returns [EObject current=null]
@init {
	enterRule();
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT");
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					/* */
				}
				{
					$current = forceCreateModelElement(
						grammarAccess.getSimpleTypeAccess().getBooleanTypeAction_0_0(),
						$current);
				}
			)
			otherlv_1='boolean'
			{
				newLeafNode(otherlv_1, grammarAccess.getSimpleTypeAccess().getBooleanKeyword_0_1());
			}
		)
		    |
		(
			(
				{
					/* */
				}
				{
					$current = forceCreateModelElement(
						grammarAccess.getSimpleTypeAccess().getWordTypeAction_1_0(),
						$current);
				}
			)
			(
				otherlv_3='word'
				{
					newLeafNode(otherlv_3, grammarAccess.getSimpleTypeAccess().getWordKeyword_1_1_0());
				}
				otherlv_4='['
				{
					newLeafNode(otherlv_4, grammarAccess.getSimpleTypeAccess().getLeftSquareBracketKeyword_1_1_1());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getSimpleTypeAccess().getWordNumberNUMBERParserRuleCall_1_1_2_0());
						}
						lv_wordNumber_5_0=ruleNUMBER
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getSimpleTypeRule());
							}
							set(
								$current,
								"wordNumber",
								lv_wordNumber_5_0,
								"org.xtext.nusmv.language.NuSMV.NUMBER");
							afterParserOrEnumRuleCall();
						}
					)
				)
				otherlv_6=']'
				{
					newLeafNode(otherlv_6, grammarAccess.getSimpleTypeAccess().getRightSquareBracketKeyword_1_1_3());
				}
			)
		)
		    |
		(
			(
				{
					/* */
				}
				{
					$current = forceCreateModelElement(
						grammarAccess.getSimpleTypeAccess().getUnsignedWordTypeAction_2_0(),
						$current);
				}
			)
			(
				otherlv_8='unsigned'
				{
					newLeafNode(otherlv_8, grammarAccess.getSimpleTypeAccess().getUnsignedKeyword_2_1_0());
				}
				otherlv_9='word'
				{
					newLeafNode(otherlv_9, grammarAccess.getSimpleTypeAccess().getWordKeyword_2_1_1());
				}
				otherlv_10='['
				{
					newLeafNode(otherlv_10, grammarAccess.getSimpleTypeAccess().getLeftSquareBracketKeyword_2_1_2());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getSimpleTypeAccess().getUWordNumberNUMBERParserRuleCall_2_1_3_0());
						}
						lv_uWordNumber_11_0=ruleNUMBER
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getSimpleTypeRule());
							}
							set(
								$current,
								"uWordNumber",
								lv_uWordNumber_11_0,
								"org.xtext.nusmv.language.NuSMV.NUMBER");
							afterParserOrEnumRuleCall();
						}
					)
				)
				otherlv_12=']'
				{
					newLeafNode(otherlv_12, grammarAccess.getSimpleTypeAccess().getRightSquareBracketKeyword_2_1_4());
				}
			)
		)
		    |
		(
			(
				{
					/* */
				}
				{
					$current = forceCreateModelElement(
						grammarAccess.getSimpleTypeAccess().getSignedWordTypeAction_3_0(),
						$current);
				}
			)
			(
				otherlv_14='signed word'
				{
					newLeafNode(otherlv_14, grammarAccess.getSimpleTypeAccess().getSignedWordKeyword_3_1_0());
				}
				otherlv_15='['
				{
					newLeafNode(otherlv_15, grammarAccess.getSimpleTypeAccess().getLeftSquareBracketKeyword_3_1_1());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getSimpleTypeAccess().getSignedNumberNUMBERParserRuleCall_3_1_2_0());
						}
						lv_signedNumber_16_0=ruleNUMBER
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getSimpleTypeRule());
							}
							set(
								$current,
								"signedNumber",
								lv_signedNumber_16_0,
								"org.xtext.nusmv.language.NuSMV.NUMBER");
							afterParserOrEnumRuleCall();
						}
					)
				)
				otherlv_17=']'
				{
					newLeafNode(otherlv_17, grammarAccess.getSimpleTypeAccess().getRightSquareBracketKeyword_3_1_3());
				}
			)
		)
		    |
		(
			(
				{
					/* */
				}
				{
					$current = forceCreateModelElement(
						grammarAccess.getSimpleTypeAccess().getEnumTypeAction_4_0(),
						$current);
				}
			)
			otherlv_19='{'
			{
				newLeafNode(otherlv_19, grammarAccess.getSimpleTypeAccess().getLeftCurlyBracketKeyword_4_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getSimpleTypeAccess().getValValParserRuleCall_4_2_0());
					}
					lv_val_20_0=ruleVal
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSimpleTypeRule());
						}
						add(
							$current,
							"val",
							lv_val_20_0,
							"org.xtext.nusmv.language.NuSMV.Val");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_21=','
				{
					newLeafNode(otherlv_21, grammarAccess.getSimpleTypeAccess().getCommaKeyword_4_3_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getSimpleTypeAccess().getValValParserRuleCall_4_3_1_0());
						}
						lv_val_22_0=ruleVal
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getSimpleTypeRule());
							}
							add(
								$current,
								"val",
								lv_val_22_0,
								"org.xtext.nusmv.language.NuSMV.Val");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
			otherlv_23='}'
			{
				newLeafNode(otherlv_23, grammarAccess.getSimpleTypeAccess().getRightCurlyBracketKeyword_4_4());
			}
		)
		    |
		(
			(
				{
					/* */
				}
				{
					$current = forceCreateModelElement(
						grammarAccess.getSimpleTypeAccess().getIntervalTypeAction_5_0(),
						$current);
				}
			)
			(
				(
					(
						(
							{
								newCompositeNode(grammarAccess.getSimpleTypeAccess().getLowNUMBERParserRuleCall_5_1_0_0_0());
							}
							lv_low_25_1=ruleNUMBER
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getSimpleTypeRule());
								}
								set(
									$current,
									"low",
									lv_low_25_1,
									"org.xtext.nusmv.language.NuSMV.NUMBER");
								afterParserOrEnumRuleCall();
							}
							    |
							{
								newCompositeNode(grammarAccess.getSimpleTypeAccess().getLowVariableIDParserRuleCall_5_1_0_0_1());
							}
							lv_low_25_2=ruleVariableID
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getSimpleTypeRule());
								}
								set(
									$current,
									"low",
									lv_low_25_2,
									"org.xtext.nusmv.language.NuSMV.VariableID");
								afterParserOrEnumRuleCall();
							}
						)
					)
				)
				otherlv_26='..'
				{
					newLeafNode(otherlv_26, grammarAccess.getSimpleTypeAccess().getFullStopFullStopKeyword_5_1_1());
				}
				(
					(
						(
							{
								newCompositeNode(grammarAccess.getSimpleTypeAccess().getHighNUMBERParserRuleCall_5_1_2_0_0());
							}
							lv_high_27_1=ruleNUMBER
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getSimpleTypeRule());
								}
								set(
									$current,
									"high",
									lv_high_27_1,
									"org.xtext.nusmv.language.NuSMV.NUMBER");
								afterParserOrEnumRuleCall();
							}
							    |
							{
								newCompositeNode(grammarAccess.getSimpleTypeAccess().getHighVariableIDParserRuleCall_5_1_2_0_1());
							}
							lv_high_27_2=ruleVariableID
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getSimpleTypeRule());
								}
								set(
									$current,
									"high",
									lv_high_27_2,
									"org.xtext.nusmv.language.NuSMV.VariableID");
								afterParserOrEnumRuleCall();
							}
						)
					)
				)
			)
		)
		    |
		(
			(
				{
					/* */
				}
				{
					$current = forceCreateModelElement(
						grammarAccess.getSimpleTypeAccess().getArrayTypeAction_6_0(),
						$current);
				}
			)
			otherlv_29='array'
			{
				newLeafNode(otherlv_29, grammarAccess.getSimpleTypeAccess().getArrayKeyword_6_1());
			}
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getSimpleTypeAccess().getLowerBoundNUMBERParserRuleCall_6_2_0_0());
						}
						lv_lowerBound_30_1=ruleNUMBER
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getSimpleTypeRule());
							}
							set(
								$current,
								"lowerBound",
								lv_lowerBound_30_1,
								"org.xtext.nusmv.language.NuSMV.NUMBER");
							afterParserOrEnumRuleCall();
						}
						    |
						{
							newCompositeNode(grammarAccess.getSimpleTypeAccess().getLowerBoundVariableIDParserRuleCall_6_2_0_1());
						}
						lv_lowerBound_30_2=ruleVariableID
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getSimpleTypeRule());
							}
							set(
								$current,
								"lowerBound",
								lv_lowerBound_30_2,
								"org.xtext.nusmv.language.NuSMV.VariableID");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
			otherlv_31='..'
			{
				newLeafNode(otherlv_31, grammarAccess.getSimpleTypeAccess().getFullStopFullStopKeyword_6_3());
			}
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getSimpleTypeAccess().getUpperBoundNUMBERParserRuleCall_6_4_0_0());
						}
						lv_upperBound_32_1=ruleNUMBER
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getSimpleTypeRule());
							}
							set(
								$current,
								"upperBound",
								lv_upperBound_32_1,
								"org.xtext.nusmv.language.NuSMV.NUMBER");
							afterParserOrEnumRuleCall();
						}
						    |
						{
							newCompositeNode(grammarAccess.getSimpleTypeAccess().getUpperBoundVariableIDParserRuleCall_6_4_0_1());
						}
						lv_upperBound_32_2=ruleVariableID
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getSimpleTypeRule());
							}
							set(
								$current,
								"upperBound",
								lv_upperBound_32_2,
								"org.xtext.nusmv.language.NuSMV.VariableID");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
			otherlv_33='of'
			{
				newLeafNode(otherlv_33, grammarAccess.getSimpleTypeAccess().getOfKeyword_6_5());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getSimpleTypeAccess().getTypeSimpleTypeParserRuleCall_6_6_0());
					}
					lv_type_34_0=ruleSimpleType
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSimpleTypeRule());
						}
						set(
							$current,
							"type",
							lv_type_34_0,
							"org.xtext.nusmv.language.NuSMV.SimpleType");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;
finally {
	myHiddenTokenState.restore();
}

// Entry rule entryRuleModuleType
entryRuleModuleType returns [EObject current=null]@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT");
}:
	{ newCompositeNode(grammarAccess.getModuleTypeRule()); }
	iv_ruleModuleType=ruleModuleType
	{ $current=$iv_ruleModuleType.current; }
	EOF;
finally {
	myHiddenTokenState.restore();
}

// Rule ModuleType
ruleModuleType returns [EObject current=null]
@init {
	enterRule();
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT");
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					/* */
				}
				{
					$current = forceCreateModelElement(
						grammarAccess.getModuleTypeAccess().getAsyncrProcessTypeAction_0_0(),
						$current);
				}
			)
			(
				otherlv_1='process'
				{
					newLeafNode(otherlv_1, grammarAccess.getModuleTypeAccess().getProcessKeyword_0_1_0());
				}
				(
					(
						{
							/* */
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getModuleTypeRule());
							}
						}
						otherlv_2=RULE_ID
						{
							newLeafNode(otherlv_2, grammarAccess.getModuleTypeAccess().getModuleModuleCrossReference_0_1_1_0());
						}
					)
				)
				(
					otherlv_3='('
					{
						newLeafNode(otherlv_3, grammarAccess.getModuleTypeAccess().getLeftParenthesisKeyword_0_1_2_0());
					}
					(
						(
							(
								{
									newCompositeNode(grammarAccess.getModuleTypeAccess().getParamsSimpleExpressionParserRuleCall_0_1_2_1_0_0());
								}
								lv_params_4_0=ruleSimpleExpression
								{
									if ($current==null) {
										$current = createModelElementForParent(grammarAccess.getModuleTypeRule());
									}
									add(
										$current,
										"params",
										lv_params_4_0,
										"org.xtext.nusmv.language.NuSMV.SimpleExpression");
									afterParserOrEnumRuleCall();
								}
							)
						)
						    |
						(
							(
								{
									/* */
								}
								{
									if ($current==null) {
										$current = createModelElement(grammarAccess.getModuleTypeRule());
									}
								}
								otherlv_5=RULE_ID
								{
									newLeafNode(otherlv_5, grammarAccess.getModuleTypeAccess().getParVarBodyCrossReference_0_1_2_1_1_0());
								}
							)
						)
					)
					(
						otherlv_6=','
						{
							newLeafNode(otherlv_6, grammarAccess.getModuleTypeAccess().getCommaKeyword_0_1_2_2_0());
						}
						(
							(
								{
									newCompositeNode(grammarAccess.getModuleTypeAccess().getParamsSimpleExpressionParserRuleCall_0_1_2_2_1_0());
								}
								lv_params_7_0=ruleSimpleExpression
								{
									if ($current==null) {
										$current = createModelElementForParent(grammarAccess.getModuleTypeRule());
									}
									add(
										$current,
										"params",
										lv_params_7_0,
										"org.xtext.nusmv.language.NuSMV.SimpleExpression");
									afterParserOrEnumRuleCall();
								}
							)
						)
					)*
					otherlv_8=')'
					{
						newLeafNode(otherlv_8, grammarAccess.getModuleTypeAccess().getRightParenthesisKeyword_0_1_2_3());
					}
				)?
			)
		)
		    |
		(
			(
				{
					/* */
				}
				{
					$current = forceCreateModelElement(
						grammarAccess.getModuleTypeAccess().getSyncrProcessTypeAction_1_0(),
						$current);
				}
			)
			(
				(
					(
						{
							/* */
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getModuleTypeRule());
							}
						}
						otherlv_10=RULE_ID
						{
							newLeafNode(otherlv_10, grammarAccess.getModuleTypeAccess().getModuleModuleCrossReference_1_1_0_0());
						}
					)
				)
				(
					otherlv_11='('
					{
						newLeafNode(otherlv_11, grammarAccess.getModuleTypeAccess().getLeftParenthesisKeyword_1_1_1_0());
					}
					(
						(
							(
								{
									newCompositeNode(grammarAccess.getModuleTypeAccess().getParamsSimpleExpressionParserRuleCall_1_1_1_1_0_0());
								}
								lv_params_12_0=ruleSimpleExpression
								{
									if ($current==null) {
										$current = createModelElementForParent(grammarAccess.getModuleTypeRule());
									}
									add(
										$current,
										"params",
										lv_params_12_0,
										"org.xtext.nusmv.language.NuSMV.SimpleExpression");
									afterParserOrEnumRuleCall();
								}
							)
						)
						    |
						(
							(
								{
									/* */
								}
								{
									if ($current==null) {
										$current = createModelElement(grammarAccess.getModuleTypeRule());
									}
								}
								otherlv_13=RULE_ID
								{
									newLeafNode(otherlv_13, grammarAccess.getModuleTypeAccess().getParVarBodyCrossReference_1_1_1_1_1_0());
								}
							)
						)
					)
					(
						otherlv_14=','
						{
							newLeafNode(otherlv_14, grammarAccess.getModuleTypeAccess().getCommaKeyword_1_1_1_2_0());
						}
						(
							(
								{
									newCompositeNode(grammarAccess.getModuleTypeAccess().getParamsSimpleExpressionParserRuleCall_1_1_1_2_1_0());
								}
								lv_params_15_0=ruleSimpleExpression
								{
									if ($current==null) {
										$current = createModelElementForParent(grammarAccess.getModuleTypeRule());
									}
									add(
										$current,
										"params",
										lv_params_15_0,
										"org.xtext.nusmv.language.NuSMV.SimpleExpression");
									afterParserOrEnumRuleCall();
								}
							)
						)
					)*
					otherlv_16=')'
					{
						newLeafNode(otherlv_16, grammarAccess.getModuleTypeAccess().getRightParenthesisKeyword_1_1_1_3());
					}
				)?
			)
		)
	)
;
finally {
	myHiddenTokenState.restore();
}

// Entry rule entryRuleVal
entryRuleVal returns [EObject current=null]@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT");
}:
	{ newCompositeNode(grammarAccess.getValRule()); }
	iv_ruleVal=ruleVal
	{ $current=$iv_ruleVal.current; }
	EOF;
finally {
	myHiddenTokenState.restore();
}

// Rule Val
ruleVal returns [EObject current=null]
@init {
	enterRule();
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT");
}
@after {
	leaveRule();
}:
	(
		(
			{
				/* */
			}
			{
				$current = forceCreateModelElement(
					grammarAccess.getValAccess().getValAction_0(),
					$current);
			}
		)
		(
			(
				(
					lv_name_1_0=RULE_ID
					{
						newLeafNode(lv_name_1_0, grammarAccess.getValAccess().getNameIDTerminalRuleCall_1_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getValRule());
						}
						setWithLastConsumed(
							$current,
							"name",
							lv_name_1_0,
							"org.xtext.nusmv.language.NuSMV.ID");
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getValAccess().getNumNUMBERParserRuleCall_1_1_0());
					}
					lv_num_2_0=ruleNUMBER
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getValRule());
						}
						set(
							$current,
							"num",
							lv_num_2_0,
							"org.xtext.nusmv.language.NuSMV.NUMBER");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			otherlv_3='TRUE'
			{
				newLeafNode(otherlv_3, grammarAccess.getValAccess().getTRUEKeyword_1_2());
			}
			    |
			otherlv_4='FALSE'
			{
				newLeafNode(otherlv_4, grammarAccess.getValAccess().getFALSEKeyword_1_3());
			}
		)
	)
;
finally {
	myHiddenTokenState.restore();
}

// Entry rule entryRuleNextExpression
entryRuleNextExpression returns [EObject current=null]@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT");
}:
	{ newCompositeNode(grammarAccess.getNextExpressionRule()); }
	iv_ruleNextExpression=ruleNextExpression
	{ $current=$iv_ruleNextExpression.current; }
	EOF;
finally {
	myHiddenTokenState.restore();
}

// Rule NextExpression
ruleNextExpression returns [EObject current=null]
@init {
	enterRule();
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT");
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getNextExpressionAccess().getSimpleExpressionSimpleExpressionParserRuleCall_0());
			}
			lv_simpleExpression_0_0=ruleSimpleExpression
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getNextExpressionRule());
				}
				set(
					$current,
					"simpleExpression",
					lv_simpleExpression_0_0,
					"org.xtext.nusmv.language.NuSMV.SimpleExpression");
				afterParserOrEnumRuleCall();
			}
		)
	)
;
finally {
	myHiddenTokenState.restore();
}

// Entry rule entryRuleSimpleExpression
entryRuleSimpleExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSimpleExpressionRule()); }
	iv_ruleSimpleExpression=ruleSimpleExpression
	{ $current=$iv_ruleSimpleExpression.current; }
	EOF;

// Rule SimpleExpression
ruleSimpleExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(ruleImpliesExpression)=>
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getSimpleExpressionAccess().getLTLbinExpressionParserRuleCall());
		}
		this_LTLbinExpression_0=ruleLTLbinExpression
		{
			$current = $this_LTLbinExpression_0.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleLTLbinExpression
entryRuleLTLbinExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLTLbinExpressionRule()); }
	iv_ruleLTLbinExpression=ruleLTLbinExpression
	{ $current=$iv_ruleLTLbinExpression.current; }
	EOF;

// Rule LTLbinExpression
ruleLTLbinExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(ruleImpliesExpression)=>
			{
				/* */
			}
			{
				newCompositeNode(grammarAccess.getLTLbinExpressionAccess().getImpliesExpressionParserRuleCall_0());
			}
			this_ImpliesExpression_0=ruleImpliesExpression
			{
				$current = $this_ImpliesExpression_0.current;
				afterParserOrEnumRuleCall();
			}
		)
		(
			(
				{
					/* */
				}
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getLTLbinExpressionAccess().getBinaryExpressionLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getLTLbinExpressionAccess().getOperatorLTLbinoperatorsEnumRuleCall_1_1_0());
					}
					lv_operator_2_0=ruleLTLbinoperators
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getLTLbinExpressionRule());
						}
						set(
							$current,
							"operator",
							lv_operator_2_0,
							"org.xtext.nusmv.language.NuSMV.LTLbinoperators");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(ruleIffExpression)=>
				(
					{
						newCompositeNode(grammarAccess.getLTLbinExpressionAccess().getRightImpliesExpressionParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleImpliesExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getLTLbinExpressionRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"org.xtext.nusmv.language.NuSMV.ImpliesExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleImpliesExpression
entryRuleImpliesExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getImpliesExpressionRule()); }
	iv_ruleImpliesExpression=ruleImpliesExpression
	{ $current=$iv_ruleImpliesExpression.current; }
	EOF;

// Rule ImpliesExpression
ruleImpliesExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(ruleIffExpression)=>
			{
				/* */
			}
			{
				newCompositeNode(grammarAccess.getImpliesExpressionAccess().getIffExpressionParserRuleCall_0());
			}
			this_IffExpression_0=ruleIffExpression
			{
				$current = $this_IffExpression_0.current;
				afterParserOrEnumRuleCall();
			}
		)
		(
			(
				{
					/* */
				}
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getImpliesExpressionAccess().getBinaryExpressionLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getImpliesExpressionAccess().getOperatorImpliesoperatorEnumRuleCall_1_1_0());
					}
					lv_operator_2_0=ruleimpliesoperator
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getImpliesExpressionRule());
						}
						set(
							$current,
							"operator",
							lv_operator_2_0,
							"org.xtext.nusmv.language.NuSMV.impliesoperator");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(ruleOrExpression)=>
				(
					{
						newCompositeNode(grammarAccess.getImpliesExpressionAccess().getRightIffExpressionParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleIffExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getImpliesExpressionRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"org.xtext.nusmv.language.NuSMV.IffExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleIffExpression
entryRuleIffExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIffExpressionRule()); }
	iv_ruleIffExpression=ruleIffExpression
	{ $current=$iv_ruleIffExpression.current; }
	EOF;

// Rule IffExpression
ruleIffExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(ruleOrExpression)=>
			{
				/* */
			}
			{
				newCompositeNode(grammarAccess.getIffExpressionAccess().getOrExpressionParserRuleCall_0());
			}
			this_OrExpression_0=ruleOrExpression
			{
				$current = $this_OrExpression_0.current;
				afterParserOrEnumRuleCall();
			}
		)
		(
			(
				{
					/* */
				}
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getIffExpressionAccess().getBinaryExpressionLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getIffExpressionAccess().getOperatorIffoperatorEnumRuleCall_1_1_0());
					}
					lv_operator_2_0=ruleiffoperator
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getIffExpressionRule());
						}
						set(
							$current,
							"operator",
							lv_operator_2_0,
							"org.xtext.nusmv.language.NuSMV.iffoperator");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(ruleAndExpression)=>
				(
					{
						newCompositeNode(grammarAccess.getIffExpressionAccess().getRightOrExpressionParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleOrExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getIffExpressionRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"org.xtext.nusmv.language.NuSMV.OrExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleOrExpression
entryRuleOrExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOrExpressionRule()); }
	iv_ruleOrExpression=ruleOrExpression
	{ $current=$iv_ruleOrExpression.current; }
	EOF;

// Rule OrExpression
ruleOrExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(ruleAndExpression)=>
			{
				/* */
			}
			{
				newCompositeNode(grammarAccess.getOrExpressionAccess().getAndExpressionParserRuleCall_0());
			}
			this_AndExpression_0=ruleAndExpression
			{
				$current = $this_AndExpression_0.current;
				afterParserOrEnumRuleCall();
			}
		)
		(
			(
				{
					/* */
				}
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getOrExpressionAccess().getBinaryExpressionLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getOrExpressionAccess().getOperatorOroperatorsEnumRuleCall_1_1_0());
					}
					lv_operator_2_0=ruleoroperators
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getOrExpressionRule());
						}
						set(
							$current,
							"operator",
							lv_operator_2_0,
							"org.xtext.nusmv.language.NuSMV.oroperators");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(ruleComparisonExpression)=>
				(
					{
						newCompositeNode(grammarAccess.getOrExpressionAccess().getRightAndExpressionParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleAndExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getOrExpressionRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"org.xtext.nusmv.language.NuSMV.AndExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleAndExpression
entryRuleAndExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAndExpressionRule()); }
	iv_ruleAndExpression=ruleAndExpression
	{ $current=$iv_ruleAndExpression.current; }
	EOF;

// Rule AndExpression
ruleAndExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(ruleComparisonExpression)=>
			{
				/* */
			}
			{
				newCompositeNode(grammarAccess.getAndExpressionAccess().getComparisonExpressionParserRuleCall_0());
			}
			this_ComparisonExpression_0=ruleComparisonExpression
			{
				$current = $this_ComparisonExpression_0.current;
				afterParserOrEnumRuleCall();
			}
		)
		(
			(
				{
					/* */
				}
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getAndExpressionAccess().getBinaryExpressionLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getAndExpressionAccess().getOperatorAndoperatorEnumRuleCall_1_1_0());
					}
					lv_operator_2_0=ruleandoperator
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAndExpressionRule());
						}
						set(
							$current,
							"operator",
							lv_operator_2_0,
							"org.xtext.nusmv.language.NuSMV.andoperator");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(ruleInExpression)=>
				(
					{
						newCompositeNode(grammarAccess.getAndExpressionAccess().getRightComparisonExpressionParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleComparisonExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAndExpressionRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"org.xtext.nusmv.language.NuSMV.ComparisonExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleComparisonExpression
entryRuleComparisonExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getComparisonExpressionRule()); }
	iv_ruleComparisonExpression=ruleComparisonExpression
	{ $current=$iv_ruleComparisonExpression.current; }
	EOF;

// Rule ComparisonExpression
ruleComparisonExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(ruleInExpression)=>
			{
				/* */
			}
			{
				newCompositeNode(grammarAccess.getComparisonExpressionAccess().getInExpressionParserRuleCall_0());
			}
			this_InExpression_0=ruleInExpression
			{
				$current = $this_InExpression_0.current;
				afterParserOrEnumRuleCall();
			}
		)
		(
			(
				{
					/* */
				}
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getComparisonExpressionAccess().getBinaryExpressionLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getComparisonExpressionAccess().getOperatorComparisonoperatorsEnumRuleCall_1_1_0());
					}
					lv_operator_2_0=rulecomparisonoperators
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getComparisonExpressionRule());
						}
						set(
							$current,
							"operator",
							lv_operator_2_0,
							"org.xtext.nusmv.language.NuSMV.comparisonoperators");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(ruleUnionExpression)=>
				(
					{
						newCompositeNode(grammarAccess.getComparisonExpressionAccess().getRightInExpressionParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleInExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getComparisonExpressionRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"org.xtext.nusmv.language.NuSMV.InExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleInExpression
entryRuleInExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getInExpressionRule()); }
	iv_ruleInExpression=ruleInExpression
	{ $current=$iv_ruleInExpression.current; }
	EOF;

// Rule InExpression
ruleInExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(ruleUnionExpression)=>
			{
				/* */
			}
			{
				newCompositeNode(grammarAccess.getInExpressionAccess().getUnionExpressionParserRuleCall_0());
			}
			this_UnionExpression_0=ruleUnionExpression
			{
				$current = $this_UnionExpression_0.current;
				afterParserOrEnumRuleCall();
			}
		)
		(
			(
				{
					/* */
				}
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getInExpressionAccess().getBinaryExpressionLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					lv_op_2_0='in'
					{
						newLeafNode(lv_op_2_0, grammarAccess.getInExpressionAccess().getOpInKeyword_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getInExpressionRule());
						}
						setWithLastConsumed($current, "op", lv_op_2_0, "in");
					}
				)
			)
			(
				(ruleRightShift)=>
				(
					{
						newCompositeNode(grammarAccess.getInExpressionAccess().getRightUnionExpressionParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleUnionExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getInExpressionRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"org.xtext.nusmv.language.NuSMV.UnionExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleUnionExpression
entryRuleUnionExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getUnionExpressionRule()); }
	iv_ruleUnionExpression=ruleUnionExpression
	{ $current=$iv_ruleUnionExpression.current; }
	EOF;

// Rule UnionExpression
ruleUnionExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(ruleRightShift)=>
			{
				/* */
			}
			{
				newCompositeNode(grammarAccess.getUnionExpressionAccess().getRightShiftParserRuleCall_0());
			}
			this_RightShift_0=ruleRightShift
			{
				$current = $this_RightShift_0.current;
				afterParserOrEnumRuleCall();
			}
		)
		(
			(
				{
					/* */
				}
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getUnionExpressionAccess().getBinaryExpressionLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					lv_op_2_0='union'
					{
						newLeafNode(lv_op_2_0, grammarAccess.getUnionExpressionAccess().getOpUnionKeyword_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getUnionExpressionRule());
						}
						setWithLastConsumed($current, "op", lv_op_2_0, "union");
					}
				)
			)
			(
				(ruleLeftShift)=>
				(
					{
						newCompositeNode(grammarAccess.getUnionExpressionAccess().getRightRightShiftParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleRightShift
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getUnionExpressionRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"org.xtext.nusmv.language.NuSMV.RightShift");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleRightShift
entryRuleRightShift returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRightShiftRule()); }
	iv_ruleRightShift=ruleRightShift
	{ $current=$iv_ruleRightShift.current; }
	EOF;

// Rule RightShift
ruleRightShift returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(ruleLeftShift)=>
			{
				/* */
			}
			{
				newCompositeNode(grammarAccess.getRightShiftAccess().getLeftShiftParserRuleCall_0());
			}
			this_LeftShift_0=ruleLeftShift
			{
				$current = $this_LeftShift_0.current;
				afterParserOrEnumRuleCall();
			}
		)
		(
			(
				{
					/* */
				}
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getRightShiftAccess().getBinaryExpressionLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					lv_op_2_0='>>'
					{
						newLeafNode(lv_op_2_0, grammarAccess.getRightShiftAccess().getOpGreaterThanSignGreaterThanSignKeyword_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getRightShiftRule());
						}
						setWithLastConsumed($current, "op", lv_op_2_0, ">>");
					}
				)
			)
			(
				(ruleMinus)=>
				(
					{
						newCompositeNode(grammarAccess.getRightShiftAccess().getRightLeftShiftParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleLeftShift
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getRightShiftRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"org.xtext.nusmv.language.NuSMV.LeftShift");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleLeftShift
entryRuleLeftShift returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLeftShiftRule()); }
	iv_ruleLeftShift=ruleLeftShift
	{ $current=$iv_ruleLeftShift.current; }
	EOF;

// Rule LeftShift
ruleLeftShift returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(ruleMinus)=>
			{
				/* */
			}
			{
				newCompositeNode(grammarAccess.getLeftShiftAccess().getMinusParserRuleCall_0());
			}
			this_Minus_0=ruleMinus
			{
				$current = $this_Minus_0.current;
				afterParserOrEnumRuleCall();
			}
		)
		(
			(
				{
					/* */
				}
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getLeftShiftAccess().getBinaryExpressionLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					lv_op_2_0='<<'
					{
						newLeafNode(lv_op_2_0, grammarAccess.getLeftShiftAccess().getOpLessThanSignLessThanSignKeyword_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getLeftShiftRule());
						}
						setWithLastConsumed($current, "op", lv_op_2_0, "<<");
					}
				)
			)
			(
				(rulePlus)=>
				(
					{
						newCompositeNode(grammarAccess.getLeftShiftAccess().getRightMinusParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleMinus
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getLeftShiftRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"org.xtext.nusmv.language.NuSMV.Minus");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleMinus
entryRuleMinus returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMinusRule()); }
	iv_ruleMinus=ruleMinus
	{ $current=$iv_ruleMinus.current; }
	EOF;

// Rule Minus
ruleMinus returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(rulePlus)=>
			{
				/* */
			}
			{
				newCompositeNode(grammarAccess.getMinusAccess().getPlusParserRuleCall_0());
			}
			this_Plus_0=rulePlus
			{
				$current = $this_Plus_0.current;
				afterParserOrEnumRuleCall();
			}
		)
		(
			(
				{
					/* */
				}
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getMinusAccess().getBinaryExpressionLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					lv_op_2_0='-'
					{
						newLeafNode(lv_op_2_0, grammarAccess.getMinusAccess().getOpHyphenMinusKeyword_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getMinusRule());
						}
						setWithLastConsumed($current, "op", lv_op_2_0, "-");
					}
				)
			)
			(
				(ruleMult)=>
				(
					{
						newCompositeNode(grammarAccess.getMinusAccess().getRightPlusParserRuleCall_1_2_0());
					}
					lv_right_3_0=rulePlus
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMinusRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"org.xtext.nusmv.language.NuSMV.Plus");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRulePlus
entryRulePlus returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPlusRule()); }
	iv_rulePlus=rulePlus
	{ $current=$iv_rulePlus.current; }
	EOF;

// Rule Plus
rulePlus returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(ruleMult)=>
			{
				/* */
			}
			{
				newCompositeNode(grammarAccess.getPlusAccess().getMultParserRuleCall_0());
			}
			this_Mult_0=ruleMult
			{
				$current = $this_Mult_0.current;
				afterParserOrEnumRuleCall();
			}
		)
		(
			(
				{
					/* */
				}
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getPlusAccess().getBinaryExpressionLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					lv_op_2_0='+'
					{
						newLeafNode(lv_op_2_0, grammarAccess.getPlusAccess().getOpPlusSignKeyword_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getPlusRule());
						}
						setWithLastConsumed($current, "op", lv_op_2_0, "+");
					}
				)
			)
			(
				(ruleMod)=>
				(
					{
						newCompositeNode(grammarAccess.getPlusAccess().getRightMultParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleMult
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPlusRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"org.xtext.nusmv.language.NuSMV.Mult");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleMult
entryRuleMult returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMultRule()); }
	iv_ruleMult=ruleMult
	{ $current=$iv_ruleMult.current; }
	EOF;

// Rule Mult
ruleMult returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(ruleMod)=>
			{
				/* */
			}
			{
				newCompositeNode(grammarAccess.getMultAccess().getModParserRuleCall_0());
			}
			this_Mod_0=ruleMod
			{
				$current = $this_Mod_0.current;
				afterParserOrEnumRuleCall();
			}
		)
		(
			(
				{
					/* */
				}
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getMultAccess().getBinaryExpressionLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					lv_op_2_0='*'
					{
						newLeafNode(lv_op_2_0, grammarAccess.getMultAccess().getOpAsteriskKeyword_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getMultRule());
						}
						setWithLastConsumed($current, "op", lv_op_2_0, "*");
					}
				)
			)
			(
				(ruleWordConcatenation)=>
				(
					{
						newCompositeNode(grammarAccess.getMultAccess().getRightModParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleMod
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMultRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"org.xtext.nusmv.language.NuSMV.Mod");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleMod
entryRuleMod returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModRule()); }
	iv_ruleMod=ruleMod
	{ $current=$iv_ruleMod.current; }
	EOF;

// Rule Mod
ruleMod returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(ruleWordConcatenation)=>
			{
				/* */
			}
			{
				newCompositeNode(grammarAccess.getModAccess().getWordConcatenationParserRuleCall_0());
			}
			this_WordConcatenation_0=ruleWordConcatenation
			{
				$current = $this_WordConcatenation_0.current;
				afterParserOrEnumRuleCall();
			}
		)
		(
			(
				{
					/* */
				}
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getModAccess().getBinaryExpressionLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					lv_op_2_0='mod'
					{
						newLeafNode(lv_op_2_0, grammarAccess.getModAccess().getOpModKeyword_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getModRule());
						}
						setWithLastConsumed($current, "op", lv_op_2_0, "mod");
					}
				)
			)
			(
				(ruleDiv)=>
				(
					{
						newCompositeNode(grammarAccess.getModAccess().getRightWordConcatenationParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleWordConcatenation
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getModRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"org.xtext.nusmv.language.NuSMV.WordConcatenation");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleWordConcatenation
entryRuleWordConcatenation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getWordConcatenationRule()); }
	iv_ruleWordConcatenation=ruleWordConcatenation
	{ $current=$iv_ruleWordConcatenation.current; }
	EOF;

// Rule WordConcatenation
ruleWordConcatenation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(ruleDiv)=>
			{
				/* */
			}
			{
				newCompositeNode(grammarAccess.getWordConcatenationAccess().getDivParserRuleCall_0());
			}
			this_Div_0=ruleDiv
			{
				$current = $this_Div_0.current;
				afterParserOrEnumRuleCall();
			}
		)
		(
			(
				{
					/* */
				}
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getWordConcatenationAccess().getBinaryExpressionLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					lv_op_2_0='::'
					{
						newLeafNode(lv_op_2_0, grammarAccess.getWordConcatenationAccess().getOpColonColonKeyword_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getWordConcatenationRule());
						}
						setWithLastConsumed($current, "op", lv_op_2_0, "::");
					}
				)
			)
			(
				(ruleNotOrTerminalSimpleExpression)=>
				(
					{
						newCompositeNode(grammarAccess.getWordConcatenationAccess().getRightDivParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleDiv
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getWordConcatenationRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"org.xtext.nusmv.language.NuSMV.Div");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleDiv
entryRuleDiv returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDivRule()); }
	iv_ruleDiv=ruleDiv
	{ $current=$iv_ruleDiv.current; }
	EOF;

// Rule Div
ruleDiv returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(ruleNotOrTerminalSimpleExpression)=>
			{
				/* */
			}
			{
				newCompositeNode(grammarAccess.getDivAccess().getNotOrTerminalSimpleExpressionParserRuleCall_0());
			}
			this_NotOrTerminalSimpleExpression_0=ruleNotOrTerminalSimpleExpression
			{
				$current = $this_NotOrTerminalSimpleExpression_0.current;
				afterParserOrEnumRuleCall();
			}
		)
		(
			(
				{
					/* */
				}
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getDivAccess().getBinaryExpressionLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					lv_op_2_0='/'
					{
						newLeafNode(lv_op_2_0, grammarAccess.getDivAccess().getOpSolidusKeyword_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getDivRule());
						}
						setWithLastConsumed($current, "op", lv_op_2_0, "/");
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getDivAccess().getRightNotOrTerminalSimpleExpressionParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleNotOrTerminalSimpleExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDivRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"org.xtext.nusmv.language.NuSMV.NotOrTerminalSimpleExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleNotOrTerminalSimpleExpression
entryRuleNotOrTerminalSimpleExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNotOrTerminalSimpleExpressionRule()); }
	iv_ruleNotOrTerminalSimpleExpression=ruleNotOrTerminalSimpleExpression
	{ $current=$iv_ruleNotOrTerminalSimpleExpression.current; }
	EOF;

// Rule NotOrTerminalSimpleExpression
ruleNotOrTerminalSimpleExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					/* */
				}
				{
					$current = forceCreateModelElement(
						grammarAccess.getNotOrTerminalSimpleExpressionAccess().getNotAction_0_0(),
						$current);
				}
			)
			otherlv_1='!'
			{
				newLeafNode(otherlv_1, grammarAccess.getNotOrTerminalSimpleExpressionAccess().getExclamationMarkKeyword_0_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getNotOrTerminalSimpleExpressionAccess().getExpTerminalSimpleExpressionParserRuleCall_0_2_0());
					}
					lv_exp_2_0=ruleTerminalSimpleExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getNotOrTerminalSimpleExpressionRule());
						}
						set(
							$current,
							"exp",
							lv_exp_2_0,
							"org.xtext.nusmv.language.NuSMV.TerminalSimpleExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getNotOrTerminalSimpleExpressionAccess().getTerminalSimpleExpressionParserRuleCall_1());
		}
		this_TerminalSimpleExpression_3=ruleTerminalSimpleExpression
		{
			$current = $this_TerminalSimpleExpression_3.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleTerminalSimpleExpression
entryRuleTerminalSimpleExpression returns [EObject current=null]@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT");
}:
	{ newCompositeNode(grammarAccess.getTerminalSimpleExpressionRule()); }
	iv_ruleTerminalSimpleExpression=ruleTerminalSimpleExpression
	{ $current=$iv_ruleTerminalSimpleExpression.current; }
	EOF;
finally {
	myHiddenTokenState.restore();
}

// Rule TerminalSimpleExpression
ruleTerminalSimpleExpression returns [EObject current=null]
@init {
	enterRule();
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT");
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					/* */
				}
				{
					$current = forceCreateModelElement(
						grammarAccess.getTerminalSimpleExpressionAccess().getParsExpressionAction_0_0(),
						$current);
				}
			)
			(
				(
					lv_isNext_1_0='next'
					{
						newLeafNode(lv_isNext_1_0, grammarAccess.getTerminalSimpleExpressionAccess().getIsNextNextKeyword_0_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getTerminalSimpleExpressionRule());
						}
						setWithLastConsumed($current, "isNext", lv_isNext_1_0, "next");
					}
				)
			)?
			otherlv_2='('
			{
				newLeafNode(otherlv_2, grammarAccess.getTerminalSimpleExpressionAccess().getLeftParenthesisKeyword_0_2());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getTerminalSimpleExpressionAccess().getSimpleExpressionSimpleExpressionParserRuleCall_0_3_0());
					}
					lv_simpleExpression_3_0=ruleSimpleExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTerminalSimpleExpressionRule());
						}
						set(
							$current,
							"simpleExpression",
							lv_simpleExpression_3_0,
							"org.xtext.nusmv.language.NuSMV.SimpleExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_4=')'
			{
				newLeafNode(otherlv_4, grammarAccess.getTerminalSimpleExpressionAccess().getRightParenthesisKeyword_0_4());
			}
		)
		    |
		(
			(
				{
					/* */
				}
				{
					$current = forceCreateModelElement(
						grammarAccess.getTerminalSimpleExpressionAccess().getUnaryExpressionAction_1_0(),
						$current);
				}
			)
			(
				(
					(
						(
							lv_operator_6_1='-'
							{
								newLeafNode(lv_operator_6_1, grammarAccess.getTerminalSimpleExpressionAccess().getOperatorHyphenMinusKeyword_1_1_0_0_0());
							}
							{
								if ($current==null) {
									$current = createModelElement(grammarAccess.getTerminalSimpleExpressionRule());
								}
								setWithLastConsumed($current, "operator", lv_operator_6_1, null);
							}
							    |
							lv_operator_6_2='+'
							{
								newLeafNode(lv_operator_6_2, grammarAccess.getTerminalSimpleExpressionAccess().getOperatorPlusSignKeyword_1_1_0_0_1());
							}
							{
								if ($current==null) {
									$current = createModelElement(grammarAccess.getTerminalSimpleExpressionRule());
								}
								setWithLastConsumed($current, "operator", lv_operator_6_2, null);
							}
							    |
							lv_operator_6_3='EG'
							{
								newLeafNode(lv_operator_6_3, grammarAccess.getTerminalSimpleExpressionAccess().getOperatorEGKeyword_1_1_0_0_2());
							}
							{
								if ($current==null) {
									$current = createModelElement(grammarAccess.getTerminalSimpleExpressionRule());
								}
								setWithLastConsumed($current, "operator", lv_operator_6_3, null);
							}
							    |
							lv_operator_6_4='EX'
							{
								newLeafNode(lv_operator_6_4, grammarAccess.getTerminalSimpleExpressionAccess().getOperatorEXKeyword_1_1_0_0_3());
							}
							{
								if ($current==null) {
									$current = createModelElement(grammarAccess.getTerminalSimpleExpressionRule());
								}
								setWithLastConsumed($current, "operator", lv_operator_6_4, null);
							}
							    |
							lv_operator_6_5='EF'
							{
								newLeafNode(lv_operator_6_5, grammarAccess.getTerminalSimpleExpressionAccess().getOperatorEFKeyword_1_1_0_0_4());
							}
							{
								if ($current==null) {
									$current = createModelElement(grammarAccess.getTerminalSimpleExpressionRule());
								}
								setWithLastConsumed($current, "operator", lv_operator_6_5, null);
							}
							    |
							lv_operator_6_6='AG'
							{
								newLeafNode(lv_operator_6_6, grammarAccess.getTerminalSimpleExpressionAccess().getOperatorAGKeyword_1_1_0_0_5());
							}
							{
								if ($current==null) {
									$current = createModelElement(grammarAccess.getTerminalSimpleExpressionRule());
								}
								setWithLastConsumed($current, "operator", lv_operator_6_6, null);
							}
							    |
							lv_operator_6_7='AX'
							{
								newLeafNode(lv_operator_6_7, grammarAccess.getTerminalSimpleExpressionAccess().getOperatorAXKeyword_1_1_0_0_6());
							}
							{
								if ($current==null) {
									$current = createModelElement(grammarAccess.getTerminalSimpleExpressionRule());
								}
								setWithLastConsumed($current, "operator", lv_operator_6_7, null);
							}
							    |
							lv_operator_6_8='AF'
							{
								newLeafNode(lv_operator_6_8, grammarAccess.getTerminalSimpleExpressionAccess().getOperatorAFKeyword_1_1_0_0_7());
							}
							{
								if ($current==null) {
									$current = createModelElement(grammarAccess.getTerminalSimpleExpressionRule());
								}
								setWithLastConsumed($current, "operator", lv_operator_6_8, null);
							}
							    |
							lv_operator_6_9='X'
							{
								newLeafNode(lv_operator_6_9, grammarAccess.getTerminalSimpleExpressionAccess().getOperatorXKeyword_1_1_0_0_8());
							}
							{
								if ($current==null) {
									$current = createModelElement(grammarAccess.getTerminalSimpleExpressionRule());
								}
								setWithLastConsumed($current, "operator", lv_operator_6_9, null);
							}
							    |
							lv_operator_6_10='G'
							{
								newLeafNode(lv_operator_6_10, grammarAccess.getTerminalSimpleExpressionAccess().getOperatorGKeyword_1_1_0_0_9());
							}
							{
								if ($current==null) {
									$current = createModelElement(grammarAccess.getTerminalSimpleExpressionRule());
								}
								setWithLastConsumed($current, "operator", lv_operator_6_10, null);
							}
							    |
							lv_operator_6_11='F'
							{
								newLeafNode(lv_operator_6_11, grammarAccess.getTerminalSimpleExpressionAccess().getOperatorFKeyword_1_1_0_0_10());
							}
							{
								if ($current==null) {
									$current = createModelElement(grammarAccess.getTerminalSimpleExpressionRule());
								}
								setWithLastConsumed($current, "operator", lv_operator_6_11, null);
							}
							    |
							lv_operator_6_12='Y'
							{
								newLeafNode(lv_operator_6_12, grammarAccess.getTerminalSimpleExpressionAccess().getOperatorYKeyword_1_1_0_0_11());
							}
							{
								if ($current==null) {
									$current = createModelElement(grammarAccess.getTerminalSimpleExpressionRule());
								}
								setWithLastConsumed($current, "operator", lv_operator_6_12, null);
							}
							    |
							lv_operator_6_13='Z'
							{
								newLeafNode(lv_operator_6_13, grammarAccess.getTerminalSimpleExpressionAccess().getOperatorZKeyword_1_1_0_0_12());
							}
							{
								if ($current==null) {
									$current = createModelElement(grammarAccess.getTerminalSimpleExpressionRule());
								}
								setWithLastConsumed($current, "operator", lv_operator_6_13, null);
							}
							    |
							lv_operator_6_14='H'
							{
								newLeafNode(lv_operator_6_14, grammarAccess.getTerminalSimpleExpressionAccess().getOperatorHKeyword_1_1_0_0_13());
							}
							{
								if ($current==null) {
									$current = createModelElement(grammarAccess.getTerminalSimpleExpressionRule());
								}
								setWithLastConsumed($current, "operator", lv_operator_6_14, null);
							}
							    |
							lv_operator_6_15='O'
							{
								newLeafNode(lv_operator_6_15, grammarAccess.getTerminalSimpleExpressionAccess().getOperatorOKeyword_1_1_0_0_14());
							}
							{
								if ($current==null) {
									$current = createModelElement(grammarAccess.getTerminalSimpleExpressionRule());
								}
								setWithLastConsumed($current, "operator", lv_operator_6_15, null);
							}
						)
					)
				)
				(
					(
						{
							newCompositeNode(grammarAccess.getTerminalSimpleExpressionAccess().getSimpleExpressionSimpleExpressionParserRuleCall_1_1_1_0());
						}
						lv_simpleExpression_7_0=ruleSimpleExpression
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getTerminalSimpleExpressionRule());
							}
							set(
								$current,
								"simpleExpression",
								lv_simpleExpression_7_0,
								"org.xtext.nusmv.language.NuSMV.SimpleExpression");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
		)
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getTerminalSimpleExpressionAccess().getCaseSimpleExpressionParserRuleCall_2());
		}
		this_CaseSimpleExpression_8=ruleCaseSimpleExpression
		{
			$current = $this_CaseSimpleExpression_8.current;
			afterParserOrEnumRuleCall();
		}
		    |
		(
			(
				{
					/* */
				}
				{
					$current = forceCreateModelElement(
						grammarAccess.getTerminalSimpleExpressionAccess().getValueExpressionAction_3_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getTerminalSimpleExpressionAccess().getValueVariableIDParserRuleCall_3_1_0());
					}
					lv_value_10_0=ruleVariableID
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTerminalSimpleExpressionRule());
						}
						set(
							$current,
							"value",
							lv_value_10_0,
							"org.xtext.nusmv.language.NuSMV.VariableID");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_11='['
				{
					newLeafNode(otherlv_11, grammarAccess.getTerminalSimpleExpressionAccess().getLeftSquareBracketKeyword_3_2_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getTerminalSimpleExpressionAccess().getArrayNUMBERParserRuleCall_3_2_1_0());
						}
						lv_array_12_0=ruleNUMBER
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getTerminalSimpleExpressionRule());
							}
							add(
								$current,
								"array",
								lv_array_12_0,
								"org.xtext.nusmv.language.NuSMV.NUMBER");
							afterParserOrEnumRuleCall();
						}
					)
				)
				otherlv_13=']'
				{
					newLeafNode(otherlv_13, grammarAccess.getTerminalSimpleExpressionAccess().getRightSquareBracketKeyword_3_2_2());
				}
			)*
		)
		    |
		(
			(
				{
					/* */
				}
				{
					$current = forceCreateModelElement(
						grammarAccess.getTerminalSimpleExpressionAccess().getVarAction_4_0(),
						$current);
				}
			)
			(
				(
					{
						/* */
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getTerminalSimpleExpressionRule());
						}
					}
					otherlv_15=RULE_ID
					{
						newLeafNode(otherlv_15, grammarAccess.getTerminalSimpleExpressionAccess().getValueVarBodyCrossReference_4_1_0());
					}
				)
			)
			(
				(
					otherlv_16='.'
					{
						newLeafNode(otherlv_16, grammarAccess.getTerminalSimpleExpressionAccess().getFullStopKeyword_4_2_0_0());
					}
					(
						(
							{
								newCompositeNode(grammarAccess.getTerminalSimpleExpressionAccess().getDottedTerminalSimpleExpressionParserRuleCall_4_2_0_1_0());
							}
							lv_dotted_17_0=ruleTerminalSimpleExpression
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getTerminalSimpleExpressionRule());
								}
								set(
									$current,
									"dotted",
									lv_dotted_17_0,
									"org.xtext.nusmv.language.NuSMV.TerminalSimpleExpression");
								afterParserOrEnumRuleCall();
							}
						)
					)
				)
				    |
				(
					otherlv_18='['
					{
						newLeafNode(otherlv_18, grammarAccess.getTerminalSimpleExpressionAccess().getLeftSquareBracketKeyword_4_2_1_0());
					}
					(
						(
							{
								newCompositeNode(grammarAccess.getTerminalSimpleExpressionAccess().getArrayNUMBERParserRuleCall_4_2_1_1_0());
							}
							lv_array_19_0=ruleNUMBER
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getTerminalSimpleExpressionRule());
								}
								add(
									$current,
									"array",
									lv_array_19_0,
									"org.xtext.nusmv.language.NuSMV.NUMBER");
								afterParserOrEnumRuleCall();
							}
						)
					)
					otherlv_20=']'
					{
						newLeafNode(otherlv_20, grammarAccess.getTerminalSimpleExpressionAccess().getRightSquareBracketKeyword_4_2_1_2());
					}
				)*
			)?
		)
		    |
		(
			(
				{
					/* */
				}
				{
					$current = forceCreateModelElement(
						grammarAccess.getTerminalSimpleExpressionAccess().getSetElementExpressionAction_5_0(),
						$current);
				}
			)
			(
				(
					{
						/* */
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getTerminalSimpleExpressionRule());
						}
					}
					otherlv_22=RULE_ID
					{
						newLeafNode(otherlv_22, grammarAccess.getTerminalSimpleExpressionAccess().getValValCrossReference_5_1_0());
					}
				)
			)
		)
		    |
		(
			(
				{
					/* */
				}
				{
					$current = forceCreateModelElement(
						grammarAccess.getTerminalSimpleExpressionAccess().getSetValueParameterAction_6_0(),
						$current);
				}
			)
			(
				(
					{
						/* */
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getTerminalSimpleExpressionRule());
						}
					}
					otherlv_24=RULE_ID
					{
						newLeafNode(otherlv_24, grammarAccess.getTerminalSimpleExpressionAccess().getValparamFormalParameterCrossReference_6_1_0());
					}
				)
			)
		)
		    |
		(
			(
				{
					/* */
				}
				{
					$current = forceCreateModelElement(
						grammarAccess.getTerminalSimpleExpressionAccess().getValueExpressionAction_7_0(),
						$current);
				}
			)
			(
				(
					lv_value_26_0=RULE_ID
					{
						newLeafNode(lv_value_26_0, grammarAccess.getTerminalSimpleExpressionAccess().getValueIDTerminalRuleCall_7_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getTerminalSimpleExpressionRule());
						}
						setWithLastConsumed(
							$current,
							"value",
							lv_value_26_0,
							"org.xtext.nusmv.language.NuSMV.ID");
					}
				)
			)
		)
		    |
		(
			(
				{
					/* */
				}
				{
					$current = forceCreateModelElement(
						grammarAccess.getTerminalSimpleExpressionAccess().getValueExpressionAction_8_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getTerminalSimpleExpressionAccess().getValueNUMBERParserRuleCall_8_1_0());
					}
					lv_value_28_0=ruleNUMBER
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTerminalSimpleExpressionRule());
						}
						set(
							$current,
							"value",
							lv_value_28_0,
							"org.xtext.nusmv.language.NuSMV.NUMBER");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			(
				{
					/* */
				}
				{
					$current = forceCreateModelElement(
						grammarAccess.getTerminalSimpleExpressionAccess().getValueExpressionAction_9_0(),
						$current);
				}
			)
			(
				(
					lv_value_30_0='TRUE'
					{
						newLeafNode(lv_value_30_0, grammarAccess.getTerminalSimpleExpressionAccess().getValueTRUEKeyword_9_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getTerminalSimpleExpressionRule());
						}
						setWithLastConsumed($current, "value", lv_value_30_0, "TRUE");
					}
				)
			)
		)
		    |
		(
			(
				{
					/* */
				}
				{
					$current = forceCreateModelElement(
						grammarAccess.getTerminalSimpleExpressionAccess().getValueExpressionAction_10_0(),
						$current);
				}
			)
			(
				(
					lv_value_32_0='FALSE'
					{
						newLeafNode(lv_value_32_0, grammarAccess.getTerminalSimpleExpressionAccess().getValueFALSEKeyword_10_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getTerminalSimpleExpressionRule());
						}
						setWithLastConsumed($current, "value", lv_value_32_0, "FALSE");
					}
				)
			)
		)
		    |
		(
			(
				{
					/* */
				}
				{
					$current = forceCreateModelElement(
						grammarAccess.getTerminalSimpleExpressionAccess().getValueExpressionAction_11_0(),
						$current);
				}
			)
			(
				(
					lv_value_34_0='self'
					{
						newLeafNode(lv_value_34_0, grammarAccess.getTerminalSimpleExpressionAccess().getValueSelfKeyword_11_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getTerminalSimpleExpressionRule());
						}
						setWithLastConsumed($current, "value", lv_value_34_0, "self");
					}
				)
			)
		)
		    |
		(
			(
				{
					/* */
				}
				{
					$current = forceCreateModelElement(
						grammarAccess.getTerminalSimpleExpressionAccess().getSetExpressionAction_12_0(),
						$current);
				}
			)
			otherlv_36='{'
			{
				newLeafNode(otherlv_36, grammarAccess.getTerminalSimpleExpressionAccess().getLeftCurlyBracketKeyword_12_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getTerminalSimpleExpressionAccess().getSetElementSimpleExpressionParserRuleCall_12_2_0());
					}
					lv_setElement_37_0=ruleSimpleExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTerminalSimpleExpressionRule());
						}
						add(
							$current,
							"setElement",
							lv_setElement_37_0,
							"org.xtext.nusmv.language.NuSMV.SimpleExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_38=','
				{
					newLeafNode(otherlv_38, grammarAccess.getTerminalSimpleExpressionAccess().getCommaKeyword_12_3_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getTerminalSimpleExpressionAccess().getSetElementSimpleExpressionParserRuleCall_12_3_1_0());
						}
						lv_setElement_39_0=ruleSimpleExpression
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getTerminalSimpleExpressionRule());
							}
							add(
								$current,
								"setElement",
								lv_setElement_39_0,
								"org.xtext.nusmv.language.NuSMV.SimpleExpression");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
			otherlv_40='}'
			{
				newLeafNode(otherlv_40, grammarAccess.getTerminalSimpleExpressionAccess().getRightCurlyBracketKeyword_12_4());
			}
		)
		    |
		(
			(
				{
					/* */
				}
				{
					$current = forceCreateModelElement(
						grammarAccess.getTerminalSimpleExpressionAccess().getWordExpressionAction_13_0(),
						$current);
				}
			)
			(
				(
					lv_value_42_0=RULE_WORD
					{
						newLeafNode(lv_value_42_0, grammarAccess.getTerminalSimpleExpressionAccess().getValueWORDTerminalRuleCall_13_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getTerminalSimpleExpressionRule());
						}
						setWithLastConsumed(
							$current,
							"value",
							lv_value_42_0,
							"org.xtext.nusmv.language.NuSMV.WORD");
					}
				)
			)
		)
		    |
		(
			(
				{
					/* */
				}
				{
					$current = forceCreateModelElement(
						grammarAccess.getTerminalSimpleExpressionAccess().getIntervalExpressionAction_14_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getTerminalSimpleExpressionAccess().getLowerBoundNUMBERParserRuleCall_14_1_0());
					}
					lv_lowerBound_44_0=ruleNUMBER
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTerminalSimpleExpressionRule());
						}
						set(
							$current,
							"lowerBound",
							lv_lowerBound_44_0,
							"org.xtext.nusmv.language.NuSMV.NUMBER");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_45='..'
			{
				newLeafNode(otherlv_45, grammarAccess.getTerminalSimpleExpressionAccess().getFullStopFullStopKeyword_14_2());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getTerminalSimpleExpressionAccess().getUpperBoundNUMBERParserRuleCall_14_3_0());
					}
					lv_upperBound_46_0=ruleNUMBER
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTerminalSimpleExpressionRule());
						}
						set(
							$current,
							"upperBound",
							lv_upperBound_46_0,
							"org.xtext.nusmv.language.NuSMV.NUMBER");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			(
				{
					/* */
				}
				{
					$current = forceCreateModelElement(
						grammarAccess.getTerminalSimpleExpressionAccess().getUntilCTLexpressionAction_15_0(),
						$current);
				}
			)
			(
				(
					(
						lv_ea_48_1='E'
						{
							newLeafNode(lv_ea_48_1, grammarAccess.getTerminalSimpleExpressionAccess().getEaEKeyword_15_1_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getTerminalSimpleExpressionRule());
							}
							setWithLastConsumed($current, "ea", lv_ea_48_1, null);
						}
						    |
						lv_ea_48_2='A'
						{
							newLeafNode(lv_ea_48_2, grammarAccess.getTerminalSimpleExpressionAccess().getEaAKeyword_15_1_0_1());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getTerminalSimpleExpressionRule());
							}
							setWithLastConsumed($current, "ea", lv_ea_48_2, null);
						}
					)
				)
			)
			otherlv_49='['
			{
				newLeafNode(otherlv_49, grammarAccess.getTerminalSimpleExpressionAccess().getLeftSquareBracketKeyword_15_2());
			}
			(
				(ruleImpliesExpression)=>
				(
					{
						newCompositeNode(grammarAccess.getTerminalSimpleExpressionAccess().getArgLTLbinExpressionParserRuleCall_15_3_0());
					}
					lv_arg_50_0=ruleLTLbinExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTerminalSimpleExpressionRule());
						}
						set(
							$current,
							"arg",
							lv_arg_50_0,
							"org.xtext.nusmv.language.NuSMV.LTLbinExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_51=']'
			{
				newLeafNode(otherlv_51, grammarAccess.getTerminalSimpleExpressionAccess().getRightSquareBracketKeyword_15_4());
			}
		)
		    |
		(
			(
				{
					/* */
				}
				{
					$current = forceCreateModelElement(
						grammarAccess.getTerminalSimpleExpressionAccess().getUnaryFunctionExpressionAction_16_0(),
						$current);
				}
			)
			(
				(
					(
						lv_function_53_1='word1'
						{
							newLeafNode(lv_function_53_1, grammarAccess.getTerminalSimpleExpressionAccess().getFunctionWord1Keyword_16_1_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getTerminalSimpleExpressionRule());
							}
							setWithLastConsumed($current, "function", lv_function_53_1, null);
						}
						    |
						lv_function_53_2='bool'
						{
							newLeafNode(lv_function_53_2, grammarAccess.getTerminalSimpleExpressionAccess().getFunctionBoolKeyword_16_1_0_1());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getTerminalSimpleExpressionRule());
							}
							setWithLastConsumed($current, "function", lv_function_53_2, null);
						}
					)
				)
			)
			otherlv_54='('
			{
				newLeafNode(otherlv_54, grammarAccess.getTerminalSimpleExpressionAccess().getLeftParenthesisKeyword_16_2());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getTerminalSimpleExpressionAccess().getArgSimpleExpressionParserRuleCall_16_3_0());
					}
					lv_arg_55_0=ruleSimpleExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTerminalSimpleExpressionRule());
						}
						set(
							$current,
							"arg",
							lv_arg_55_0,
							"org.xtext.nusmv.language.NuSMV.SimpleExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_56=')'
			{
				newLeafNode(otherlv_56, grammarAccess.getTerminalSimpleExpressionAccess().getRightParenthesisKeyword_16_4());
			}
		)
		    |
		(
			(
				{
					/* */
				}
				{
					$current = forceCreateModelElement(
						grammarAccess.getTerminalSimpleExpressionAccess().getToIntAction_17_0(),
						$current);
				}
			)
			otherlv_58='toint'
			{
				newLeafNode(otherlv_58, grammarAccess.getTerminalSimpleExpressionAccess().getTointKeyword_17_1());
			}
			otherlv_59='('
			{
				newLeafNode(otherlv_59, grammarAccess.getTerminalSimpleExpressionAccess().getLeftParenthesisKeyword_17_2());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getTerminalSimpleExpressionAccess().getArgSimpleExpressionParserRuleCall_17_3_0());
					}
					lv_arg_60_0=ruleSimpleExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTerminalSimpleExpressionRule());
						}
						set(
							$current,
							"arg",
							lv_arg_60_0,
							"org.xtext.nusmv.language.NuSMV.SimpleExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_61=')'
			{
				newLeafNode(otherlv_61, grammarAccess.getTerminalSimpleExpressionAccess().getRightParenthesisKeyword_17_4());
			}
		)
	)
;
finally {
	myHiddenTokenState.restore();
}

// Entry rule entryRuleFormalParameter
entryRuleFormalParameter returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFormalParameterRule()); }
	iv_ruleFormalParameter=ruleFormalParameter
	{ $current=$iv_ruleFormalParameter.current; }
	EOF;

// Rule FormalParameter
ruleFormalParameter returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_ID
				{
					newLeafNode(lv_name_0_0, grammarAccess.getFormalParameterAccess().getNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFormalParameterRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"org.xtext.nusmv.language.NuSMV.ID");
				}
			)
		)
		(
			(
				otherlv_1='.'
				{
					newLeafNode(otherlv_1, grammarAccess.getFormalParameterAccess().getFullStopKeyword_1_0());
				}
			)?
			this_ID_2=RULE_ID
			{
				newLeafNode(this_ID_2, grammarAccess.getFormalParameterAccess().getIDTerminalRuleCall_1_1());
			}
		)*
	)
;

// Entry rule entryRuleCaseSimpleExpression
entryRuleCaseSimpleExpression returns [EObject current=null]@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT");
}:
	{ newCompositeNode(grammarAccess.getCaseSimpleExpressionRule()); }
	iv_ruleCaseSimpleExpression=ruleCaseSimpleExpression
	{ $current=$iv_ruleCaseSimpleExpression.current; }
	EOF;
finally {
	myHiddenTokenState.restore();
}

// Rule CaseSimpleExpression
ruleCaseSimpleExpression returns [EObject current=null]
@init {
	enterRule();
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT");
}
@after {
	leaveRule();
}:
	(
		otherlv_0='case'
		{
			newLeafNode(otherlv_0, grammarAccess.getCaseSimpleExpressionAccess().getCaseKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCaseSimpleExpressionAccess().getBranchesCaseSimpleAssignementExpressionParserRuleCall_1_0());
				}
				lv_branches_1_0=ruleCaseSimpleAssignementExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCaseSimpleExpressionRule());
					}
					add(
						$current,
						"branches",
						lv_branches_1_0,
						"org.xtext.nusmv.language.NuSMV.CaseSimpleAssignementExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		otherlv_2='esac'
		{
			newLeafNode(otherlv_2, grammarAccess.getCaseSimpleExpressionAccess().getEsacKeyword_2());
		}
	)
;
finally {
	myHiddenTokenState.restore();
}

// Entry rule entryRuleCaseSimpleAssignementExpression
entryRuleCaseSimpleAssignementExpression returns [EObject current=null]@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT");
}:
	{ newCompositeNode(grammarAccess.getCaseSimpleAssignementExpressionRule()); }
	iv_ruleCaseSimpleAssignementExpression=ruleCaseSimpleAssignementExpression
	{ $current=$iv_ruleCaseSimpleAssignementExpression.current; }
	EOF;
finally {
	myHiddenTokenState.restore();
}

// Rule CaseSimpleAssignementExpression
ruleCaseSimpleAssignementExpression returns [EObject current=null]
@init {
	enterRule();
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT");
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getCaseSimpleAssignementExpressionAccess().getCaseSimpleExpressionParserRuleCall_0_0());
				}
				lv_case_0_0=ruleSimpleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCaseSimpleAssignementExpressionRule());
					}
					set(
						$current,
						"case",
						lv_case_0_0,
						"org.xtext.nusmv.language.NuSMV.SimpleExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1=':'
		{
			newLeafNode(otherlv_1, grammarAccess.getCaseSimpleAssignementExpressionAccess().getColonKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCaseSimpleAssignementExpressionAccess().getAssignmentSimpleExpressionParserRuleCall_2_0());
				}
				lv_assignment_2_0=ruleSimpleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCaseSimpleAssignementExpressionRule());
					}
					set(
						$current,
						"assignment",
						lv_assignment_2_0,
						"org.xtext.nusmv.language.NuSMV.SimpleExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=';'
		{
			newLeafNode(otherlv_3, grammarAccess.getCaseSimpleAssignementExpressionAccess().getSemicolonKeyword_3());
		}
	)
;
finally {
	myHiddenTokenState.restore();
}

// Entry rule entryRuleCTLExpression
entryRuleCTLExpression returns [EObject current=null]@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT");
}:
	{ newCompositeNode(grammarAccess.getCTLExpressionRule()); }
	iv_ruleCTLExpression=ruleCTLExpression
	{ $current=$iv_ruleCTLExpression.current; }
	EOF;
finally {
	myHiddenTokenState.restore();
}

// Rule CTLExpression
ruleCTLExpression returns [EObject current=null]
@init {
	enterRule();
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT");
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getCTLExpressionAccess().getSimpleExpressionSimpleExpressionParserRuleCall_0());
			}
			lv_simpleExpression_0_0=ruleSimpleExpression
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getCTLExpressionRule());
				}
				set(
					$current,
					"simpleExpression",
					lv_simpleExpression_0_0,
					"org.xtext.nusmv.language.NuSMV.SimpleExpression");
				afterParserOrEnumRuleCall();
			}
		)
	)
;
finally {
	myHiddenTokenState.restore();
}

// Entry rule entryRulePSLExpression
entryRulePSLExpression returns [EObject current=null]@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT");
}:
	{ newCompositeNode(grammarAccess.getPSLExpressionRule()); }
	iv_rulePSLExpression=rulePSLExpression
	{ $current=$iv_rulePSLExpression.current; }
	EOF;
finally {
	myHiddenTokenState.restore();
}

// Rule PSLExpression
rulePSLExpression returns [EObject current=null]
@init {
	enterRule();
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT");
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getPSLExpressionAccess().getSimpleExpressionSimpleExpressionParserRuleCall_0());
			}
			lv_simpleExpression_0_0=ruleSimpleExpression
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getPSLExpressionRule());
				}
				set(
					$current,
					"simpleExpression",
					lv_simpleExpression_0_0,
					"org.xtext.nusmv.language.NuSMV.SimpleExpression");
				afterParserOrEnumRuleCall();
			}
		)
	)
;
finally {
	myHiddenTokenState.restore();
}

// Entry rule entryRuleLTLExpression
entryRuleLTLExpression returns [EObject current=null]@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT");
}:
	{ newCompositeNode(grammarAccess.getLTLExpressionRule()); }
	iv_ruleLTLExpression=ruleLTLExpression
	{ $current=$iv_ruleLTLExpression.current; }
	EOF;
finally {
	myHiddenTokenState.restore();
}

// Rule LTLExpression
ruleLTLExpression returns [EObject current=null]
@init {
	enterRule();
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT");
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getLTLExpressionAccess().getSimpleExpressionSimpleExpressionParserRuleCall_0());
			}
			lv_simpleExpression_0_0=ruleSimpleExpression
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getLTLExpressionRule());
				}
				set(
					$current,
					"simpleExpression",
					lv_simpleExpression_0_0,
					"org.xtext.nusmv.language.NuSMV.SimpleExpression");
				afterParserOrEnumRuleCall();
			}
		)
	)
;
finally {
	myHiddenTokenState.restore();
}

// Entry rule entryRuleRangeExpression
entryRuleRangeExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRangeExpressionRule()); }
	iv_ruleRangeExpression=ruleRangeExpression
	{ $current=$iv_ruleRangeExpression.current; }
	EOF;

// Rule RangeExpression
ruleRangeExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getRangeExpressionAccess().getLowerNUMBERParserRuleCall_0_0());
				}
				lv_lower_0_0=ruleNUMBER
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRangeExpressionRule());
					}
					set(
						$current,
						"lower",
						lv_lower_0_0,
						"org.xtext.nusmv.language.NuSMV.NUMBER");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1='..'
		{
			newLeafNode(otherlv_1, grammarAccess.getRangeExpressionAccess().getFullStopFullStopKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getRangeExpressionAccess().getUpperNUMBERParserRuleCall_2_0());
				}
				lv_upper_2_0=ruleNUMBER
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRangeExpressionRule());
					}
					set(
						$current,
						"upper",
						lv_upper_2_0,
						"org.xtext.nusmv.language.NuSMV.NUMBER");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleRTCTLExpression
entryRuleRTCTLExpression returns [EObject current=null]@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT");
}:
	{ newCompositeNode(grammarAccess.getRTCTLExpressionRule()); }
	iv_ruleRTCTLExpression=ruleRTCTLExpression
	{ $current=$iv_ruleRTCTLExpression.current; }
	EOF;
finally {
	myHiddenTokenState.restore();
}

// Rule RTCTLExpression
ruleRTCTLExpression returns [EObject current=null]
@init {
	enterRule();
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT");
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					/* */
				}
				{
					$current = forceCreateModelElement(
						grammarAccess.getRTCTLExpressionAccess().getSingleRTCTLExpressionAction_0_0(),
						$current);
				}
			)
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getRTCTLExpressionAccess().getCtlExpressionCTLExpressionParserRuleCall_0_1_0_0());
						}
						lv_ctlExpression_1_1=ruleCTLExpression
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getRTCTLExpressionRule());
							}
							set(
								$current,
								"ctlExpression",
								lv_ctlExpression_1_1,
								"org.xtext.nusmv.language.NuSMV.CTLExpression");
							afterParserOrEnumRuleCall();
						}
						    |
						{
							newCompositeNode(grammarAccess.getRTCTLExpressionAccess().getCtlExpressionFormalParameterParserRuleCall_0_1_0_1());
						}
						lv_ctlExpression_1_2=ruleFormalParameter
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getRTCTLExpressionRule());
							}
							set(
								$current,
								"ctlExpression",
								lv_ctlExpression_1_2,
								"org.xtext.nusmv.language.NuSMV.FormalParameter");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
		)
		    |
		(
			(
				{
					/* */
				}
				{
					$current = forceCreateModelElement(
						grammarAccess.getRTCTLExpressionAccess().getUnaryRTCTLExpressionAction_1_0(),
						$current);
				}
			)
			(
				(
					(
						lv_unary_3_1='EBF'
						{
							newLeafNode(lv_unary_3_1, grammarAccess.getRTCTLExpressionAccess().getUnaryEBFKeyword_1_1_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getRTCTLExpressionRule());
							}
							setWithLastConsumed($current, "unary", lv_unary_3_1, null);
						}
						    |
						lv_unary_3_2='ABF'
						{
							newLeafNode(lv_unary_3_2, grammarAccess.getRTCTLExpressionAccess().getUnaryABFKeyword_1_1_0_1());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getRTCTLExpressionRule());
							}
							setWithLastConsumed($current, "unary", lv_unary_3_2, null);
						}
						    |
						lv_unary_3_3='EBG'
						{
							newLeafNode(lv_unary_3_3, grammarAccess.getRTCTLExpressionAccess().getUnaryEBGKeyword_1_1_0_2());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getRTCTLExpressionRule());
							}
							setWithLastConsumed($current, "unary", lv_unary_3_3, null);
						}
						    |
						lv_unary_3_4='ABG'
						{
							newLeafNode(lv_unary_3_4, grammarAccess.getRTCTLExpressionAccess().getUnaryABGKeyword_1_1_0_3());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getRTCTLExpressionRule());
							}
							setWithLastConsumed($current, "unary", lv_unary_3_4, null);
						}
					)
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getRTCTLExpressionAccess().getRangeRangeExpressionParserRuleCall_1_2_0());
					}
					lv_range_4_0=ruleRangeExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getRTCTLExpressionRule());
						}
						set(
							$current,
							"range",
							lv_range_4_0,
							"org.xtext.nusmv.language.NuSMV.RangeExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getRTCTLExpressionAccess().getRctlRTCTLExpressionParserRuleCall_1_3_0());
					}
					lv_rctl_5_0=ruleRTCTLExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getRTCTLExpressionRule());
						}
						set(
							$current,
							"rctl",
							lv_rctl_5_0,
							"org.xtext.nusmv.language.NuSMV.RTCTLExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;
finally {
	myHiddenTokenState.restore();
}

// Entry rule entryRuleComputeSpecification
entryRuleComputeSpecification returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getComputeSpecificationRule()); }
	iv_ruleComputeSpecification=ruleComputeSpecification
	{ $current=$iv_ruleComputeSpecification.current; }
	EOF;

// Rule ComputeSpecification
ruleComputeSpecification returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='COMPUTE'
		{
			newLeafNode(otherlv_0, grammarAccess.getComputeSpecificationAccess().getCOMPUTEKeyword_0());
		}
		(
			(
				(
					lv_minMax_1_1='MIN'
					{
						newLeafNode(lv_minMax_1_1, grammarAccess.getComputeSpecificationAccess().getMinMaxMINKeyword_1_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getComputeSpecificationRule());
						}
						setWithLastConsumed($current, "minMax", lv_minMax_1_1, null);
					}
					    |
					lv_minMax_1_2='MAX'
					{
						newLeafNode(lv_minMax_1_2, grammarAccess.getComputeSpecificationAccess().getMinMaxMAXKeyword_1_0_1());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getComputeSpecificationRule());
						}
						setWithLastConsumed($current, "minMax", lv_minMax_1_2, null);
					}
				)
			)
		)
		otherlv_2='['
		{
			newLeafNode(otherlv_2, grammarAccess.getComputeSpecificationAccess().getLeftSquareBracketKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getComputeSpecificationAccess().getFirstRTCTLExpressionParserRuleCall_3_0());
				}
				lv_first_3_0=ruleRTCTLExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getComputeSpecificationRule());
					}
					set(
						$current,
						"first",
						lv_first_3_0,
						"org.xtext.nusmv.language.NuSMV.RTCTLExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4=','
		{
			newLeafNode(otherlv_4, grammarAccess.getComputeSpecificationAccess().getCommaKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getComputeSpecificationAccess().getSecondRTCTLExpressionParserRuleCall_5_0());
				}
				lv_second_5_0=ruleRTCTLExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getComputeSpecificationRule());
					}
					set(
						$current,
						"second",
						lv_second_5_0,
						"org.xtext.nusmv.language.NuSMV.RTCTLExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_6=']'
		{
			newLeafNode(otherlv_6, grammarAccess.getComputeSpecificationAccess().getRightSquareBracketKeyword_6());
		}
		(
			(
				lv_semicolon_7_0=';'
				{
					newLeafNode(lv_semicolon_7_0, grammarAccess.getComputeSpecificationAccess().getSemicolonSemicolonKeyword_7_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getComputeSpecificationRule());
					}
					setWithLastConsumed($current, "semicolon", true, ";");
				}
			)
		)?
	)
;

// Entry rule entryRuleVariableID
entryRuleVariableID returns [String current=null]@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT");
}:
	{ newCompositeNode(grammarAccess.getVariableIDRule()); }
	iv_ruleVariableID=ruleVariableID
	{ $current=$iv_ruleVariableID.current.getText(); }
	EOF;
finally {
	myHiddenTokenState.restore();
}

// Rule VariableID
ruleVariableID returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT");
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getVariableIDAccess().getTerminalVariableIDParserRuleCall_0());
		}
		this_TerminalVariableID_0=ruleTerminalVariableID
		{
			$current.merge(this_TerminalVariableID_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		(
			(
				kw='.'
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getVariableIDAccess().getFullStopKeyword_1_0_0());
				}
				{
					newCompositeNode(grammarAccess.getVariableIDAccess().getTerminalVariableIDParserRuleCall_1_0_1());
				}
				this_TerminalVariableID_2=ruleTerminalVariableID
				{
					$current.merge(this_TerminalVariableID_2);
				}
				{
					afterParserOrEnumRuleCall();
				}
			)
			    |
			(
				kw='['
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getVariableIDAccess().getLeftSquareBracketKeyword_1_1_0());
				}
				(
					{
						newCompositeNode(grammarAccess.getVariableIDAccess().getNUMBERParserRuleCall_1_1_1_0());
					}
					this_NUMBER_4=ruleNUMBER
					{
						$current.merge(this_NUMBER_4);
					}
					{
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getVariableIDAccess().getTerminalVariableIDParserRuleCall_1_1_1_1());
					}
					this_TerminalVariableID_5=ruleTerminalVariableID
					{
						$current.merge(this_TerminalVariableID_5);
					}
					{
						afterParserOrEnumRuleCall();
					}
				)
				kw=']'
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getVariableIDAccess().getRightSquareBracketKeyword_1_1_2());
				}
			)
			    |
			(
				kw='['
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getVariableIDAccess().getLeftSquareBracketKeyword_1_2_0());
				}
				{
					newCompositeNode(grammarAccess.getVariableIDAccess().getNUMBERParserRuleCall_1_2_1());
				}
				this_NUMBER_8=ruleNUMBER
				{
					$current.merge(this_NUMBER_8);
				}
				{
					afterParserOrEnumRuleCall();
				}
				kw=':'
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getVariableIDAccess().getColonKeyword_1_2_2());
				}
				{
					newCompositeNode(grammarAccess.getVariableIDAccess().getNUMBERParserRuleCall_1_2_3());
				}
				this_NUMBER_10=ruleNUMBER
				{
					$current.merge(this_NUMBER_10);
				}
				{
					afterParserOrEnumRuleCall();
				}
				kw=']'
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getVariableIDAccess().getRightSquareBracketKeyword_1_2_4());
				}
			)
		)*
	)
;
finally {
	myHiddenTokenState.restore();
}

// Entry rule entryRuleTerminalVariableID
entryRuleTerminalVariableID returns [String current=null]@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT");
}:
	{ newCompositeNode(grammarAccess.getTerminalVariableIDRule()); }
	iv_ruleTerminalVariableID=ruleTerminalVariableID
	{ $current=$iv_ruleTerminalVariableID.current.getText(); }
	EOF;
finally {
	myHiddenTokenState.restore();
}

// Rule TerminalVariableID
ruleTerminalVariableID returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT");
}
@after {
	leaveRule();
}:
	this_ID_0=RULE_ID
	{
		$current.merge(this_ID_0);
	}
	{
		newLeafNode(this_ID_0, grammarAccess.getTerminalVariableIDAccess().getIDTerminalRuleCall());
	}
;
finally {
	myHiddenTokenState.restore();
}

// Entry rule entryRuleNUMBER
entryRuleNUMBER returns [String current=null]:
	{ newCompositeNode(grammarAccess.getNUMBERRule()); }
	iv_ruleNUMBER=ruleNUMBER
	{ $current=$iv_ruleNUMBER.current.getText(); }
	EOF;

// Rule NUMBER
ruleNUMBER returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			kw='-'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getNUMBERAccess().getHyphenMinusKeyword_0());
			}
		)?
		this_INT_1=RULE_INT
		{
			$current.merge(this_INT_1);
		}
		{
			newLeafNode(this_INT_1, grammarAccess.getNUMBERAccess().getINTTerminalRuleCall_1());
		}
	)
;

// Rule comparisonoperators
rulecomparisonoperators returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='='
			{
				$current = grammarAccess.getComparisonoperatorsAccess().getEqualEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getComparisonoperatorsAccess().getEqualEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='!='
			{
				$current = grammarAccess.getComparisonoperatorsAccess().getDisEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getComparisonoperatorsAccess().getDisEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='<'
			{
				$current = grammarAccess.getComparisonoperatorsAccess().getLEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getComparisonoperatorsAccess().getLEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='>'
			{
				$current = grammarAccess.getComparisonoperatorsAccess().getGEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getComparisonoperatorsAccess().getGEnumLiteralDeclaration_3());
			}
		)
		    |
		(
			enumLiteral_4='<='
			{
				$current = grammarAccess.getComparisonoperatorsAccess().getLeEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_4, grammarAccess.getComparisonoperatorsAccess().getLeEnumLiteralDeclaration_4());
			}
		)
		    |
		(
			enumLiteral_5='>='
			{
				$current = grammarAccess.getComparisonoperatorsAccess().getGeEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_5, grammarAccess.getComparisonoperatorsAccess().getGeEnumLiteralDeclaration_5());
			}
		)
	)
;

// Rule oroperators
ruleoroperators returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='|'
			{
				$current = grammarAccess.getOroperatorsAccess().getOrEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getOroperatorsAccess().getOrEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='xor'
			{
				$current = grammarAccess.getOroperatorsAccess().getXorEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getOroperatorsAccess().getXorEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='xnor'
			{
				$current = grammarAccess.getOroperatorsAccess().getXnorEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getOroperatorsAccess().getXnorEnumLiteralDeclaration_2());
			}
		)
	)
;

// Rule impliesoperator
ruleimpliesoperator returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		enumLiteral_0='->'
		{
			$current = grammarAccess.getImpliesoperatorAccess().getImpliesEnumLiteralDeclaration().getEnumLiteral().getInstance();
			newLeafNode(enumLiteral_0, grammarAccess.getImpliesoperatorAccess().getImpliesEnumLiteralDeclaration());
		}
	)
;

// Rule iffoperator
ruleiffoperator returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		enumLiteral_0='<->'
		{
			$current = grammarAccess.getIffoperatorAccess().getIffEnumLiteralDeclaration().getEnumLiteral().getInstance();
			newLeafNode(enumLiteral_0, grammarAccess.getIffoperatorAccess().getIffEnumLiteralDeclaration());
		}
	)
;

// Rule andoperator
ruleandoperator returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		enumLiteral_0='&'
		{
			$current = grammarAccess.getAndoperatorAccess().getAndEnumLiteralDeclaration().getEnumLiteral().getInstance();
			newLeafNode(enumLiteral_0, grammarAccess.getAndoperatorAccess().getAndEnumLiteralDeclaration());
		}
	)
;

// Rule LTLbinoperators
ruleLTLbinoperators returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='U'
			{
				$current = grammarAccess.getLTLbinoperatorsAccess().getUEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getLTLbinoperatorsAccess().getUEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='V'
			{
				$current = grammarAccess.getLTLbinoperatorsAccess().getVEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getLTLbinoperatorsAccess().getVEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='S'
			{
				$current = grammarAccess.getLTLbinoperatorsAccess().getSEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getLTLbinoperatorsAccess().getSEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='T'
			{
				$current = grammarAccess.getLTLbinoperatorsAccess().getTEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getLTLbinoperatorsAccess().getTEnumLiteralDeclaration_3());
			}
		)
	)
;

RULE_SL_COMMENT : '--' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WORD : '0' ('u'|'s')? ('b'|'B'|'o'|'O'|'_'|'d'|'D'|'h'|'H') RULE_INT? '_' ('a'..'f'|'A.' . 'F'|RULE_INT)*;

RULE_ID : ('A'..'Z'|'a'..'z'|'_') ('A'..'Z'|'a'..'z'|'_'|RULE_INT|'$'|'#'|'-'|'.')*;

RULE_INT : ('0'..'9')+;

RULE_WS : (' '|'\t'|'\r'|'\n')+;
