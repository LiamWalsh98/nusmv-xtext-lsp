/**
 * generated by Xtext
 */
package org.xtext.nusmv.language.scoping;

import java.util.ArrayList;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.xtext.naming.QualifiedName;
import org.eclipse.xtext.resource.EObjectDescription;
import org.eclipse.xtext.resource.IEObjectDescription;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.Scopes;
import org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider;
import org.eclipse.xtext.scoping.impl.SimpleScope;
import org.xtext.nusmv.language.nuSMV.AssignBody;
import org.xtext.nusmv.language.nuSMV.AsyncrProcessType;
import org.xtext.nusmv.language.nuSMV.InitBody;
import org.xtext.nusmv.language.nuSMV.ModuleElement;
import org.xtext.nusmv.language.nuSMV.ModuleType;
import org.xtext.nusmv.language.nuSMV.NuSmvModel;
import org.xtext.nusmv.language.nuSMV.SetExpression;
import org.xtext.nusmv.language.nuSMV.SimpleExpression;
import org.xtext.nusmv.language.nuSMV.SimpleType;
import org.xtext.nusmv.language.nuSMV.SyncrProcessType;
import org.xtext.nusmv.language.nuSMV.Type;
import org.xtext.nusmv.language.nuSMV.VarBody;
import org.xtext.nusmv.language.nuSMV.VariableDeclaration;
import org.xtext.nusmv.language.services.NuSMVGrammarAccess;

/**
 * This class contains custom scoping description.
 * 
 * see : http://www.eclipse.org/Xtext/documentation.html#scoping
 * on how and when to use it
 */
@SuppressWarnings("all")
public class NuSMVScopeProvider extends AbstractDeclarativeScopeProvider {
  public IScope scope_InitBody_vars(final AssignBody ctx, final EReference ref) {
    EList<org.xtext.nusmv.language.nuSMV.Module> modules = null;
    EList<VarBody> modelems = null;
    EList<ModuleElement> prova = null;
    EObject _eContainer = ctx.eContainer();
    modules = ((NuSmvModel) _eContainer).getModules();
    for (final org.xtext.nusmv.language.nuSMV.Module module : modules) {
      {
        EList<ModuleElement> _moduleElement = module.getModuleElement();
        for (final ModuleElement varb : _moduleElement) {
          if ((varb instanceof VariableDeclaration)) {
            modelems.addAll(((VariableDeclaration)varb).getVars());
          }
        }
        prova.addAll(module.getModuleElement());
      }
    }
    System.out.println(("PPPPPPPPPPP" + modules));
    return Scopes.scopeFor(modules);
  }
  
  private ArrayList<EObjectDescription> list;
  
  public Iterable<IEObjectDescription> getVarsNames(final NuSmvModel m) {
    ArrayList<EObjectDescription> _arrayList = new ArrayList<EObjectDescription>();
    this.list = _arrayList;
    EList<org.xtext.nusmv.language.nuSMV.Module> _modules = m.getModules();
    for (final org.xtext.nusmv.language.nuSMV.Module module : _modules) {
      if ((module instanceof VariableDeclaration)) {
        QualifiedName _create = QualifiedName.create(module.getName());
        EObjectDescription _eObjectDescription = new EObjectDescription(_create, module, null);
        this.list.add(_eObjectDescription);
      }
    }
    return null;
  }
  
  public IScope scope_InitBody(final InitBody ctx, final EReference ref) {
    EObject _eContainer = ctx.eContainer();
    Iterable<IEObjectDescription> _varsNames = this.getVarsNames(((NuSmvModel) _eContainer));
    return new SimpleScope(_varsNames);
  }
  
  public IScope scope_InitBody_vars(final InitBody ctx, final EReference ref) {
    System.out.println("ci sono ");
    return new SimpleScope(null);
  }
  
  public IScope scope_InitBody_initial(final InitBody ctx, final EReference ref) {
    IScope _xblockexpression = null;
    {
      final SimpleExpression head = ctx.getInitial();
      IScope _switchResult = null;
      boolean _matched = false;
      if (head instanceof SetExpression) {
        _matched=true;
        _switchResult = Scopes.scopeFor(((SetExpression)head).getSetElement());
      }
      if (!_matched) {
        _switchResult = IScope.NULLSCOPE;
      }
      _xblockexpression = _switchResult;
    }
    return _xblockexpression;
  }
  
  public IScope scope_VarBody_params(final VarBody ctx, final EReference ref) {
    IScope _xblockexpression = null;
    {
      final Type head = ctx.getType();
      IScope _switchResult = null;
      boolean _matched = false;
      if (head instanceof ModuleType) {
        _matched=true;
        IScope _xblockexpression_1 = null;
        {
          if ((head instanceof AsyncrProcessType)) {
            Scopes.scopeFor(((AsyncrProcessType)head).getParams());
          }
          IScope _xifexpression = null;
          if ((head instanceof SyncrProcessType)) {
            _xifexpression = Scopes.scopeFor(((SyncrProcessType)head).getParams());
          }
          _xblockexpression_1 = _xifexpression;
        }
        _switchResult = _xblockexpression_1;
      }
      if (!_matched) {
        if (head instanceof SimpleType) {
          _matched=true;
          _switchResult = IScope.NULLSCOPE;
        }
      }
      if (!_matched) {
        _switchResult = IScope.NULLSCOPE;
      }
      _xblockexpression = _switchResult;
    }
    return _xblockexpression;
  }
  
  public IScope scope_Type_params(final Type ctx, final EReference ref) {
    IScope _switchResult = null;
    boolean _matched = false;
    if (ctx instanceof ModuleType) {
      _matched=true;
      _switchResult = Scopes.scopeFor(((ModuleType)ctx).getParams());
    }
    if (!_matched) {
      _switchResult = IScope.NULLSCOPE;
    }
    return _switchResult;
  }
  
  public IScope scope_Service_extras(final SimpleExpression ctx, final EReference ref) {
    if ((ctx instanceof NuSMVGrammarAccess.TerminalSimpleExpressionElements)) {
      return Scopes.scopeFor(ctx.eContainingFeature().getEAnnotations());
    } else {
      return IScope.NULLSCOPE;
    }
  }
}
