/**
 * generated by Xtext 2.21.0
 */
package org.xtext.nusmv.language.nuSMV.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.xtext.nusmv.language.nuSMV.CompassionExpression;
import org.xtext.nusmv.language.nuSMV.NuSMVPackage;
import org.xtext.nusmv.language.nuSMV.SimpleExpression;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Compassion Expression</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.nusmv.language.nuSMV.impl.CompassionExpressionImpl#getFirstExpr <em>First Expr</em>}</li>
 *   <li>{@link org.xtext.nusmv.language.nuSMV.impl.CompassionExpressionImpl#getSecondExpr <em>Second Expr</em>}</li>
 * </ul>
 *
 * @generated
 */
public class CompassionExpressionImpl extends FairnessConstraintImpl implements CompassionExpression
{
  /**
   * The cached value of the '{@link #getFirstExpr() <em>First Expr</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFirstExpr()
   * @generated
   * @ordered
   */
  protected SimpleExpression firstExpr;

  /**
   * The cached value of the '{@link #getSecondExpr() <em>Second Expr</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSecondExpr()
   * @generated
   * @ordered
   */
  protected SimpleExpression secondExpr;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected CompassionExpressionImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return NuSMVPackage.Literals.COMPASSION_EXPRESSION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SimpleExpression getFirstExpr()
  {
    return firstExpr;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetFirstExpr(SimpleExpression newFirstExpr, NotificationChain msgs)
  {
    SimpleExpression oldFirstExpr = firstExpr;
    firstExpr = newFirstExpr;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, NuSMVPackage.COMPASSION_EXPRESSION__FIRST_EXPR, oldFirstExpr, newFirstExpr);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setFirstExpr(SimpleExpression newFirstExpr)
  {
    if (newFirstExpr != firstExpr)
    {
      NotificationChain msgs = null;
      if (firstExpr != null)
        msgs = ((InternalEObject)firstExpr).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - NuSMVPackage.COMPASSION_EXPRESSION__FIRST_EXPR, null, msgs);
      if (newFirstExpr != null)
        msgs = ((InternalEObject)newFirstExpr).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - NuSMVPackage.COMPASSION_EXPRESSION__FIRST_EXPR, null, msgs);
      msgs = basicSetFirstExpr(newFirstExpr, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, NuSMVPackage.COMPASSION_EXPRESSION__FIRST_EXPR, newFirstExpr, newFirstExpr));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SimpleExpression getSecondExpr()
  {
    return secondExpr;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetSecondExpr(SimpleExpression newSecondExpr, NotificationChain msgs)
  {
    SimpleExpression oldSecondExpr = secondExpr;
    secondExpr = newSecondExpr;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, NuSMVPackage.COMPASSION_EXPRESSION__SECOND_EXPR, oldSecondExpr, newSecondExpr);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setSecondExpr(SimpleExpression newSecondExpr)
  {
    if (newSecondExpr != secondExpr)
    {
      NotificationChain msgs = null;
      if (secondExpr != null)
        msgs = ((InternalEObject)secondExpr).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - NuSMVPackage.COMPASSION_EXPRESSION__SECOND_EXPR, null, msgs);
      if (newSecondExpr != null)
        msgs = ((InternalEObject)newSecondExpr).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - NuSMVPackage.COMPASSION_EXPRESSION__SECOND_EXPR, null, msgs);
      msgs = basicSetSecondExpr(newSecondExpr, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, NuSMVPackage.COMPASSION_EXPRESSION__SECOND_EXPR, newSecondExpr, newSecondExpr));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case NuSMVPackage.COMPASSION_EXPRESSION__FIRST_EXPR:
        return basicSetFirstExpr(null, msgs);
      case NuSMVPackage.COMPASSION_EXPRESSION__SECOND_EXPR:
        return basicSetSecondExpr(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case NuSMVPackage.COMPASSION_EXPRESSION__FIRST_EXPR:
        return getFirstExpr();
      case NuSMVPackage.COMPASSION_EXPRESSION__SECOND_EXPR:
        return getSecondExpr();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case NuSMVPackage.COMPASSION_EXPRESSION__FIRST_EXPR:
        setFirstExpr((SimpleExpression)newValue);
        return;
      case NuSMVPackage.COMPASSION_EXPRESSION__SECOND_EXPR:
        setSecondExpr((SimpleExpression)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case NuSMVPackage.COMPASSION_EXPRESSION__FIRST_EXPR:
        setFirstExpr((SimpleExpression)null);
        return;
      case NuSMVPackage.COMPASSION_EXPRESSION__SECOND_EXPR:
        setSecondExpr((SimpleExpression)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case NuSMVPackage.COMPASSION_EXPRESSION__FIRST_EXPR:
        return firstExpr != null;
      case NuSMVPackage.COMPASSION_EXPRESSION__SECOND_EXPR:
        return secondExpr != null;
    }
    return super.eIsSet(featureID);
  }

} //CompassionExpressionImpl
