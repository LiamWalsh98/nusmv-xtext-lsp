/**
 * generated by Xtext 2.21.0
 */
package org.xtext.nusmv.language.nuSMV.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.xtext.nusmv.language.nuSMV.FairnessExpression;
import org.xtext.nusmv.language.nuSMV.NuSMVPackage;
import org.xtext.nusmv.language.nuSMV.SimpleExpression;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Fairness Expression</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.nusmv.language.nuSMV.impl.FairnessExpressionImpl#getFairnessExpr <em>Fairness Expr</em>}</li>
 * </ul>
 *
 * @generated
 */
public class FairnessExpressionImpl extends FairnessConstraintImpl implements FairnessExpression
{
  /**
   * The cached value of the '{@link #getFairnessExpr() <em>Fairness Expr</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFairnessExpr()
   * @generated
   * @ordered
   */
  protected SimpleExpression fairnessExpr;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected FairnessExpressionImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return NuSMVPackage.Literals.FAIRNESS_EXPRESSION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SimpleExpression getFairnessExpr()
  {
    return fairnessExpr;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetFairnessExpr(SimpleExpression newFairnessExpr, NotificationChain msgs)
  {
    SimpleExpression oldFairnessExpr = fairnessExpr;
    fairnessExpr = newFairnessExpr;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, NuSMVPackage.FAIRNESS_EXPRESSION__FAIRNESS_EXPR, oldFairnessExpr, newFairnessExpr);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setFairnessExpr(SimpleExpression newFairnessExpr)
  {
    if (newFairnessExpr != fairnessExpr)
    {
      NotificationChain msgs = null;
      if (fairnessExpr != null)
        msgs = ((InternalEObject)fairnessExpr).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - NuSMVPackage.FAIRNESS_EXPRESSION__FAIRNESS_EXPR, null, msgs);
      if (newFairnessExpr != null)
        msgs = ((InternalEObject)newFairnessExpr).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - NuSMVPackage.FAIRNESS_EXPRESSION__FAIRNESS_EXPR, null, msgs);
      msgs = basicSetFairnessExpr(newFairnessExpr, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, NuSMVPackage.FAIRNESS_EXPRESSION__FAIRNESS_EXPR, newFairnessExpr, newFairnessExpr));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case NuSMVPackage.FAIRNESS_EXPRESSION__FAIRNESS_EXPR:
        return basicSetFairnessExpr(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case NuSMVPackage.FAIRNESS_EXPRESSION__FAIRNESS_EXPR:
        return getFairnessExpr();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case NuSMVPackage.FAIRNESS_EXPRESSION__FAIRNESS_EXPR:
        setFairnessExpr((SimpleExpression)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case NuSMVPackage.FAIRNESS_EXPRESSION__FAIRNESS_EXPR:
        setFairnessExpr((SimpleExpression)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case NuSMVPackage.FAIRNESS_EXPRESSION__FAIRNESS_EXPR:
        return fairnessExpr != null;
    }
    return super.eIsSet(featureID);
  }

} //FairnessExpressionImpl
