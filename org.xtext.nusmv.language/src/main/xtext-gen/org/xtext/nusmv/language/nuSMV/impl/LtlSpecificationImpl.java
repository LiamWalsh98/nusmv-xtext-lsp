/**
 * generated by Xtext 2.21.0
 */
package org.xtext.nusmv.language.nuSMV.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.xtext.nusmv.language.nuSMV.LTLExpression;
import org.xtext.nusmv.language.nuSMV.LtlSpecification;
import org.xtext.nusmv.language.nuSMV.NuSMVPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Ltl Specification</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.nusmv.language.nuSMV.impl.LtlSpecificationImpl#isNameId <em>Name Id</em>}</li>
 *   <li>{@link org.xtext.nusmv.language.nuSMV.impl.LtlSpecificationImpl#getName <em>Name</em>}</li>
 *   <li>{@link org.xtext.nusmv.language.nuSMV.impl.LtlSpecificationImpl#getLtlExpression <em>Ltl Expression</em>}</li>
 *   <li>{@link org.xtext.nusmv.language.nuSMV.impl.LtlSpecificationImpl#isSemicolon <em>Semicolon</em>}</li>
 * </ul>
 *
 * @generated
 */
public class LtlSpecificationImpl extends ModuleElementImpl implements LtlSpecification
{
  /**
   * The default value of the '{@link #isNameId() <em>Name Id</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isNameId()
   * @generated
   * @ordered
   */
  protected static final boolean NAME_ID_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isNameId() <em>Name Id</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isNameId()
   * @generated
   * @ordered
   */
  protected boolean nameId = NAME_ID_EDEFAULT;

  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getLtlExpression() <em>Ltl Expression</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLtlExpression()
   * @generated
   * @ordered
   */
  protected LTLExpression ltlExpression;

  /**
   * The default value of the '{@link #isSemicolon() <em>Semicolon</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isSemicolon()
   * @generated
   * @ordered
   */
  protected static final boolean SEMICOLON_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isSemicolon() <em>Semicolon</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isSemicolon()
   * @generated
   * @ordered
   */
  protected boolean semicolon = SEMICOLON_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected LtlSpecificationImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return NuSMVPackage.Literals.LTL_SPECIFICATION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isNameId()
  {
    return nameId;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setNameId(boolean newNameId)
  {
    boolean oldNameId = nameId;
    nameId = newNameId;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, NuSMVPackage.LTL_SPECIFICATION__NAME_ID, oldNameId, nameId));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, NuSMVPackage.LTL_SPECIFICATION__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LTLExpression getLtlExpression()
  {
    return ltlExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetLtlExpression(LTLExpression newLtlExpression, NotificationChain msgs)
  {
    LTLExpression oldLtlExpression = ltlExpression;
    ltlExpression = newLtlExpression;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, NuSMVPackage.LTL_SPECIFICATION__LTL_EXPRESSION, oldLtlExpression, newLtlExpression);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setLtlExpression(LTLExpression newLtlExpression)
  {
    if (newLtlExpression != ltlExpression)
    {
      NotificationChain msgs = null;
      if (ltlExpression != null)
        msgs = ((InternalEObject)ltlExpression).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - NuSMVPackage.LTL_SPECIFICATION__LTL_EXPRESSION, null, msgs);
      if (newLtlExpression != null)
        msgs = ((InternalEObject)newLtlExpression).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - NuSMVPackage.LTL_SPECIFICATION__LTL_EXPRESSION, null, msgs);
      msgs = basicSetLtlExpression(newLtlExpression, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, NuSMVPackage.LTL_SPECIFICATION__LTL_EXPRESSION, newLtlExpression, newLtlExpression));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isSemicolon()
  {
    return semicolon;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setSemicolon(boolean newSemicolon)
  {
    boolean oldSemicolon = semicolon;
    semicolon = newSemicolon;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, NuSMVPackage.LTL_SPECIFICATION__SEMICOLON, oldSemicolon, semicolon));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case NuSMVPackage.LTL_SPECIFICATION__LTL_EXPRESSION:
        return basicSetLtlExpression(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case NuSMVPackage.LTL_SPECIFICATION__NAME_ID:
        return isNameId();
      case NuSMVPackage.LTL_SPECIFICATION__NAME:
        return getName();
      case NuSMVPackage.LTL_SPECIFICATION__LTL_EXPRESSION:
        return getLtlExpression();
      case NuSMVPackage.LTL_SPECIFICATION__SEMICOLON:
        return isSemicolon();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case NuSMVPackage.LTL_SPECIFICATION__NAME_ID:
        setNameId((Boolean)newValue);
        return;
      case NuSMVPackage.LTL_SPECIFICATION__NAME:
        setName((String)newValue);
        return;
      case NuSMVPackage.LTL_SPECIFICATION__LTL_EXPRESSION:
        setLtlExpression((LTLExpression)newValue);
        return;
      case NuSMVPackage.LTL_SPECIFICATION__SEMICOLON:
        setSemicolon((Boolean)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case NuSMVPackage.LTL_SPECIFICATION__NAME_ID:
        setNameId(NAME_ID_EDEFAULT);
        return;
      case NuSMVPackage.LTL_SPECIFICATION__NAME:
        setName(NAME_EDEFAULT);
        return;
      case NuSMVPackage.LTL_SPECIFICATION__LTL_EXPRESSION:
        setLtlExpression((LTLExpression)null);
        return;
      case NuSMVPackage.LTL_SPECIFICATION__SEMICOLON:
        setSemicolon(SEMICOLON_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case NuSMVPackage.LTL_SPECIFICATION__NAME_ID:
        return nameId != NAME_ID_EDEFAULT;
      case NuSMVPackage.LTL_SPECIFICATION__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case NuSMVPackage.LTL_SPECIFICATION__LTL_EXPRESSION:
        return ltlExpression != null;
      case NuSMVPackage.LTL_SPECIFICATION__SEMICOLON:
        return semicolon != SEMICOLON_EDEFAULT;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (nameId: ");
    result.append(nameId);
    result.append(", name: ");
    result.append(name);
    result.append(", semicolon: ");
    result.append(semicolon);
    result.append(')');
    return result.toString();
  }

} //LtlSpecificationImpl
