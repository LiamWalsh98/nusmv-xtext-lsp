/**
 * generated by Xtext 2.21.0
 */
package org.xtext.nusmv.language.nuSMV.impl;

import org.eclipse.emf.ecore.EAttribute;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EEnum;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.emf.ecore.EReference;

import org.eclipse.emf.ecore.impl.EPackageImpl;

import org.xtext.nusmv.language.nuSMV.ArrayType;
import org.xtext.nusmv.language.nuSMV.AssignBody;
import org.xtext.nusmv.language.nuSMV.AssignConstraintElement;
import org.xtext.nusmv.language.nuSMV.AsyncrProcessType;
import org.xtext.nusmv.language.nuSMV.BinaryExpression;
import org.xtext.nusmv.language.nuSMV.BooleanType;
import org.xtext.nusmv.language.nuSMV.CTLExpression;
import org.xtext.nusmv.language.nuSMV.CaseSimpleAssignementExpression;
import org.xtext.nusmv.language.nuSMV.CaseSimpleExpression;
import org.xtext.nusmv.language.nuSMV.CompassionExpression;
import org.xtext.nusmv.language.nuSMV.ComputeSpecification;
import org.xtext.nusmv.language.nuSMV.ConstantsDeclaration;
import org.xtext.nusmv.language.nuSMV.CtlSpecification;
import org.xtext.nusmv.language.nuSMV.DefineBody;
import org.xtext.nusmv.language.nuSMV.DefineDeclaration;
import org.xtext.nusmv.language.nuSMV.EnumType;
import org.xtext.nusmv.language.nuSMV.FairnessConstraint;
import org.xtext.nusmv.language.nuSMV.FairnessExpression;
import org.xtext.nusmv.language.nuSMV.FormalParameter;
import org.xtext.nusmv.language.nuSMV.FrozenVariableDeclaration;
import org.xtext.nusmv.language.nuSMV.IVariableDeclaration;
import org.xtext.nusmv.language.nuSMV.InitBody;
import org.xtext.nusmv.language.nuSMV.InitConstraint;
import org.xtext.nusmv.language.nuSMV.IntervalExpression;
import org.xtext.nusmv.language.nuSMV.IntervalType;
import org.xtext.nusmv.language.nuSMV.InvarConstraint;
import org.xtext.nusmv.language.nuSMV.InvarSpecification;
import org.xtext.nusmv.language.nuSMV.IsaDeclaration;
import org.xtext.nusmv.language.nuSMV.JusticeExpression;
import org.xtext.nusmv.language.nuSMV.LTLExpression;
import org.xtext.nusmv.language.nuSMV.LtlSpecification;
import org.xtext.nusmv.language.nuSMV.ModuleElement;
import org.xtext.nusmv.language.nuSMV.ModuleType;
import org.xtext.nusmv.language.nuSMV.NextBody;
import org.xtext.nusmv.language.nuSMV.NextExpression;
import org.xtext.nusmv.language.nuSMV.Not;
import org.xtext.nusmv.language.nuSMV.NuSMVFactory;
import org.xtext.nusmv.language.nuSMV.NuSMVPackage;
import org.xtext.nusmv.language.nuSMV.NuSmvModel;
import org.xtext.nusmv.language.nuSMV.PSLExpression;
import org.xtext.nusmv.language.nuSMV.ParsExpression;
import org.xtext.nusmv.language.nuSMV.PslSpecification;
import org.xtext.nusmv.language.nuSMV.RTCTLExpression;
import org.xtext.nusmv.language.nuSMV.RangeExpression;
import org.xtext.nusmv.language.nuSMV.SetElementExpression;
import org.xtext.nusmv.language.nuSMV.SetExpression;
import org.xtext.nusmv.language.nuSMV.SetValueParameter;
import org.xtext.nusmv.language.nuSMV.SignedWordType;
import org.xtext.nusmv.language.nuSMV.SimpleExpression;
import org.xtext.nusmv.language.nuSMV.SimpleType;
import org.xtext.nusmv.language.nuSMV.SingleRTCTLExpression;
import org.xtext.nusmv.language.nuSMV.SyncrProcessType;
import org.xtext.nusmv.language.nuSMV.ToInt;
import org.xtext.nusmv.language.nuSMV.TransConstraint;
import org.xtext.nusmv.language.nuSMV.Type;
import org.xtext.nusmv.language.nuSMV.UnaryExpression;
import org.xtext.nusmv.language.nuSMV.UnaryFunctionExpression;
import org.xtext.nusmv.language.nuSMV.UnaryRTCTLExpression;
import org.xtext.nusmv.language.nuSMV.UnsignedWordType;
import org.xtext.nusmv.language.nuSMV.UntilCTLexpression;
import org.xtext.nusmv.language.nuSMV.Val;
import org.xtext.nusmv.language.nuSMV.ValueExpression;
import org.xtext.nusmv.language.nuSMV.Var;
import org.xtext.nusmv.language.nuSMV.VarBody;
import org.xtext.nusmv.language.nuSMV.VarBodyAssign;
import org.xtext.nusmv.language.nuSMV.VariableDeclaration;
import org.xtext.nusmv.language.nuSMV.WordExpression;
import org.xtext.nusmv.language.nuSMV.WordType;
import org.xtext.nusmv.language.nuSMV.operators;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Package</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class NuSMVPackageImpl extends EPackageImpl implements NuSMVPackage
{
  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass nuSmvModelEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass moduleEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass moduleElementEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass variableDeclarationEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass iVariableDeclarationEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass frozenVariableDeclarationEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass varBodyEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass defineDeclarationEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass defineBodyEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass constantsDeclarationEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass assignConstraintElementEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass assignBodyEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass varBodyAssignEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass initBodyEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass nextBodyEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass transConstraintEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass initConstraintEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass invarConstraintEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass fairnessConstraintEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass fairnessExpressionEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass justiceExpressionEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass compassionExpressionEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass ctlSpecificationEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass pslSpecificationEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass invarSpecificationEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass isaDeclarationEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass ltlSpecificationEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass typeEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass simpleTypeEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass moduleTypeEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass valEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass nextExpressionEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass simpleExpressionEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass formalParameterEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass caseSimpleExpressionEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass caseSimpleAssignementExpressionEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass ctlExpressionEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass pslExpressionEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass ltlExpressionEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass rangeExpressionEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass rtctlExpressionEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass computeSpecificationEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass booleanTypeEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass wordTypeEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass unsignedWordTypeEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass signedWordTypeEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass enumTypeEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass intervalTypeEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass arrayTypeEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass asyncrProcessTypeEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass syncrProcessTypeEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass binaryExpressionEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass notEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass parsExpressionEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass unaryExpressionEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass valueExpressionEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass varEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass setElementExpressionEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass setValueParameterEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass setExpressionEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass wordExpressionEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass intervalExpressionEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass untilCTLexpressionEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass unaryFunctionExpressionEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass toIntEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass singleRTCTLExpressionEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass unaryRTCTLExpressionEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EEnum operatorsEEnum = null;

  /**
   * Creates an instance of the model <b>Package</b>, registered with
   * {@link org.eclipse.emf.ecore.EPackage.Registry EPackage.Registry} by the package
   * package URI value.
   * <p>Note: the correct way to create the package is via the static
   * factory method {@link #init init()}, which also performs
   * initialization of the package, or returns the registered package,
   * if one already exists.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.eclipse.emf.ecore.EPackage.Registry
   * @see org.xtext.nusmv.language.nuSMV.NuSMVPackage#eNS_URI
   * @see #init()
   * @generated
   */
  private NuSMVPackageImpl()
  {
    super(eNS_URI, NuSMVFactory.eINSTANCE);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private static boolean isInited = false;

  /**
   * Creates, registers, and initializes the <b>Package</b> for this model, and for any others upon which it depends.
   *
   * <p>This method is used to initialize {@link NuSMVPackage#eINSTANCE} when that field is accessed.
   * Clients should not invoke it directly. Instead, they should simply access that field to obtain the package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #eNS_URI
   * @see #createPackageContents()
   * @see #initializePackageContents()
   * @generated
   */
  public static NuSMVPackage init()
  {
    if (isInited) return (NuSMVPackage)EPackage.Registry.INSTANCE.getEPackage(NuSMVPackage.eNS_URI);

    // Obtain or create and register package
    Object registeredNuSMVPackage = EPackage.Registry.INSTANCE.get(eNS_URI);
    NuSMVPackageImpl theNuSMVPackage = registeredNuSMVPackage instanceof NuSMVPackageImpl ? (NuSMVPackageImpl)registeredNuSMVPackage : new NuSMVPackageImpl();

    isInited = true;

    // Create package meta-data objects
    theNuSMVPackage.createPackageContents();

    // Initialize created meta-data
    theNuSMVPackage.initializePackageContents();

    // Mark meta-data to indicate it can't be changed
    theNuSMVPackage.freeze();

    // Update the registry and return the package
    EPackage.Registry.INSTANCE.put(NuSMVPackage.eNS_URI, theNuSMVPackage);
    return theNuSMVPackage;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getNuSmvModel()
  {
    return nuSmvModelEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getNuSmvModel_Modules()
  {
    return (EReference)nuSmvModelEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getModule()
  {
    return moduleEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getModule_Name()
  {
    return (EAttribute)moduleEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getModule_Params()
  {
    return (EReference)moduleEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getModule_ModuleElement()
  {
    return (EReference)moduleEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getModuleElement()
  {
    return moduleElementEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getVariableDeclaration()
  {
    return variableDeclarationEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getVariableDeclaration_Vars()
  {
    return (EReference)variableDeclarationEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getIVariableDeclaration()
  {
    return iVariableDeclarationEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getIVariableDeclaration_Vars()
  {
    return (EReference)iVariableDeclarationEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getFrozenVariableDeclaration()
  {
    return frozenVariableDeclarationEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getFrozenVariableDeclaration_Vars()
  {
    return (EReference)frozenVariableDeclarationEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getVarBody()
  {
    return varBodyEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getVarBody_Name()
  {
    return (EAttribute)varBodyEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getVarBody_Type()
  {
    return (EReference)varBodyEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getVarBody_Semicolon()
  {
    return (EAttribute)varBodyEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getDefineDeclaration()
  {
    return defineDeclarationEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getDefineDeclaration_Define()
  {
    return (EAttribute)defineDeclarationEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getDefineDeclaration_DefineBodies()
  {
    return (EReference)defineDeclarationEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getDefineBody()
  {
    return defineBodyEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getDefineBody_Var()
  {
    return (EAttribute)defineBodyEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getDefineBody_Assignment()
  {
    return (EReference)defineBodyEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getDefineBody_Semicolon()
  {
    return (EAttribute)defineBodyEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getConstantsDeclaration()
  {
    return constantsDeclarationEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getConstantsDeclaration_Constants()
  {
    return (EAttribute)constantsDeclarationEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getConstantsDeclaration_Semicolon()
  {
    return (EAttribute)constantsDeclarationEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getAssignConstraintElement()
  {
    return assignConstraintElementEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getAssignConstraintElement_Assign()
  {
    return (EAttribute)assignConstraintElementEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getAssignConstraintElement_Bodies()
  {
    return (EReference)assignConstraintElementEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getAssignBody()
  {
    return assignBodyEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getAssignBody_Var()
  {
    return (EAttribute)assignBodyEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getAssignBody_Semicolon()
  {
    return (EAttribute)assignBodyEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getVarBodyAssign()
  {
    return varBodyAssignEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getVarBodyAssign_Assignment()
  {
    return (EReference)varBodyAssignEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getInitBody()
  {
    return initBodyEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getInitBody_Initial()
  {
    return (EReference)initBodyEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getNextBody()
  {
    return nextBodyEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getNextBody_Next()
  {
    return (EReference)nextBodyEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getTransConstraint()
  {
    return transConstraintEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getTransConstraint_TransExpression()
  {
    return (EReference)transConstraintEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getTransConstraint_Semicolon()
  {
    return (EAttribute)transConstraintEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getInitConstraint()
  {
    return initConstraintEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getInitConstraint_InitExpression()
  {
    return (EReference)initConstraintEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getInitConstraint_Semicolon()
  {
    return (EAttribute)initConstraintEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getInvarConstraint()
  {
    return invarConstraintEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getInvarConstraint_InvarExpression()
  {
    return (EReference)invarConstraintEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getInvarConstraint_Semicolon()
  {
    return (EAttribute)invarConstraintEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getFairnessConstraint()
  {
    return fairnessConstraintEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getFairnessConstraint_Semicolon()
  {
    return (EAttribute)fairnessConstraintEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getFairnessExpression()
  {
    return fairnessExpressionEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getFairnessExpression_FairnessExpr()
  {
    return (EReference)fairnessExpressionEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getJusticeExpression()
  {
    return justiceExpressionEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getJusticeExpression_JusticeExpr()
  {
    return (EReference)justiceExpressionEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getCompassionExpression()
  {
    return compassionExpressionEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getCompassionExpression_FirstExpr()
  {
    return (EReference)compassionExpressionEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getCompassionExpression_SecondExpr()
  {
    return (EReference)compassionExpressionEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getCtlSpecification()
  {
    return ctlSpecificationEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getCtlSpecification_SpecKeyWord()
  {
    return (EAttribute)ctlSpecificationEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getCtlSpecification_NameKeyWord()
  {
    return (EAttribute)ctlSpecificationEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getCtlSpecification_Name()
  {
    return (EAttribute)ctlSpecificationEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getCtlSpecification_CtlExpression()
  {
    return (EReference)ctlSpecificationEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getCtlSpecification_Semicolon()
  {
    return (EAttribute)ctlSpecificationEClass.getEStructuralFeatures().get(4);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getPslSpecification()
  {
    return pslSpecificationEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getPslSpecification_NameKeyWord()
  {
    return (EAttribute)pslSpecificationEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getPslSpecification_Name()
  {
    return (EAttribute)pslSpecificationEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getPslSpecification_PslExpression()
  {
    return (EReference)pslSpecificationEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getPslSpecification_Semicolon()
  {
    return (EAttribute)pslSpecificationEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getInvarSpecification()
  {
    return invarSpecificationEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getInvarSpecification_InvarSpec()
  {
    return (EReference)invarSpecificationEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getInvarSpecification_Name()
  {
    return (EAttribute)invarSpecificationEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getInvarSpecification_Semicolon()
  {
    return (EAttribute)invarSpecificationEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getIsaDeclaration()
  {
    return isaDeclarationEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getIsaDeclaration_Id()
  {
    return (EAttribute)isaDeclarationEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getLtlSpecification()
  {
    return ltlSpecificationEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getLtlSpecification_NameId()
  {
    return (EAttribute)ltlSpecificationEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getLtlSpecification_Name()
  {
    return (EAttribute)ltlSpecificationEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getLtlSpecification_LtlExpression()
  {
    return (EReference)ltlSpecificationEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getLtlSpecification_Semicolon()
  {
    return (EAttribute)ltlSpecificationEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getType()
  {
    return typeEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getSimpleType()
  {
    return simpleTypeEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getModuleType()
  {
    return moduleTypeEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getModuleType_Module()
  {
    return (EReference)moduleTypeEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getModuleType_Params()
  {
    return (EReference)moduleTypeEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getModuleType_Par()
  {
    return (EReference)moduleTypeEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getVal()
  {
    return valEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getVal_Name()
  {
    return (EAttribute)valEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getVal_Num()
  {
    return (EAttribute)valEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getNextExpression()
  {
    return nextExpressionEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getNextExpression_SimpleExpression()
  {
    return (EReference)nextExpressionEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getSimpleExpression()
  {
    return simpleExpressionEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getFormalParameter()
  {
    return formalParameterEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getFormalParameter_Name()
  {
    return (EAttribute)formalParameterEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getCaseSimpleExpression()
  {
    return caseSimpleExpressionEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getCaseSimpleExpression_Branches()
  {
    return (EReference)caseSimpleExpressionEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getCaseSimpleAssignementExpression()
  {
    return caseSimpleAssignementExpressionEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getCaseSimpleAssignementExpression_Case()
  {
    return (EReference)caseSimpleAssignementExpressionEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getCaseSimpleAssignementExpression_Assignment()
  {
    return (EReference)caseSimpleAssignementExpressionEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getCTLExpression()
  {
    return ctlExpressionEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getCTLExpression_SimpleExpression()
  {
    return (EReference)ctlExpressionEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getPSLExpression()
  {
    return pslExpressionEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getPSLExpression_SimpleExpression()
  {
    return (EReference)pslExpressionEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getLTLExpression()
  {
    return ltlExpressionEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getLTLExpression_SimpleExpression()
  {
    return (EReference)ltlExpressionEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getRangeExpression()
  {
    return rangeExpressionEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getRangeExpression_Lower()
  {
    return (EAttribute)rangeExpressionEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getRangeExpression_Upper()
  {
    return (EAttribute)rangeExpressionEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getRTCTLExpression()
  {
    return rtctlExpressionEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getComputeSpecification()
  {
    return computeSpecificationEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getComputeSpecification_MinMax()
  {
    return (EAttribute)computeSpecificationEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getComputeSpecification_First()
  {
    return (EReference)computeSpecificationEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getComputeSpecification_Second()
  {
    return (EReference)computeSpecificationEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getComputeSpecification_Semicolon()
  {
    return (EAttribute)computeSpecificationEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getBooleanType()
  {
    return booleanTypeEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getWordType()
  {
    return wordTypeEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getWordType_WordNumber()
  {
    return (EAttribute)wordTypeEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getUnsignedWordType()
  {
    return unsignedWordTypeEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getUnsignedWordType_UWordNumber()
  {
    return (EAttribute)unsignedWordTypeEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getSignedWordType()
  {
    return signedWordTypeEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getSignedWordType_SignedNumber()
  {
    return (EAttribute)signedWordTypeEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getEnumType()
  {
    return enumTypeEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getEnumType_Val()
  {
    return (EReference)enumTypeEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getIntervalType()
  {
    return intervalTypeEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getIntervalType_Low()
  {
    return (EAttribute)intervalTypeEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getIntervalType_High()
  {
    return (EAttribute)intervalTypeEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getArrayType()
  {
    return arrayTypeEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getArrayType_LowerBound()
  {
    return (EAttribute)arrayTypeEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getArrayType_UpperBound()
  {
    return (EAttribute)arrayTypeEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getArrayType_Type()
  {
    return (EReference)arrayTypeEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getAsyncrProcessType()
  {
    return asyncrProcessTypeEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getSyncrProcessType()
  {
    return syncrProcessTypeEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getBinaryExpression()
  {
    return binaryExpressionEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getBinaryExpression_Left()
  {
    return (EReference)binaryExpressionEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getBinaryExpression_Operator()
  {
    return (EAttribute)binaryExpressionEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getBinaryExpression_Right()
  {
    return (EReference)binaryExpressionEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getBinaryExpression_Op()
  {
    return (EAttribute)binaryExpressionEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getNot()
  {
    return notEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getNot_Exp()
  {
    return (EReference)notEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getParsExpression()
  {
    return parsExpressionEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getParsExpression_IsNext()
  {
    return (EAttribute)parsExpressionEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getParsExpression_SimpleExpression()
  {
    return (EReference)parsExpressionEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getUnaryExpression()
  {
    return unaryExpressionEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getUnaryExpression_Operator()
  {
    return (EAttribute)unaryExpressionEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getUnaryExpression_SimpleExpression()
  {
    return (EReference)unaryExpressionEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getValueExpression()
  {
    return valueExpressionEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getValueExpression_Value()
  {
    return (EAttribute)valueExpressionEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getValueExpression_Array()
  {
    return (EAttribute)valueExpressionEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getVar()
  {
    return varEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getVar_Value()
  {
    return (EReference)varEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getVar_Dotted()
  {
    return (EReference)varEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getVar_Array()
  {
    return (EAttribute)varEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getSetElementExpression()
  {
    return setElementExpressionEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getSetElementExpression_Val()
  {
    return (EReference)setElementExpressionEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getSetValueParameter()
  {
    return setValueParameterEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getSetValueParameter_Valparam()
  {
    return (EReference)setValueParameterEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getSetExpression()
  {
    return setExpressionEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getSetExpression_SetElement()
  {
    return (EReference)setExpressionEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getWordExpression()
  {
    return wordExpressionEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getWordExpression_Value()
  {
    return (EAttribute)wordExpressionEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getIntervalExpression()
  {
    return intervalExpressionEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getIntervalExpression_LowerBound()
  {
    return (EAttribute)intervalExpressionEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getIntervalExpression_UpperBound()
  {
    return (EAttribute)intervalExpressionEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getUntilCTLexpression()
  {
    return untilCTLexpressionEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getUntilCTLexpression_Ea()
  {
    return (EAttribute)untilCTLexpressionEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getUntilCTLexpression_Arg()
  {
    return (EReference)untilCTLexpressionEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getUnaryFunctionExpression()
  {
    return unaryFunctionExpressionEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getUnaryFunctionExpression_Function()
  {
    return (EAttribute)unaryFunctionExpressionEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getUnaryFunctionExpression_Arg()
  {
    return (EReference)unaryFunctionExpressionEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getToInt()
  {
    return toIntEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getToInt_Arg()
  {
    return (EReference)toIntEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getSingleRTCTLExpression()
  {
    return singleRTCTLExpressionEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getSingleRTCTLExpression_CtlExpression()
  {
    return (EReference)singleRTCTLExpressionEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getUnaryRTCTLExpression()
  {
    return unaryRTCTLExpressionEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getUnaryRTCTLExpression_Unary()
  {
    return (EAttribute)unaryRTCTLExpressionEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getUnaryRTCTLExpression_Range()
  {
    return (EReference)unaryRTCTLExpressionEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getUnaryRTCTLExpression_Rctl()
  {
    return (EReference)unaryRTCTLExpressionEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EEnum getoperators()
  {
    return operatorsEEnum;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NuSMVFactory getNuSMVFactory()
  {
    return (NuSMVFactory)getEFactoryInstance();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private boolean isCreated = false;

  /**
   * Creates the meta-model objects for the package.  This method is
   * guarded to have no affect on any invocation but its first.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void createPackageContents()
  {
    if (isCreated) return;
    isCreated = true;

    // Create classes and their features
    nuSmvModelEClass = createEClass(NU_SMV_MODEL);
    createEReference(nuSmvModelEClass, NU_SMV_MODEL__MODULES);

    moduleEClass = createEClass(MODULE);
    createEAttribute(moduleEClass, MODULE__NAME);
    createEReference(moduleEClass, MODULE__PARAMS);
    createEReference(moduleEClass, MODULE__MODULE_ELEMENT);

    moduleElementEClass = createEClass(MODULE_ELEMENT);

    variableDeclarationEClass = createEClass(VARIABLE_DECLARATION);
    createEReference(variableDeclarationEClass, VARIABLE_DECLARATION__VARS);

    iVariableDeclarationEClass = createEClass(IVARIABLE_DECLARATION);
    createEReference(iVariableDeclarationEClass, IVARIABLE_DECLARATION__VARS);

    frozenVariableDeclarationEClass = createEClass(FROZEN_VARIABLE_DECLARATION);
    createEReference(frozenVariableDeclarationEClass, FROZEN_VARIABLE_DECLARATION__VARS);

    varBodyEClass = createEClass(VAR_BODY);
    createEAttribute(varBodyEClass, VAR_BODY__NAME);
    createEReference(varBodyEClass, VAR_BODY__TYPE);
    createEAttribute(varBodyEClass, VAR_BODY__SEMICOLON);

    defineDeclarationEClass = createEClass(DEFINE_DECLARATION);
    createEAttribute(defineDeclarationEClass, DEFINE_DECLARATION__DEFINE);
    createEReference(defineDeclarationEClass, DEFINE_DECLARATION__DEFINE_BODIES);

    defineBodyEClass = createEClass(DEFINE_BODY);
    createEAttribute(defineBodyEClass, DEFINE_BODY__VAR);
    createEReference(defineBodyEClass, DEFINE_BODY__ASSIGNMENT);
    createEAttribute(defineBodyEClass, DEFINE_BODY__SEMICOLON);

    constantsDeclarationEClass = createEClass(CONSTANTS_DECLARATION);
    createEAttribute(constantsDeclarationEClass, CONSTANTS_DECLARATION__CONSTANTS);
    createEAttribute(constantsDeclarationEClass, CONSTANTS_DECLARATION__SEMICOLON);

    assignConstraintElementEClass = createEClass(ASSIGN_CONSTRAINT_ELEMENT);
    createEAttribute(assignConstraintElementEClass, ASSIGN_CONSTRAINT_ELEMENT__ASSIGN);
    createEReference(assignConstraintElementEClass, ASSIGN_CONSTRAINT_ELEMENT__BODIES);

    assignBodyEClass = createEClass(ASSIGN_BODY);
    createEAttribute(assignBodyEClass, ASSIGN_BODY__VAR);
    createEAttribute(assignBodyEClass, ASSIGN_BODY__SEMICOLON);

    varBodyAssignEClass = createEClass(VAR_BODY_ASSIGN);
    createEReference(varBodyAssignEClass, VAR_BODY_ASSIGN__ASSIGNMENT);

    initBodyEClass = createEClass(INIT_BODY);
    createEReference(initBodyEClass, INIT_BODY__INITIAL);

    nextBodyEClass = createEClass(NEXT_BODY);
    createEReference(nextBodyEClass, NEXT_BODY__NEXT);

    transConstraintEClass = createEClass(TRANS_CONSTRAINT);
    createEReference(transConstraintEClass, TRANS_CONSTRAINT__TRANS_EXPRESSION);
    createEAttribute(transConstraintEClass, TRANS_CONSTRAINT__SEMICOLON);

    initConstraintEClass = createEClass(INIT_CONSTRAINT);
    createEReference(initConstraintEClass, INIT_CONSTRAINT__INIT_EXPRESSION);
    createEAttribute(initConstraintEClass, INIT_CONSTRAINT__SEMICOLON);

    invarConstraintEClass = createEClass(INVAR_CONSTRAINT);
    createEReference(invarConstraintEClass, INVAR_CONSTRAINT__INVAR_EXPRESSION);
    createEAttribute(invarConstraintEClass, INVAR_CONSTRAINT__SEMICOLON);

    fairnessConstraintEClass = createEClass(FAIRNESS_CONSTRAINT);
    createEAttribute(fairnessConstraintEClass, FAIRNESS_CONSTRAINT__SEMICOLON);

    fairnessExpressionEClass = createEClass(FAIRNESS_EXPRESSION);
    createEReference(fairnessExpressionEClass, FAIRNESS_EXPRESSION__FAIRNESS_EXPR);

    justiceExpressionEClass = createEClass(JUSTICE_EXPRESSION);
    createEReference(justiceExpressionEClass, JUSTICE_EXPRESSION__JUSTICE_EXPR);

    compassionExpressionEClass = createEClass(COMPASSION_EXPRESSION);
    createEReference(compassionExpressionEClass, COMPASSION_EXPRESSION__FIRST_EXPR);
    createEReference(compassionExpressionEClass, COMPASSION_EXPRESSION__SECOND_EXPR);

    ctlSpecificationEClass = createEClass(CTL_SPECIFICATION);
    createEAttribute(ctlSpecificationEClass, CTL_SPECIFICATION__SPEC_KEY_WORD);
    createEAttribute(ctlSpecificationEClass, CTL_SPECIFICATION__NAME_KEY_WORD);
    createEAttribute(ctlSpecificationEClass, CTL_SPECIFICATION__NAME);
    createEReference(ctlSpecificationEClass, CTL_SPECIFICATION__CTL_EXPRESSION);
    createEAttribute(ctlSpecificationEClass, CTL_SPECIFICATION__SEMICOLON);

    pslSpecificationEClass = createEClass(PSL_SPECIFICATION);
    createEAttribute(pslSpecificationEClass, PSL_SPECIFICATION__NAME_KEY_WORD);
    createEAttribute(pslSpecificationEClass, PSL_SPECIFICATION__NAME);
    createEReference(pslSpecificationEClass, PSL_SPECIFICATION__PSL_EXPRESSION);
    createEAttribute(pslSpecificationEClass, PSL_SPECIFICATION__SEMICOLON);

    invarSpecificationEClass = createEClass(INVAR_SPECIFICATION);
    createEReference(invarSpecificationEClass, INVAR_SPECIFICATION__INVAR_SPEC);
    createEAttribute(invarSpecificationEClass, INVAR_SPECIFICATION__NAME);
    createEAttribute(invarSpecificationEClass, INVAR_SPECIFICATION__SEMICOLON);

    isaDeclarationEClass = createEClass(ISA_DECLARATION);
    createEAttribute(isaDeclarationEClass, ISA_DECLARATION__ID);

    ltlSpecificationEClass = createEClass(LTL_SPECIFICATION);
    createEAttribute(ltlSpecificationEClass, LTL_SPECIFICATION__NAME_ID);
    createEAttribute(ltlSpecificationEClass, LTL_SPECIFICATION__NAME);
    createEReference(ltlSpecificationEClass, LTL_SPECIFICATION__LTL_EXPRESSION);
    createEAttribute(ltlSpecificationEClass, LTL_SPECIFICATION__SEMICOLON);

    typeEClass = createEClass(TYPE);

    simpleTypeEClass = createEClass(SIMPLE_TYPE);

    moduleTypeEClass = createEClass(MODULE_TYPE);
    createEReference(moduleTypeEClass, MODULE_TYPE__MODULE);
    createEReference(moduleTypeEClass, MODULE_TYPE__PARAMS);
    createEReference(moduleTypeEClass, MODULE_TYPE__PAR);

    valEClass = createEClass(VAL);
    createEAttribute(valEClass, VAL__NAME);
    createEAttribute(valEClass, VAL__NUM);

    nextExpressionEClass = createEClass(NEXT_EXPRESSION);
    createEReference(nextExpressionEClass, NEXT_EXPRESSION__SIMPLE_EXPRESSION);

    simpleExpressionEClass = createEClass(SIMPLE_EXPRESSION);

    formalParameterEClass = createEClass(FORMAL_PARAMETER);
    createEAttribute(formalParameterEClass, FORMAL_PARAMETER__NAME);

    caseSimpleExpressionEClass = createEClass(CASE_SIMPLE_EXPRESSION);
    createEReference(caseSimpleExpressionEClass, CASE_SIMPLE_EXPRESSION__BRANCHES);

    caseSimpleAssignementExpressionEClass = createEClass(CASE_SIMPLE_ASSIGNEMENT_EXPRESSION);
    createEReference(caseSimpleAssignementExpressionEClass, CASE_SIMPLE_ASSIGNEMENT_EXPRESSION__CASE);
    createEReference(caseSimpleAssignementExpressionEClass, CASE_SIMPLE_ASSIGNEMENT_EXPRESSION__ASSIGNMENT);

    ctlExpressionEClass = createEClass(CTL_EXPRESSION);
    createEReference(ctlExpressionEClass, CTL_EXPRESSION__SIMPLE_EXPRESSION);

    pslExpressionEClass = createEClass(PSL_EXPRESSION);
    createEReference(pslExpressionEClass, PSL_EXPRESSION__SIMPLE_EXPRESSION);

    ltlExpressionEClass = createEClass(LTL_EXPRESSION);
    createEReference(ltlExpressionEClass, LTL_EXPRESSION__SIMPLE_EXPRESSION);

    rangeExpressionEClass = createEClass(RANGE_EXPRESSION);
    createEAttribute(rangeExpressionEClass, RANGE_EXPRESSION__LOWER);
    createEAttribute(rangeExpressionEClass, RANGE_EXPRESSION__UPPER);

    rtctlExpressionEClass = createEClass(RTCTL_EXPRESSION);

    computeSpecificationEClass = createEClass(COMPUTE_SPECIFICATION);
    createEAttribute(computeSpecificationEClass, COMPUTE_SPECIFICATION__MIN_MAX);
    createEReference(computeSpecificationEClass, COMPUTE_SPECIFICATION__FIRST);
    createEReference(computeSpecificationEClass, COMPUTE_SPECIFICATION__SECOND);
    createEAttribute(computeSpecificationEClass, COMPUTE_SPECIFICATION__SEMICOLON);

    booleanTypeEClass = createEClass(BOOLEAN_TYPE);

    wordTypeEClass = createEClass(WORD_TYPE);
    createEAttribute(wordTypeEClass, WORD_TYPE__WORD_NUMBER);

    unsignedWordTypeEClass = createEClass(UNSIGNED_WORD_TYPE);
    createEAttribute(unsignedWordTypeEClass, UNSIGNED_WORD_TYPE__UWORD_NUMBER);

    signedWordTypeEClass = createEClass(SIGNED_WORD_TYPE);
    createEAttribute(signedWordTypeEClass, SIGNED_WORD_TYPE__SIGNED_NUMBER);

    enumTypeEClass = createEClass(ENUM_TYPE);
    createEReference(enumTypeEClass, ENUM_TYPE__VAL);

    intervalTypeEClass = createEClass(INTERVAL_TYPE);
    createEAttribute(intervalTypeEClass, INTERVAL_TYPE__LOW);
    createEAttribute(intervalTypeEClass, INTERVAL_TYPE__HIGH);

    arrayTypeEClass = createEClass(ARRAY_TYPE);
    createEAttribute(arrayTypeEClass, ARRAY_TYPE__LOWER_BOUND);
    createEAttribute(arrayTypeEClass, ARRAY_TYPE__UPPER_BOUND);
    createEReference(arrayTypeEClass, ARRAY_TYPE__TYPE);

    asyncrProcessTypeEClass = createEClass(ASYNCR_PROCESS_TYPE);

    syncrProcessTypeEClass = createEClass(SYNCR_PROCESS_TYPE);

    binaryExpressionEClass = createEClass(BINARY_EXPRESSION);
    createEReference(binaryExpressionEClass, BINARY_EXPRESSION__LEFT);
    createEAttribute(binaryExpressionEClass, BINARY_EXPRESSION__OPERATOR);
    createEReference(binaryExpressionEClass, BINARY_EXPRESSION__RIGHT);
    createEAttribute(binaryExpressionEClass, BINARY_EXPRESSION__OP);

    notEClass = createEClass(NOT);
    createEReference(notEClass, NOT__EXP);

    parsExpressionEClass = createEClass(PARS_EXPRESSION);
    createEAttribute(parsExpressionEClass, PARS_EXPRESSION__IS_NEXT);
    createEReference(parsExpressionEClass, PARS_EXPRESSION__SIMPLE_EXPRESSION);

    unaryExpressionEClass = createEClass(UNARY_EXPRESSION);
    createEAttribute(unaryExpressionEClass, UNARY_EXPRESSION__OPERATOR);
    createEReference(unaryExpressionEClass, UNARY_EXPRESSION__SIMPLE_EXPRESSION);

    valueExpressionEClass = createEClass(VALUE_EXPRESSION);
    createEAttribute(valueExpressionEClass, VALUE_EXPRESSION__VALUE);
    createEAttribute(valueExpressionEClass, VALUE_EXPRESSION__ARRAY);

    varEClass = createEClass(VAR);
    createEReference(varEClass, VAR__VALUE);
    createEReference(varEClass, VAR__DOTTED);
    createEAttribute(varEClass, VAR__ARRAY);

    setElementExpressionEClass = createEClass(SET_ELEMENT_EXPRESSION);
    createEReference(setElementExpressionEClass, SET_ELEMENT_EXPRESSION__VAL);

    setValueParameterEClass = createEClass(SET_VALUE_PARAMETER);
    createEReference(setValueParameterEClass, SET_VALUE_PARAMETER__VALPARAM);

    setExpressionEClass = createEClass(SET_EXPRESSION);
    createEReference(setExpressionEClass, SET_EXPRESSION__SET_ELEMENT);

    wordExpressionEClass = createEClass(WORD_EXPRESSION);
    createEAttribute(wordExpressionEClass, WORD_EXPRESSION__VALUE);

    intervalExpressionEClass = createEClass(INTERVAL_EXPRESSION);
    createEAttribute(intervalExpressionEClass, INTERVAL_EXPRESSION__LOWER_BOUND);
    createEAttribute(intervalExpressionEClass, INTERVAL_EXPRESSION__UPPER_BOUND);

    untilCTLexpressionEClass = createEClass(UNTIL_CT_LEXPRESSION);
    createEAttribute(untilCTLexpressionEClass, UNTIL_CT_LEXPRESSION__EA);
    createEReference(untilCTLexpressionEClass, UNTIL_CT_LEXPRESSION__ARG);

    unaryFunctionExpressionEClass = createEClass(UNARY_FUNCTION_EXPRESSION);
    createEAttribute(unaryFunctionExpressionEClass, UNARY_FUNCTION_EXPRESSION__FUNCTION);
    createEReference(unaryFunctionExpressionEClass, UNARY_FUNCTION_EXPRESSION__ARG);

    toIntEClass = createEClass(TO_INT);
    createEReference(toIntEClass, TO_INT__ARG);

    singleRTCTLExpressionEClass = createEClass(SINGLE_RTCTL_EXPRESSION);
    createEReference(singleRTCTLExpressionEClass, SINGLE_RTCTL_EXPRESSION__CTL_EXPRESSION);

    unaryRTCTLExpressionEClass = createEClass(UNARY_RTCTL_EXPRESSION);
    createEAttribute(unaryRTCTLExpressionEClass, UNARY_RTCTL_EXPRESSION__UNARY);
    createEReference(unaryRTCTLExpressionEClass, UNARY_RTCTL_EXPRESSION__RANGE);
    createEReference(unaryRTCTLExpressionEClass, UNARY_RTCTL_EXPRESSION__RCTL);

    // Create enums
    operatorsEEnum = createEEnum(OPERATORS);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private boolean isInitialized = false;

  /**
   * Complete the initialization of the package and its meta-model.  This
   * method is guarded to have no affect on any invocation but its first.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void initializePackageContents()
  {
    if (isInitialized) return;
    isInitialized = true;

    // Initialize package
    setName(eNAME);
    setNsPrefix(eNS_PREFIX);
    setNsURI(eNS_URI);

    // Create type parameters

    // Set bounds for type parameters

    // Add supertypes to classes
    variableDeclarationEClass.getESuperTypes().add(this.getModuleElement());
    iVariableDeclarationEClass.getESuperTypes().add(this.getModuleElement());
    frozenVariableDeclarationEClass.getESuperTypes().add(this.getModuleElement());
    defineDeclarationEClass.getESuperTypes().add(this.getModuleElement());
    constantsDeclarationEClass.getESuperTypes().add(this.getModuleElement());
    assignConstraintElementEClass.getESuperTypes().add(this.getModuleElement());
    varBodyAssignEClass.getESuperTypes().add(this.getAssignBody());
    initBodyEClass.getESuperTypes().add(this.getAssignBody());
    nextBodyEClass.getESuperTypes().add(this.getAssignBody());
    transConstraintEClass.getESuperTypes().add(this.getModuleElement());
    initConstraintEClass.getESuperTypes().add(this.getModuleElement());
    invarConstraintEClass.getESuperTypes().add(this.getModuleElement());
    fairnessConstraintEClass.getESuperTypes().add(this.getModuleElement());
    fairnessExpressionEClass.getESuperTypes().add(this.getFairnessConstraint());
    justiceExpressionEClass.getESuperTypes().add(this.getFairnessConstraint());
    compassionExpressionEClass.getESuperTypes().add(this.getFairnessConstraint());
    ctlSpecificationEClass.getESuperTypes().add(this.getModuleElement());
    pslSpecificationEClass.getESuperTypes().add(this.getModuleElement());
    invarSpecificationEClass.getESuperTypes().add(this.getModuleElement());
    isaDeclarationEClass.getESuperTypes().add(this.getModuleElement());
    ltlSpecificationEClass.getESuperTypes().add(this.getModuleElement());
    simpleTypeEClass.getESuperTypes().add(this.getType());
    moduleTypeEClass.getESuperTypes().add(this.getType());
    caseSimpleExpressionEClass.getESuperTypes().add(this.getSimpleExpression());
    computeSpecificationEClass.getESuperTypes().add(this.getModuleElement());
    booleanTypeEClass.getESuperTypes().add(this.getSimpleType());
    wordTypeEClass.getESuperTypes().add(this.getSimpleType());
    unsignedWordTypeEClass.getESuperTypes().add(this.getSimpleType());
    signedWordTypeEClass.getESuperTypes().add(this.getSimpleType());
    enumTypeEClass.getESuperTypes().add(this.getSimpleType());
    intervalTypeEClass.getESuperTypes().add(this.getSimpleType());
    arrayTypeEClass.getESuperTypes().add(this.getSimpleType());
    asyncrProcessTypeEClass.getESuperTypes().add(this.getModuleType());
    syncrProcessTypeEClass.getESuperTypes().add(this.getModuleType());
    binaryExpressionEClass.getESuperTypes().add(this.getSimpleExpression());
    notEClass.getESuperTypes().add(this.getSimpleExpression());
    parsExpressionEClass.getESuperTypes().add(this.getSimpleExpression());
    unaryExpressionEClass.getESuperTypes().add(this.getSimpleExpression());
    valueExpressionEClass.getESuperTypes().add(this.getSimpleExpression());
    varEClass.getESuperTypes().add(this.getSimpleExpression());
    setElementExpressionEClass.getESuperTypes().add(this.getSimpleExpression());
    setValueParameterEClass.getESuperTypes().add(this.getSimpleExpression());
    setExpressionEClass.getESuperTypes().add(this.getSimpleExpression());
    wordExpressionEClass.getESuperTypes().add(this.getSimpleExpression());
    intervalExpressionEClass.getESuperTypes().add(this.getSimpleExpression());
    untilCTLexpressionEClass.getESuperTypes().add(this.getSimpleExpression());
    unaryFunctionExpressionEClass.getESuperTypes().add(this.getSimpleExpression());
    toIntEClass.getESuperTypes().add(this.getSimpleExpression());
    singleRTCTLExpressionEClass.getESuperTypes().add(this.getRTCTLExpression());
    unaryRTCTLExpressionEClass.getESuperTypes().add(this.getRTCTLExpression());

    // Initialize classes and features; add operations and parameters
    initEClass(nuSmvModelEClass, NuSmvModel.class, "NuSmvModel", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getNuSmvModel_Modules(), this.getModule(), null, "modules", null, 0, -1, NuSmvModel.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(moduleEClass, org.xtext.nusmv.language.nuSMV.Module.class, "Module", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getModule_Name(), ecorePackage.getEString(), "name", null, 0, 1, org.xtext.nusmv.language.nuSMV.Module.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getModule_Params(), this.getFormalParameter(), null, "params", null, 0, -1, org.xtext.nusmv.language.nuSMV.Module.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getModule_ModuleElement(), this.getModuleElement(), null, "moduleElement", null, 0, -1, org.xtext.nusmv.language.nuSMV.Module.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(moduleElementEClass, ModuleElement.class, "ModuleElement", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(variableDeclarationEClass, VariableDeclaration.class, "VariableDeclaration", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getVariableDeclaration_Vars(), this.getVarBody(), null, "vars", null, 0, -1, VariableDeclaration.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(iVariableDeclarationEClass, IVariableDeclaration.class, "IVariableDeclaration", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getIVariableDeclaration_Vars(), this.getVarBody(), null, "vars", null, 0, -1, IVariableDeclaration.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(frozenVariableDeclarationEClass, FrozenVariableDeclaration.class, "FrozenVariableDeclaration", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getFrozenVariableDeclaration_Vars(), this.getVarBody(), null, "vars", null, 0, -1, FrozenVariableDeclaration.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(varBodyEClass, VarBody.class, "VarBody", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getVarBody_Name(), ecorePackage.getEString(), "name", null, 0, 1, VarBody.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getVarBody_Type(), this.getType(), null, "type", null, 0, 1, VarBody.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getVarBody_Semicolon(), ecorePackage.getEBoolean(), "semicolon", null, 0, 1, VarBody.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(defineDeclarationEClass, DefineDeclaration.class, "DefineDeclaration", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getDefineDeclaration_Define(), ecorePackage.getEString(), "define", null, 0, 1, DefineDeclaration.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getDefineDeclaration_DefineBodies(), this.getDefineBody(), null, "defineBodies", null, 0, -1, DefineDeclaration.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(defineBodyEClass, DefineBody.class, "DefineBody", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getDefineBody_Var(), ecorePackage.getEString(), "var", null, 0, 1, DefineBody.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getDefineBody_Assignment(), this.getSimpleExpression(), null, "assignment", null, 0, 1, DefineBody.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getDefineBody_Semicolon(), ecorePackage.getEBoolean(), "semicolon", null, 0, 1, DefineBody.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(constantsDeclarationEClass, ConstantsDeclaration.class, "ConstantsDeclaration", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getConstantsDeclaration_Constants(), ecorePackage.getEString(), "constants", null, 0, -1, ConstantsDeclaration.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, !IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getConstantsDeclaration_Semicolon(), ecorePackage.getEBoolean(), "semicolon", null, 0, 1, ConstantsDeclaration.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(assignConstraintElementEClass, AssignConstraintElement.class, "AssignConstraintElement", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getAssignConstraintElement_Assign(), ecorePackage.getEString(), "assign", null, 0, 1, AssignConstraintElement.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getAssignConstraintElement_Bodies(), this.getAssignBody(), null, "bodies", null, 0, -1, AssignConstraintElement.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(assignBodyEClass, AssignBody.class, "AssignBody", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getAssignBody_Var(), ecorePackage.getEString(), "var", null, 0, 1, AssignBody.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getAssignBody_Semicolon(), ecorePackage.getEBoolean(), "semicolon", null, 0, 1, AssignBody.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(varBodyAssignEClass, VarBodyAssign.class, "VarBodyAssign", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getVarBodyAssign_Assignment(), this.getSimpleExpression(), null, "assignment", null, 0, 1, VarBodyAssign.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(initBodyEClass, InitBody.class, "InitBody", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getInitBody_Initial(), this.getSimpleExpression(), null, "initial", null, 0, 1, InitBody.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(nextBodyEClass, NextBody.class, "NextBody", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getNextBody_Next(), this.getNextExpression(), null, "next", null, 0, 1, NextBody.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(transConstraintEClass, TransConstraint.class, "TransConstraint", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getTransConstraint_TransExpression(), this.getSimpleExpression(), null, "transExpression", null, 0, 1, TransConstraint.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getTransConstraint_Semicolon(), ecorePackage.getEBoolean(), "semicolon", null, 0, 1, TransConstraint.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(initConstraintEClass, InitConstraint.class, "InitConstraint", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getInitConstraint_InitExpression(), this.getSimpleExpression(), null, "initExpression", null, 0, 1, InitConstraint.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getInitConstraint_Semicolon(), ecorePackage.getEBoolean(), "semicolon", null, 0, 1, InitConstraint.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(invarConstraintEClass, InvarConstraint.class, "InvarConstraint", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getInvarConstraint_InvarExpression(), this.getSimpleExpression(), null, "invarExpression", null, 0, 1, InvarConstraint.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getInvarConstraint_Semicolon(), ecorePackage.getEBoolean(), "semicolon", null, 0, 1, InvarConstraint.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(fairnessConstraintEClass, FairnessConstraint.class, "FairnessConstraint", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getFairnessConstraint_Semicolon(), ecorePackage.getEBoolean(), "semicolon", null, 0, 1, FairnessConstraint.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(fairnessExpressionEClass, FairnessExpression.class, "FairnessExpression", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getFairnessExpression_FairnessExpr(), this.getSimpleExpression(), null, "fairnessExpr", null, 0, 1, FairnessExpression.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(justiceExpressionEClass, JusticeExpression.class, "JusticeExpression", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getJusticeExpression_JusticeExpr(), this.getSimpleExpression(), null, "justiceExpr", null, 0, 1, JusticeExpression.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(compassionExpressionEClass, CompassionExpression.class, "CompassionExpression", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getCompassionExpression_FirstExpr(), this.getSimpleExpression(), null, "firstExpr", null, 0, 1, CompassionExpression.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getCompassionExpression_SecondExpr(), this.getSimpleExpression(), null, "secondExpr", null, 0, 1, CompassionExpression.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(ctlSpecificationEClass, CtlSpecification.class, "CtlSpecification", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getCtlSpecification_SpecKeyWord(), ecorePackage.getEString(), "specKeyWord", null, 0, 1, CtlSpecification.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getCtlSpecification_NameKeyWord(), ecorePackage.getEBoolean(), "nameKeyWord", null, 0, 1, CtlSpecification.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getCtlSpecification_Name(), ecorePackage.getEString(), "name", null, 0, 1, CtlSpecification.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getCtlSpecification_CtlExpression(), this.getCTLExpression(), null, "ctlExpression", null, 0, 1, CtlSpecification.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getCtlSpecification_Semicolon(), ecorePackage.getEBoolean(), "semicolon", null, 0, 1, CtlSpecification.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(pslSpecificationEClass, PslSpecification.class, "PslSpecification", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getPslSpecification_NameKeyWord(), ecorePackage.getEBoolean(), "nameKeyWord", null, 0, 1, PslSpecification.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getPslSpecification_Name(), ecorePackage.getEString(), "name", null, 0, 1, PslSpecification.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getPslSpecification_PslExpression(), this.getPSLExpression(), null, "pslExpression", null, 0, 1, PslSpecification.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getPslSpecification_Semicolon(), ecorePackage.getEBoolean(), "semicolon", null, 0, 1, PslSpecification.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(invarSpecificationEClass, InvarSpecification.class, "InvarSpecification", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getInvarSpecification_InvarSpec(), this.getNextExpression(), null, "invarSpec", null, 0, 1, InvarSpecification.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getInvarSpecification_Name(), ecorePackage.getEString(), "name", null, 0, 1, InvarSpecification.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getInvarSpecification_Semicolon(), ecorePackage.getEBoolean(), "semicolon", null, 0, 1, InvarSpecification.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(isaDeclarationEClass, IsaDeclaration.class, "IsaDeclaration", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getIsaDeclaration_Id(), ecorePackage.getEString(), "id", null, 0, 1, IsaDeclaration.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(ltlSpecificationEClass, LtlSpecification.class, "LtlSpecification", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getLtlSpecification_NameId(), ecorePackage.getEBoolean(), "nameId", null, 0, 1, LtlSpecification.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getLtlSpecification_Name(), ecorePackage.getEString(), "name", null, 0, 1, LtlSpecification.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getLtlSpecification_LtlExpression(), this.getLTLExpression(), null, "ltlExpression", null, 0, 1, LtlSpecification.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getLtlSpecification_Semicolon(), ecorePackage.getEBoolean(), "semicolon", null, 0, 1, LtlSpecification.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(typeEClass, Type.class, "Type", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(simpleTypeEClass, SimpleType.class, "SimpleType", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(moduleTypeEClass, ModuleType.class, "ModuleType", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getModuleType_Module(), this.getModule(), null, "module", null, 0, 1, ModuleType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getModuleType_Params(), this.getSimpleExpression(), null, "params", null, 0, -1, ModuleType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getModuleType_Par(), this.getVarBody(), null, "par", null, 0, 1, ModuleType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(valEClass, Val.class, "Val", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getVal_Name(), ecorePackage.getEString(), "name", null, 0, 1, Val.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getVal_Num(), ecorePackage.getEString(), "num", null, 0, 1, Val.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(nextExpressionEClass, NextExpression.class, "NextExpression", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getNextExpression_SimpleExpression(), this.getSimpleExpression(), null, "simpleExpression", null, 0, 1, NextExpression.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(simpleExpressionEClass, SimpleExpression.class, "SimpleExpression", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(formalParameterEClass, FormalParameter.class, "FormalParameter", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getFormalParameter_Name(), ecorePackage.getEString(), "name", null, 0, 1, FormalParameter.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(caseSimpleExpressionEClass, CaseSimpleExpression.class, "CaseSimpleExpression", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getCaseSimpleExpression_Branches(), this.getCaseSimpleAssignementExpression(), null, "branches", null, 0, -1, CaseSimpleExpression.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(caseSimpleAssignementExpressionEClass, CaseSimpleAssignementExpression.class, "CaseSimpleAssignementExpression", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getCaseSimpleAssignementExpression_Case(), this.getSimpleExpression(), null, "case", null, 0, 1, CaseSimpleAssignementExpression.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getCaseSimpleAssignementExpression_Assignment(), this.getSimpleExpression(), null, "assignment", null, 0, 1, CaseSimpleAssignementExpression.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(ctlExpressionEClass, CTLExpression.class, "CTLExpression", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getCTLExpression_SimpleExpression(), this.getSimpleExpression(), null, "simpleExpression", null, 0, 1, CTLExpression.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(pslExpressionEClass, PSLExpression.class, "PSLExpression", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getPSLExpression_SimpleExpression(), this.getSimpleExpression(), null, "simpleExpression", null, 0, 1, PSLExpression.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(ltlExpressionEClass, LTLExpression.class, "LTLExpression", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getLTLExpression_SimpleExpression(), this.getSimpleExpression(), null, "simpleExpression", null, 0, 1, LTLExpression.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(rangeExpressionEClass, RangeExpression.class, "RangeExpression", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getRangeExpression_Lower(), ecorePackage.getEString(), "lower", null, 0, 1, RangeExpression.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getRangeExpression_Upper(), ecorePackage.getEString(), "upper", null, 0, 1, RangeExpression.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(rtctlExpressionEClass, RTCTLExpression.class, "RTCTLExpression", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(computeSpecificationEClass, ComputeSpecification.class, "ComputeSpecification", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getComputeSpecification_MinMax(), ecorePackage.getEString(), "minMax", null, 0, 1, ComputeSpecification.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getComputeSpecification_First(), this.getRTCTLExpression(), null, "first", null, 0, 1, ComputeSpecification.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getComputeSpecification_Second(), this.getRTCTLExpression(), null, "second", null, 0, 1, ComputeSpecification.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getComputeSpecification_Semicolon(), ecorePackage.getEBoolean(), "semicolon", null, 0, 1, ComputeSpecification.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(booleanTypeEClass, BooleanType.class, "BooleanType", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(wordTypeEClass, WordType.class, "WordType", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getWordType_WordNumber(), ecorePackage.getEString(), "wordNumber", null, 0, 1, WordType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(unsignedWordTypeEClass, UnsignedWordType.class, "UnsignedWordType", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getUnsignedWordType_UWordNumber(), ecorePackage.getEString(), "uWordNumber", null, 0, 1, UnsignedWordType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(signedWordTypeEClass, SignedWordType.class, "SignedWordType", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getSignedWordType_SignedNumber(), ecorePackage.getEString(), "signedNumber", null, 0, 1, SignedWordType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(enumTypeEClass, EnumType.class, "EnumType", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getEnumType_Val(), this.getVal(), null, "val", null, 0, -1, EnumType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(intervalTypeEClass, IntervalType.class, "IntervalType", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getIntervalType_Low(), ecorePackage.getEString(), "low", null, 0, 1, IntervalType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getIntervalType_High(), ecorePackage.getEString(), "high", null, 0, 1, IntervalType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(arrayTypeEClass, ArrayType.class, "ArrayType", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getArrayType_LowerBound(), ecorePackage.getEString(), "lowerBound", null, 0, 1, ArrayType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getArrayType_UpperBound(), ecorePackage.getEString(), "upperBound", null, 0, 1, ArrayType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getArrayType_Type(), this.getSimpleType(), null, "type", null, 0, 1, ArrayType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(asyncrProcessTypeEClass, AsyncrProcessType.class, "AsyncrProcessType", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(syncrProcessTypeEClass, SyncrProcessType.class, "SyncrProcessType", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(binaryExpressionEClass, BinaryExpression.class, "BinaryExpression", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getBinaryExpression_Left(), this.getSimpleExpression(), null, "left", null, 0, 1, BinaryExpression.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getBinaryExpression_Operator(), this.getoperators(), "operator", null, 0, 1, BinaryExpression.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getBinaryExpression_Right(), this.getSimpleExpression(), null, "right", null, 0, 1, BinaryExpression.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getBinaryExpression_Op(), ecorePackage.getEString(), "op", null, 0, 1, BinaryExpression.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(notEClass, Not.class, "Not", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getNot_Exp(), this.getSimpleExpression(), null, "exp", null, 0, 1, Not.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(parsExpressionEClass, ParsExpression.class, "ParsExpression", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getParsExpression_IsNext(), ecorePackage.getEString(), "isNext", null, 0, 1, ParsExpression.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getParsExpression_SimpleExpression(), this.getSimpleExpression(), null, "simpleExpression", null, 0, 1, ParsExpression.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(unaryExpressionEClass, UnaryExpression.class, "UnaryExpression", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getUnaryExpression_Operator(), ecorePackage.getEString(), "operator", null, 0, 1, UnaryExpression.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getUnaryExpression_SimpleExpression(), this.getSimpleExpression(), null, "simpleExpression", null, 0, 1, UnaryExpression.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(valueExpressionEClass, ValueExpression.class, "ValueExpression", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getValueExpression_Value(), ecorePackage.getEString(), "value", null, 0, 1, ValueExpression.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getValueExpression_Array(), ecorePackage.getEString(), "array", null, 0, -1, ValueExpression.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, !IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(varEClass, Var.class, "Var", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getVar_Value(), this.getVarBody(), null, "value", null, 0, 1, Var.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getVar_Dotted(), this.getSimpleExpression(), null, "dotted", null, 0, 1, Var.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getVar_Array(), ecorePackage.getEString(), "array", null, 0, -1, Var.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, !IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(setElementExpressionEClass, SetElementExpression.class, "SetElementExpression", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getSetElementExpression_Val(), this.getVal(), null, "val", null, 0, 1, SetElementExpression.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(setValueParameterEClass, SetValueParameter.class, "SetValueParameter", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getSetValueParameter_Valparam(), this.getFormalParameter(), null, "valparam", null, 0, 1, SetValueParameter.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(setExpressionEClass, SetExpression.class, "SetExpression", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getSetExpression_SetElement(), this.getSimpleExpression(), null, "setElement", null, 0, -1, SetExpression.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(wordExpressionEClass, WordExpression.class, "WordExpression", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getWordExpression_Value(), ecorePackage.getEString(), "value", null, 0, 1, WordExpression.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(intervalExpressionEClass, IntervalExpression.class, "IntervalExpression", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getIntervalExpression_LowerBound(), ecorePackage.getEString(), "lowerBound", null, 0, 1, IntervalExpression.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getIntervalExpression_UpperBound(), ecorePackage.getEString(), "upperBound", null, 0, 1, IntervalExpression.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(untilCTLexpressionEClass, UntilCTLexpression.class, "UntilCTLexpression", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getUntilCTLexpression_Ea(), ecorePackage.getEString(), "ea", null, 0, 1, UntilCTLexpression.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getUntilCTLexpression_Arg(), this.getSimpleExpression(), null, "arg", null, 0, 1, UntilCTLexpression.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(unaryFunctionExpressionEClass, UnaryFunctionExpression.class, "UnaryFunctionExpression", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getUnaryFunctionExpression_Function(), ecorePackage.getEString(), "function", null, 0, 1, UnaryFunctionExpression.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getUnaryFunctionExpression_Arg(), this.getSimpleExpression(), null, "arg", null, 0, 1, UnaryFunctionExpression.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(toIntEClass, ToInt.class, "ToInt", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getToInt_Arg(), this.getSimpleExpression(), null, "arg", null, 0, 1, ToInt.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(singleRTCTLExpressionEClass, SingleRTCTLExpression.class, "SingleRTCTLExpression", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getSingleRTCTLExpression_CtlExpression(), ecorePackage.getEObject(), null, "ctlExpression", null, 0, 1, SingleRTCTLExpression.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(unaryRTCTLExpressionEClass, UnaryRTCTLExpression.class, "UnaryRTCTLExpression", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getUnaryRTCTLExpression_Unary(), ecorePackage.getEString(), "unary", null, 0, 1, UnaryRTCTLExpression.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getUnaryRTCTLExpression_Range(), this.getRangeExpression(), null, "range", null, 0, 1, UnaryRTCTLExpression.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getUnaryRTCTLExpression_Rctl(), this.getRTCTLExpression(), null, "rctl", null, 0, 1, UnaryRTCTLExpression.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    // Initialize enums and add enum literals
    initEEnum(operatorsEEnum, operators.class, "operators");
    addEEnumLiteral(operatorsEEnum, operators.EQUAL);
    addEEnumLiteral(operatorsEEnum, operators.DIS);
    addEEnumLiteral(operatorsEEnum, operators.L);
    addEEnumLiteral(operatorsEEnum, operators.G);
    addEEnumLiteral(operatorsEEnum, operators.LE);
    addEEnumLiteral(operatorsEEnum, operators.GE);
    addEEnumLiteral(operatorsEEnum, operators.OR);
    addEEnumLiteral(operatorsEEnum, operators.XOR);
    addEEnumLiteral(operatorsEEnum, operators.XNOR);
    addEEnumLiteral(operatorsEEnum, operators.IMPLIES);
    addEEnumLiteral(operatorsEEnum, operators.IFF);
    addEEnumLiteral(operatorsEEnum, operators.AND);
    addEEnumLiteral(operatorsEEnum, operators.U);
    addEEnumLiteral(operatorsEEnum, operators.V);
    addEEnumLiteral(operatorsEEnum, operators.S);
    addEEnumLiteral(operatorsEEnum, operators.T);

    // Create resource
    createResource(eNS_URI);
  }

} //NuSMVPackageImpl
