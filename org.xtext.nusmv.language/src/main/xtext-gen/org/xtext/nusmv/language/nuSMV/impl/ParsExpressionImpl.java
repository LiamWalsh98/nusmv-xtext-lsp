/**
 * generated by Xtext 2.21.0
 */
package org.xtext.nusmv.language.nuSMV.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.xtext.nusmv.language.nuSMV.NuSMVPackage;
import org.xtext.nusmv.language.nuSMV.ParsExpression;
import org.xtext.nusmv.language.nuSMV.SimpleExpression;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Pars Expression</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.nusmv.language.nuSMV.impl.ParsExpressionImpl#getIsNext <em>Is Next</em>}</li>
 *   <li>{@link org.xtext.nusmv.language.nuSMV.impl.ParsExpressionImpl#getSimpleExpression <em>Simple Expression</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ParsExpressionImpl extends SimpleExpressionImpl implements ParsExpression
{
  /**
   * The default value of the '{@link #getIsNext() <em>Is Next</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getIsNext()
   * @generated
   * @ordered
   */
  protected static final String IS_NEXT_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getIsNext() <em>Is Next</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getIsNext()
   * @generated
   * @ordered
   */
  protected String isNext = IS_NEXT_EDEFAULT;

  /**
   * The cached value of the '{@link #getSimpleExpression() <em>Simple Expression</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSimpleExpression()
   * @generated
   * @ordered
   */
  protected SimpleExpression simpleExpression;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ParsExpressionImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return NuSMVPackage.Literals.PARS_EXPRESSION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getIsNext()
  {
    return isNext;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setIsNext(String newIsNext)
  {
    String oldIsNext = isNext;
    isNext = newIsNext;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, NuSMVPackage.PARS_EXPRESSION__IS_NEXT, oldIsNext, isNext));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SimpleExpression getSimpleExpression()
  {
    return simpleExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetSimpleExpression(SimpleExpression newSimpleExpression, NotificationChain msgs)
  {
    SimpleExpression oldSimpleExpression = simpleExpression;
    simpleExpression = newSimpleExpression;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, NuSMVPackage.PARS_EXPRESSION__SIMPLE_EXPRESSION, oldSimpleExpression, newSimpleExpression);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setSimpleExpression(SimpleExpression newSimpleExpression)
  {
    if (newSimpleExpression != simpleExpression)
    {
      NotificationChain msgs = null;
      if (simpleExpression != null)
        msgs = ((InternalEObject)simpleExpression).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - NuSMVPackage.PARS_EXPRESSION__SIMPLE_EXPRESSION, null, msgs);
      if (newSimpleExpression != null)
        msgs = ((InternalEObject)newSimpleExpression).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - NuSMVPackage.PARS_EXPRESSION__SIMPLE_EXPRESSION, null, msgs);
      msgs = basicSetSimpleExpression(newSimpleExpression, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, NuSMVPackage.PARS_EXPRESSION__SIMPLE_EXPRESSION, newSimpleExpression, newSimpleExpression));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case NuSMVPackage.PARS_EXPRESSION__SIMPLE_EXPRESSION:
        return basicSetSimpleExpression(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case NuSMVPackage.PARS_EXPRESSION__IS_NEXT:
        return getIsNext();
      case NuSMVPackage.PARS_EXPRESSION__SIMPLE_EXPRESSION:
        return getSimpleExpression();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case NuSMVPackage.PARS_EXPRESSION__IS_NEXT:
        setIsNext((String)newValue);
        return;
      case NuSMVPackage.PARS_EXPRESSION__SIMPLE_EXPRESSION:
        setSimpleExpression((SimpleExpression)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case NuSMVPackage.PARS_EXPRESSION__IS_NEXT:
        setIsNext(IS_NEXT_EDEFAULT);
        return;
      case NuSMVPackage.PARS_EXPRESSION__SIMPLE_EXPRESSION:
        setSimpleExpression((SimpleExpression)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case NuSMVPackage.PARS_EXPRESSION__IS_NEXT:
        return IS_NEXT_EDEFAULT == null ? isNext != null : !IS_NEXT_EDEFAULT.equals(isNext);
      case NuSMVPackage.PARS_EXPRESSION__SIMPLE_EXPRESSION:
        return simpleExpression != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (isNext: ");
    result.append(isNext);
    result.append(')');
    return result.toString();
  }

} //ParsExpressionImpl
