/**
 * generated by Xtext 2.21.0
 */
package org.xtext.nusmv.language.nuSMV.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.xtext.nusmv.language.nuSMV.NuSMVPackage;
import org.xtext.nusmv.language.nuSMV.SingleRTCTLExpression;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Single RTCTL Expression</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.nusmv.language.nuSMV.impl.SingleRTCTLExpressionImpl#getCtlExpression <em>Ctl Expression</em>}</li>
 * </ul>
 *
 * @generated
 */
public class SingleRTCTLExpressionImpl extends RTCTLExpressionImpl implements SingleRTCTLExpression
{
  /**
   * The cached value of the '{@link #getCtlExpression() <em>Ctl Expression</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCtlExpression()
   * @generated
   * @ordered
   */
  protected EObject ctlExpression;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected SingleRTCTLExpressionImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return NuSMVPackage.Literals.SINGLE_RTCTL_EXPRESSION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject getCtlExpression()
  {
    return ctlExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetCtlExpression(EObject newCtlExpression, NotificationChain msgs)
  {
    EObject oldCtlExpression = ctlExpression;
    ctlExpression = newCtlExpression;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, NuSMVPackage.SINGLE_RTCTL_EXPRESSION__CTL_EXPRESSION, oldCtlExpression, newCtlExpression);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setCtlExpression(EObject newCtlExpression)
  {
    if (newCtlExpression != ctlExpression)
    {
      NotificationChain msgs = null;
      if (ctlExpression != null)
        msgs = ((InternalEObject)ctlExpression).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - NuSMVPackage.SINGLE_RTCTL_EXPRESSION__CTL_EXPRESSION, null, msgs);
      if (newCtlExpression != null)
        msgs = ((InternalEObject)newCtlExpression).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - NuSMVPackage.SINGLE_RTCTL_EXPRESSION__CTL_EXPRESSION, null, msgs);
      msgs = basicSetCtlExpression(newCtlExpression, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, NuSMVPackage.SINGLE_RTCTL_EXPRESSION__CTL_EXPRESSION, newCtlExpression, newCtlExpression));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case NuSMVPackage.SINGLE_RTCTL_EXPRESSION__CTL_EXPRESSION:
        return basicSetCtlExpression(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case NuSMVPackage.SINGLE_RTCTL_EXPRESSION__CTL_EXPRESSION:
        return getCtlExpression();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case NuSMVPackage.SINGLE_RTCTL_EXPRESSION__CTL_EXPRESSION:
        setCtlExpression((EObject)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case NuSMVPackage.SINGLE_RTCTL_EXPRESSION__CTL_EXPRESSION:
        setCtlExpression((EObject)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case NuSMVPackage.SINGLE_RTCTL_EXPRESSION__CTL_EXPRESSION:
        return ctlExpression != null;
    }
    return super.eIsSet(featureID);
  }

} //SingleRTCTLExpressionImpl
