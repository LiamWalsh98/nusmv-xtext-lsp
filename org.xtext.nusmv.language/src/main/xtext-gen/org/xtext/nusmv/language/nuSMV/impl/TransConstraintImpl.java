/**
 * generated by Xtext 2.21.0
 */
package org.xtext.nusmv.language.nuSMV.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.xtext.nusmv.language.nuSMV.NuSMVPackage;
import org.xtext.nusmv.language.nuSMV.SimpleExpression;
import org.xtext.nusmv.language.nuSMV.TransConstraint;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Trans Constraint</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.nusmv.language.nuSMV.impl.TransConstraintImpl#getTransExpression <em>Trans Expression</em>}</li>
 *   <li>{@link org.xtext.nusmv.language.nuSMV.impl.TransConstraintImpl#isSemicolon <em>Semicolon</em>}</li>
 * </ul>
 *
 * @generated
 */
public class TransConstraintImpl extends ModuleElementImpl implements TransConstraint
{
  /**
   * The cached value of the '{@link #getTransExpression() <em>Trans Expression</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTransExpression()
   * @generated
   * @ordered
   */
  protected SimpleExpression transExpression;

  /**
   * The default value of the '{@link #isSemicolon() <em>Semicolon</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isSemicolon()
   * @generated
   * @ordered
   */
  protected static final boolean SEMICOLON_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isSemicolon() <em>Semicolon</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isSemicolon()
   * @generated
   * @ordered
   */
  protected boolean semicolon = SEMICOLON_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected TransConstraintImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return NuSMVPackage.Literals.TRANS_CONSTRAINT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SimpleExpression getTransExpression()
  {
    return transExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetTransExpression(SimpleExpression newTransExpression, NotificationChain msgs)
  {
    SimpleExpression oldTransExpression = transExpression;
    transExpression = newTransExpression;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, NuSMVPackage.TRANS_CONSTRAINT__TRANS_EXPRESSION, oldTransExpression, newTransExpression);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setTransExpression(SimpleExpression newTransExpression)
  {
    if (newTransExpression != transExpression)
    {
      NotificationChain msgs = null;
      if (transExpression != null)
        msgs = ((InternalEObject)transExpression).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - NuSMVPackage.TRANS_CONSTRAINT__TRANS_EXPRESSION, null, msgs);
      if (newTransExpression != null)
        msgs = ((InternalEObject)newTransExpression).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - NuSMVPackage.TRANS_CONSTRAINT__TRANS_EXPRESSION, null, msgs);
      msgs = basicSetTransExpression(newTransExpression, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, NuSMVPackage.TRANS_CONSTRAINT__TRANS_EXPRESSION, newTransExpression, newTransExpression));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isSemicolon()
  {
    return semicolon;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setSemicolon(boolean newSemicolon)
  {
    boolean oldSemicolon = semicolon;
    semicolon = newSemicolon;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, NuSMVPackage.TRANS_CONSTRAINT__SEMICOLON, oldSemicolon, semicolon));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case NuSMVPackage.TRANS_CONSTRAINT__TRANS_EXPRESSION:
        return basicSetTransExpression(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case NuSMVPackage.TRANS_CONSTRAINT__TRANS_EXPRESSION:
        return getTransExpression();
      case NuSMVPackage.TRANS_CONSTRAINT__SEMICOLON:
        return isSemicolon();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case NuSMVPackage.TRANS_CONSTRAINT__TRANS_EXPRESSION:
        setTransExpression((SimpleExpression)newValue);
        return;
      case NuSMVPackage.TRANS_CONSTRAINT__SEMICOLON:
        setSemicolon((Boolean)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case NuSMVPackage.TRANS_CONSTRAINT__TRANS_EXPRESSION:
        setTransExpression((SimpleExpression)null);
        return;
      case NuSMVPackage.TRANS_CONSTRAINT__SEMICOLON:
        setSemicolon(SEMICOLON_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case NuSMVPackage.TRANS_CONSTRAINT__TRANS_EXPRESSION:
        return transExpression != null;
      case NuSMVPackage.TRANS_CONSTRAINT__SEMICOLON:
        return semicolon != SEMICOLON_EDEFAULT;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (semicolon: ");
    result.append(semicolon);
    result.append(')');
    return result.toString();
  }

} //TransConstraintImpl
