/**
 * generated by Xtext 2.21.0
 */
package org.xtext.nusmv.language.nuSMV;

import java.util.Arrays;
import java.util.Collections;
import java.util.List;

import org.eclipse.emf.common.util.Enumerator;

/**
 * <!-- begin-user-doc -->
 * A representation of the literals of the enumeration '<em><b>operators</b></em>',
 * and utility methods for working with them.
 * <!-- end-user-doc -->
 * @see org.xtext.nusmv.language.nuSMV.NuSMVPackage#getoperators()
 * @model
 * @generated
 */
public enum operators implements Enumerator
{
  /**
   * The '<em><b>Equal</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #EQUAL_VALUE
   * @generated
   * @ordered
   */
  EQUAL(0, "equal", "="),

  /**
   * The '<em><b>Dis</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #DIS_VALUE
   * @generated
   * @ordered
   */
  DIS(1, "dis", "!="),

  /**
   * The '<em><b>L</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #L_VALUE
   * @generated
   * @ordered
   */
  L(2, "l", "<"),

  /**
   * The '<em><b>G</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #G_VALUE
   * @generated
   * @ordered
   */
  G(3, "g", ">"),

  /**
   * The '<em><b>Le</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #LE_VALUE
   * @generated
   * @ordered
   */
  LE(4, "le", "<="),

  /**
   * The '<em><b>Ge</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #GE_VALUE
   * @generated
   * @ordered
   */
  GE(5, "ge", ">="),

  /**
   * The '<em><b>Or</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #OR_VALUE
   * @generated
   * @ordered
   */
  OR(6, "or", "|"),

  /**
   * The '<em><b>Xor</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #XOR_VALUE
   * @generated
   * @ordered
   */
  XOR(7, "xor", "xor"),

  /**
   * The '<em><b>Xnor</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #XNOR_VALUE
   * @generated
   * @ordered
   */
  XNOR(8, "xnor", "xnor"),

  /**
   * The '<em><b>Implies</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #IMPLIES_VALUE
   * @generated
   * @ordered
   */
  IMPLIES(9, "implies", "->"),

  /**
   * The '<em><b>Iff</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #IFF_VALUE
   * @generated
   * @ordered
   */
  IFF(10, "iff", "<->"),

  /**
   * The '<em><b>And</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #AND_VALUE
   * @generated
   * @ordered
   */
  AND(11, "and", "&"),

  /**
   * The '<em><b>U</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #U_VALUE
   * @generated
   * @ordered
   */
  U(12, "u", "U"),

  /**
   * The '<em><b>V</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #V_VALUE
   * @generated
   * @ordered
   */
  V(13, "v", "V"),

  /**
   * The '<em><b>S</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #S_VALUE
   * @generated
   * @ordered
   */
  S(14, "s", "S"),

  /**
   * The '<em><b>T</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #T_VALUE
   * @generated
   * @ordered
   */
  T(15, "t", "T");

  /**
   * The '<em><b>Equal</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #EQUAL
   * @model name="equal" literal="="
   * @generated
   * @ordered
   */
  public static final int EQUAL_VALUE = 0;

  /**
   * The '<em><b>Dis</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #DIS
   * @model name="dis" literal="!="
   * @generated
   * @ordered
   */
  public static final int DIS_VALUE = 1;

  /**
   * The '<em><b>L</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #L
   * @model name="l" literal="&lt;"
   * @generated
   * @ordered
   */
  public static final int L_VALUE = 2;

  /**
   * The '<em><b>G</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #G
   * @model name="g" literal="&gt;"
   * @generated
   * @ordered
   */
  public static final int G_VALUE = 3;

  /**
   * The '<em><b>Le</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #LE
   * @model name="le" literal="&lt;="
   * @generated
   * @ordered
   */
  public static final int LE_VALUE = 4;

  /**
   * The '<em><b>Ge</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #GE
   * @model name="ge" literal="&gt;="
   * @generated
   * @ordered
   */
  public static final int GE_VALUE = 5;

  /**
   * The '<em><b>Or</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #OR
   * @model name="or" literal="|"
   * @generated
   * @ordered
   */
  public static final int OR_VALUE = 6;

  /**
   * The '<em><b>Xor</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #XOR
   * @model name="xor"
   * @generated
   * @ordered
   */
  public static final int XOR_VALUE = 7;

  /**
   * The '<em><b>Xnor</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #XNOR
   * @model name="xnor"
   * @generated
   * @ordered
   */
  public static final int XNOR_VALUE = 8;

  /**
   * The '<em><b>Implies</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #IMPLIES
   * @model name="implies" literal="-&gt;"
   * @generated
   * @ordered
   */
  public static final int IMPLIES_VALUE = 9;

  /**
   * The '<em><b>Iff</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #IFF
   * @model name="iff" literal="&lt;-&gt;"
   * @generated
   * @ordered
   */
  public static final int IFF_VALUE = 10;

  /**
   * The '<em><b>And</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #AND
   * @model name="and" literal="&amp;"
   * @generated
   * @ordered
   */
  public static final int AND_VALUE = 11;

  /**
   * The '<em><b>U</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #U
   * @model name="u" literal="U"
   * @generated
   * @ordered
   */
  public static final int U_VALUE = 12;

  /**
   * The '<em><b>V</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #V
   * @model name="v" literal="V"
   * @generated
   * @ordered
   */
  public static final int V_VALUE = 13;

  /**
   * The '<em><b>S</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #S
   * @model name="s" literal="S"
   * @generated
   * @ordered
   */
  public static final int S_VALUE = 14;

  /**
   * The '<em><b>T</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #T
   * @model name="t" literal="T"
   * @generated
   * @ordered
   */
  public static final int T_VALUE = 15;

  /**
   * An array of all the '<em><b>operators</b></em>' enumerators.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private static final operators[] VALUES_ARRAY =
    new operators[]
    {
      EQUAL,
      DIS,
      L,
      G,
      LE,
      GE,
      OR,
      XOR,
      XNOR,
      IMPLIES,
      IFF,
      AND,
      U,
      V,
      S,
      T,
    };

  /**
   * A public read-only list of all the '<em><b>operators</b></em>' enumerators.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static final List<operators> VALUES = Collections.unmodifiableList(Arrays.asList(VALUES_ARRAY));

  /**
   * Returns the '<em><b>operators</b></em>' literal with the specified literal value.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param literal the literal.
   * @return the matching enumerator or <code>null</code>.
   * @generated
   */
  public static operators get(String literal)
  {
    for (int i = 0; i < VALUES_ARRAY.length; ++i)
    {
      operators result = VALUES_ARRAY[i];
      if (result.toString().equals(literal))
      {
        return result;
      }
    }
    return null;
  }

  /**
   * Returns the '<em><b>operators</b></em>' literal with the specified name.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param name the name.
   * @return the matching enumerator or <code>null</code>.
   * @generated
   */
  public static operators getByName(String name)
  {
    for (int i = 0; i < VALUES_ARRAY.length; ++i)
    {
      operators result = VALUES_ARRAY[i];
      if (result.getName().equals(name))
      {
        return result;
      }
    }
    return null;
  }

  /**
   * Returns the '<em><b>operators</b></em>' literal with the specified integer value.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param value the integer value.
   * @return the matching enumerator or <code>null</code>.
   * @generated
   */
  public static operators get(int value)
  {
    switch (value)
    {
      case EQUAL_VALUE: return EQUAL;
      case DIS_VALUE: return DIS;
      case L_VALUE: return L;
      case G_VALUE: return G;
      case LE_VALUE: return LE;
      case GE_VALUE: return GE;
      case OR_VALUE: return OR;
      case XOR_VALUE: return XOR;
      case XNOR_VALUE: return XNOR;
      case IMPLIES_VALUE: return IMPLIES;
      case IFF_VALUE: return IFF;
      case AND_VALUE: return AND;
      case U_VALUE: return U;
      case V_VALUE: return V;
      case S_VALUE: return S;
      case T_VALUE: return T;
    }
    return null;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private final int value;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private final String name;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private final String literal;

  /**
   * Only this class can construct instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private operators(int value, String name, String literal)
  {
    this.value = value;
    this.name = name;
    this.literal = literal;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public int getValue()
  {
    return value;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getLiteral()
  {
    return literal;
  }

  /**
   * Returns the literal value of the enumerator, which is its string representation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    return literal;
  }
  
} //operators
