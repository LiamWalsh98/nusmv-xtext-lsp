/**
 * generated by Xtext 2.21.0
 */
package org.xtext.nusmv.language.nuSMV.util;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

import org.xtext.nusmv.language.nuSMV.ArrayType;
import org.xtext.nusmv.language.nuSMV.AssignBody;
import org.xtext.nusmv.language.nuSMV.AssignConstraintElement;
import org.xtext.nusmv.language.nuSMV.AsyncrProcessType;
import org.xtext.nusmv.language.nuSMV.BinaryExpression;
import org.xtext.nusmv.language.nuSMV.BooleanType;
import org.xtext.nusmv.language.nuSMV.CTLExpression;
import org.xtext.nusmv.language.nuSMV.CaseSimpleAssignementExpression;
import org.xtext.nusmv.language.nuSMV.CaseSimpleExpression;
import org.xtext.nusmv.language.nuSMV.CompassionExpression;
import org.xtext.nusmv.language.nuSMV.ComputeSpecification;
import org.xtext.nusmv.language.nuSMV.ConstantsDeclaration;
import org.xtext.nusmv.language.nuSMV.CtlSpecification;
import org.xtext.nusmv.language.nuSMV.DefineBody;
import org.xtext.nusmv.language.nuSMV.DefineDeclaration;
import org.xtext.nusmv.language.nuSMV.EnumType;
import org.xtext.nusmv.language.nuSMV.FairnessConstraint;
import org.xtext.nusmv.language.nuSMV.FairnessExpression;
import org.xtext.nusmv.language.nuSMV.FormalParameter;
import org.xtext.nusmv.language.nuSMV.FrozenVariableDeclaration;
import org.xtext.nusmv.language.nuSMV.IVariableDeclaration;
import org.xtext.nusmv.language.nuSMV.InitBody;
import org.xtext.nusmv.language.nuSMV.InitConstraint;
import org.xtext.nusmv.language.nuSMV.IntervalExpression;
import org.xtext.nusmv.language.nuSMV.IntervalType;
import org.xtext.nusmv.language.nuSMV.InvarConstraint;
import org.xtext.nusmv.language.nuSMV.InvarSpecification;
import org.xtext.nusmv.language.nuSMV.IsaDeclaration;
import org.xtext.nusmv.language.nuSMV.JusticeExpression;
import org.xtext.nusmv.language.nuSMV.LTLExpression;
import org.xtext.nusmv.language.nuSMV.LtlSpecification;
import org.xtext.nusmv.language.nuSMV.ModuleElement;
import org.xtext.nusmv.language.nuSMV.ModuleType;
import org.xtext.nusmv.language.nuSMV.NextBody;
import org.xtext.nusmv.language.nuSMV.NextExpression;
import org.xtext.nusmv.language.nuSMV.Not;
import org.xtext.nusmv.language.nuSMV.NuSMVPackage;
import org.xtext.nusmv.language.nuSMV.NuSmvModel;
import org.xtext.nusmv.language.nuSMV.PSLExpression;
import org.xtext.nusmv.language.nuSMV.ParsExpression;
import org.xtext.nusmv.language.nuSMV.PslSpecification;
import org.xtext.nusmv.language.nuSMV.RTCTLExpression;
import org.xtext.nusmv.language.nuSMV.RangeExpression;
import org.xtext.nusmv.language.nuSMV.SetElementExpression;
import org.xtext.nusmv.language.nuSMV.SetExpression;
import org.xtext.nusmv.language.nuSMV.SetValueParameter;
import org.xtext.nusmv.language.nuSMV.SignedWordType;
import org.xtext.nusmv.language.nuSMV.SimpleExpression;
import org.xtext.nusmv.language.nuSMV.SimpleType;
import org.xtext.nusmv.language.nuSMV.SingleRTCTLExpression;
import org.xtext.nusmv.language.nuSMV.SyncrProcessType;
import org.xtext.nusmv.language.nuSMV.ToInt;
import org.xtext.nusmv.language.nuSMV.TransConstraint;
import org.xtext.nusmv.language.nuSMV.Type;
import org.xtext.nusmv.language.nuSMV.UnaryExpression;
import org.xtext.nusmv.language.nuSMV.UnaryFunctionExpression;
import org.xtext.nusmv.language.nuSMV.UnaryRTCTLExpression;
import org.xtext.nusmv.language.nuSMV.UnsignedWordType;
import org.xtext.nusmv.language.nuSMV.UntilCTLexpression;
import org.xtext.nusmv.language.nuSMV.Val;
import org.xtext.nusmv.language.nuSMV.ValueExpression;
import org.xtext.nusmv.language.nuSMV.Var;
import org.xtext.nusmv.language.nuSMV.VarBody;
import org.xtext.nusmv.language.nuSMV.VarBodyAssign;
import org.xtext.nusmv.language.nuSMV.VariableDeclaration;
import org.xtext.nusmv.language.nuSMV.WordExpression;
import org.xtext.nusmv.language.nuSMV.WordType;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see org.xtext.nusmv.language.nuSMV.NuSMVPackage
 * @generated
 */
public class NuSMVAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static NuSMVPackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NuSMVAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = NuSMVPackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected NuSMVSwitch<Adapter> modelSwitch =
    new NuSMVSwitch<Adapter>()
    {
      @Override
      public Adapter caseNuSmvModel(NuSmvModel object)
      {
        return createNuSmvModelAdapter();
      }
      @Override
      public Adapter caseModule(org.xtext.nusmv.language.nuSMV.Module object)
      {
        return createModuleAdapter();
      }
      @Override
      public Adapter caseModuleElement(ModuleElement object)
      {
        return createModuleElementAdapter();
      }
      @Override
      public Adapter caseVariableDeclaration(VariableDeclaration object)
      {
        return createVariableDeclarationAdapter();
      }
      @Override
      public Adapter caseIVariableDeclaration(IVariableDeclaration object)
      {
        return createIVariableDeclarationAdapter();
      }
      @Override
      public Adapter caseFrozenVariableDeclaration(FrozenVariableDeclaration object)
      {
        return createFrozenVariableDeclarationAdapter();
      }
      @Override
      public Adapter caseVarBody(VarBody object)
      {
        return createVarBodyAdapter();
      }
      @Override
      public Adapter caseDefineDeclaration(DefineDeclaration object)
      {
        return createDefineDeclarationAdapter();
      }
      @Override
      public Adapter caseDefineBody(DefineBody object)
      {
        return createDefineBodyAdapter();
      }
      @Override
      public Adapter caseConstantsDeclaration(ConstantsDeclaration object)
      {
        return createConstantsDeclarationAdapter();
      }
      @Override
      public Adapter caseAssignConstraintElement(AssignConstraintElement object)
      {
        return createAssignConstraintElementAdapter();
      }
      @Override
      public Adapter caseAssignBody(AssignBody object)
      {
        return createAssignBodyAdapter();
      }
      @Override
      public Adapter caseVarBodyAssign(VarBodyAssign object)
      {
        return createVarBodyAssignAdapter();
      }
      @Override
      public Adapter caseInitBody(InitBody object)
      {
        return createInitBodyAdapter();
      }
      @Override
      public Adapter caseNextBody(NextBody object)
      {
        return createNextBodyAdapter();
      }
      @Override
      public Adapter caseTransConstraint(TransConstraint object)
      {
        return createTransConstraintAdapter();
      }
      @Override
      public Adapter caseInitConstraint(InitConstraint object)
      {
        return createInitConstraintAdapter();
      }
      @Override
      public Adapter caseInvarConstraint(InvarConstraint object)
      {
        return createInvarConstraintAdapter();
      }
      @Override
      public Adapter caseFairnessConstraint(FairnessConstraint object)
      {
        return createFairnessConstraintAdapter();
      }
      @Override
      public Adapter caseFairnessExpression(FairnessExpression object)
      {
        return createFairnessExpressionAdapter();
      }
      @Override
      public Adapter caseJusticeExpression(JusticeExpression object)
      {
        return createJusticeExpressionAdapter();
      }
      @Override
      public Adapter caseCompassionExpression(CompassionExpression object)
      {
        return createCompassionExpressionAdapter();
      }
      @Override
      public Adapter caseCtlSpecification(CtlSpecification object)
      {
        return createCtlSpecificationAdapter();
      }
      @Override
      public Adapter casePslSpecification(PslSpecification object)
      {
        return createPslSpecificationAdapter();
      }
      @Override
      public Adapter caseInvarSpecification(InvarSpecification object)
      {
        return createInvarSpecificationAdapter();
      }
      @Override
      public Adapter caseIsaDeclaration(IsaDeclaration object)
      {
        return createIsaDeclarationAdapter();
      }
      @Override
      public Adapter caseLtlSpecification(LtlSpecification object)
      {
        return createLtlSpecificationAdapter();
      }
      @Override
      public Adapter caseType(Type object)
      {
        return createTypeAdapter();
      }
      @Override
      public Adapter caseSimpleType(SimpleType object)
      {
        return createSimpleTypeAdapter();
      }
      @Override
      public Adapter caseModuleType(ModuleType object)
      {
        return createModuleTypeAdapter();
      }
      @Override
      public Adapter caseVal(Val object)
      {
        return createValAdapter();
      }
      @Override
      public Adapter caseNextExpression(NextExpression object)
      {
        return createNextExpressionAdapter();
      }
      @Override
      public Adapter caseSimpleExpression(SimpleExpression object)
      {
        return createSimpleExpressionAdapter();
      }
      @Override
      public Adapter caseFormalParameter(FormalParameter object)
      {
        return createFormalParameterAdapter();
      }
      @Override
      public Adapter caseCaseSimpleExpression(CaseSimpleExpression object)
      {
        return createCaseSimpleExpressionAdapter();
      }
      @Override
      public Adapter caseCaseSimpleAssignementExpression(CaseSimpleAssignementExpression object)
      {
        return createCaseSimpleAssignementExpressionAdapter();
      }
      @Override
      public Adapter caseCTLExpression(CTLExpression object)
      {
        return createCTLExpressionAdapter();
      }
      @Override
      public Adapter casePSLExpression(PSLExpression object)
      {
        return createPSLExpressionAdapter();
      }
      @Override
      public Adapter caseLTLExpression(LTLExpression object)
      {
        return createLTLExpressionAdapter();
      }
      @Override
      public Adapter caseRangeExpression(RangeExpression object)
      {
        return createRangeExpressionAdapter();
      }
      @Override
      public Adapter caseRTCTLExpression(RTCTLExpression object)
      {
        return createRTCTLExpressionAdapter();
      }
      @Override
      public Adapter caseComputeSpecification(ComputeSpecification object)
      {
        return createComputeSpecificationAdapter();
      }
      @Override
      public Adapter caseBooleanType(BooleanType object)
      {
        return createBooleanTypeAdapter();
      }
      @Override
      public Adapter caseWordType(WordType object)
      {
        return createWordTypeAdapter();
      }
      @Override
      public Adapter caseUnsignedWordType(UnsignedWordType object)
      {
        return createUnsignedWordTypeAdapter();
      }
      @Override
      public Adapter caseSignedWordType(SignedWordType object)
      {
        return createSignedWordTypeAdapter();
      }
      @Override
      public Adapter caseEnumType(EnumType object)
      {
        return createEnumTypeAdapter();
      }
      @Override
      public Adapter caseIntervalType(IntervalType object)
      {
        return createIntervalTypeAdapter();
      }
      @Override
      public Adapter caseArrayType(ArrayType object)
      {
        return createArrayTypeAdapter();
      }
      @Override
      public Adapter caseAsyncrProcessType(AsyncrProcessType object)
      {
        return createAsyncrProcessTypeAdapter();
      }
      @Override
      public Adapter caseSyncrProcessType(SyncrProcessType object)
      {
        return createSyncrProcessTypeAdapter();
      }
      @Override
      public Adapter caseBinaryExpression(BinaryExpression object)
      {
        return createBinaryExpressionAdapter();
      }
      @Override
      public Adapter caseNot(Not object)
      {
        return createNotAdapter();
      }
      @Override
      public Adapter caseParsExpression(ParsExpression object)
      {
        return createParsExpressionAdapter();
      }
      @Override
      public Adapter caseUnaryExpression(UnaryExpression object)
      {
        return createUnaryExpressionAdapter();
      }
      @Override
      public Adapter caseValueExpression(ValueExpression object)
      {
        return createValueExpressionAdapter();
      }
      @Override
      public Adapter caseVar(Var object)
      {
        return createVarAdapter();
      }
      @Override
      public Adapter caseSetElementExpression(SetElementExpression object)
      {
        return createSetElementExpressionAdapter();
      }
      @Override
      public Adapter caseSetValueParameter(SetValueParameter object)
      {
        return createSetValueParameterAdapter();
      }
      @Override
      public Adapter caseSetExpression(SetExpression object)
      {
        return createSetExpressionAdapter();
      }
      @Override
      public Adapter caseWordExpression(WordExpression object)
      {
        return createWordExpressionAdapter();
      }
      @Override
      public Adapter caseIntervalExpression(IntervalExpression object)
      {
        return createIntervalExpressionAdapter();
      }
      @Override
      public Adapter caseUntilCTLexpression(UntilCTLexpression object)
      {
        return createUntilCTLexpressionAdapter();
      }
      @Override
      public Adapter caseUnaryFunctionExpression(UnaryFunctionExpression object)
      {
        return createUnaryFunctionExpressionAdapter();
      }
      @Override
      public Adapter caseToInt(ToInt object)
      {
        return createToIntAdapter();
      }
      @Override
      public Adapter caseSingleRTCTLExpression(SingleRTCTLExpression object)
      {
        return createSingleRTCTLExpressionAdapter();
      }
      @Override
      public Adapter caseUnaryRTCTLExpression(UnaryRTCTLExpression object)
      {
        return createUnaryRTCTLExpressionAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link org.xtext.nusmv.language.nuSMV.NuSmvModel <em>Nu Smv Model</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.nusmv.language.nuSMV.NuSmvModel
   * @generated
   */
  public Adapter createNuSmvModelAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.nusmv.language.nuSMV.Module <em>Module</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.nusmv.language.nuSMV.Module
   * @generated
   */
  public Adapter createModuleAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.nusmv.language.nuSMV.ModuleElement <em>Module Element</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.nusmv.language.nuSMV.ModuleElement
   * @generated
   */
  public Adapter createModuleElementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.nusmv.language.nuSMV.VariableDeclaration <em>Variable Declaration</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.nusmv.language.nuSMV.VariableDeclaration
   * @generated
   */
  public Adapter createVariableDeclarationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.nusmv.language.nuSMV.IVariableDeclaration <em>IVariable Declaration</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.nusmv.language.nuSMV.IVariableDeclaration
   * @generated
   */
  public Adapter createIVariableDeclarationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.nusmv.language.nuSMV.FrozenVariableDeclaration <em>Frozen Variable Declaration</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.nusmv.language.nuSMV.FrozenVariableDeclaration
   * @generated
   */
  public Adapter createFrozenVariableDeclarationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.nusmv.language.nuSMV.VarBody <em>Var Body</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.nusmv.language.nuSMV.VarBody
   * @generated
   */
  public Adapter createVarBodyAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.nusmv.language.nuSMV.DefineDeclaration <em>Define Declaration</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.nusmv.language.nuSMV.DefineDeclaration
   * @generated
   */
  public Adapter createDefineDeclarationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.nusmv.language.nuSMV.DefineBody <em>Define Body</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.nusmv.language.nuSMV.DefineBody
   * @generated
   */
  public Adapter createDefineBodyAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.nusmv.language.nuSMV.ConstantsDeclaration <em>Constants Declaration</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.nusmv.language.nuSMV.ConstantsDeclaration
   * @generated
   */
  public Adapter createConstantsDeclarationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.nusmv.language.nuSMV.AssignConstraintElement <em>Assign Constraint Element</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.nusmv.language.nuSMV.AssignConstraintElement
   * @generated
   */
  public Adapter createAssignConstraintElementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.nusmv.language.nuSMV.AssignBody <em>Assign Body</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.nusmv.language.nuSMV.AssignBody
   * @generated
   */
  public Adapter createAssignBodyAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.nusmv.language.nuSMV.VarBodyAssign <em>Var Body Assign</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.nusmv.language.nuSMV.VarBodyAssign
   * @generated
   */
  public Adapter createVarBodyAssignAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.nusmv.language.nuSMV.InitBody <em>Init Body</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.nusmv.language.nuSMV.InitBody
   * @generated
   */
  public Adapter createInitBodyAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.nusmv.language.nuSMV.NextBody <em>Next Body</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.nusmv.language.nuSMV.NextBody
   * @generated
   */
  public Adapter createNextBodyAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.nusmv.language.nuSMV.TransConstraint <em>Trans Constraint</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.nusmv.language.nuSMV.TransConstraint
   * @generated
   */
  public Adapter createTransConstraintAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.nusmv.language.nuSMV.InitConstraint <em>Init Constraint</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.nusmv.language.nuSMV.InitConstraint
   * @generated
   */
  public Adapter createInitConstraintAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.nusmv.language.nuSMV.InvarConstraint <em>Invar Constraint</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.nusmv.language.nuSMV.InvarConstraint
   * @generated
   */
  public Adapter createInvarConstraintAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.nusmv.language.nuSMV.FairnessConstraint <em>Fairness Constraint</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.nusmv.language.nuSMV.FairnessConstraint
   * @generated
   */
  public Adapter createFairnessConstraintAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.nusmv.language.nuSMV.FairnessExpression <em>Fairness Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.nusmv.language.nuSMV.FairnessExpression
   * @generated
   */
  public Adapter createFairnessExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.nusmv.language.nuSMV.JusticeExpression <em>Justice Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.nusmv.language.nuSMV.JusticeExpression
   * @generated
   */
  public Adapter createJusticeExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.nusmv.language.nuSMV.CompassionExpression <em>Compassion Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.nusmv.language.nuSMV.CompassionExpression
   * @generated
   */
  public Adapter createCompassionExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.nusmv.language.nuSMV.CtlSpecification <em>Ctl Specification</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.nusmv.language.nuSMV.CtlSpecification
   * @generated
   */
  public Adapter createCtlSpecificationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.nusmv.language.nuSMV.PslSpecification <em>Psl Specification</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.nusmv.language.nuSMV.PslSpecification
   * @generated
   */
  public Adapter createPslSpecificationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.nusmv.language.nuSMV.InvarSpecification <em>Invar Specification</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.nusmv.language.nuSMV.InvarSpecification
   * @generated
   */
  public Adapter createInvarSpecificationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.nusmv.language.nuSMV.IsaDeclaration <em>Isa Declaration</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.nusmv.language.nuSMV.IsaDeclaration
   * @generated
   */
  public Adapter createIsaDeclarationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.nusmv.language.nuSMV.LtlSpecification <em>Ltl Specification</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.nusmv.language.nuSMV.LtlSpecification
   * @generated
   */
  public Adapter createLtlSpecificationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.nusmv.language.nuSMV.Type <em>Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.nusmv.language.nuSMV.Type
   * @generated
   */
  public Adapter createTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.nusmv.language.nuSMV.SimpleType <em>Simple Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.nusmv.language.nuSMV.SimpleType
   * @generated
   */
  public Adapter createSimpleTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.nusmv.language.nuSMV.ModuleType <em>Module Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.nusmv.language.nuSMV.ModuleType
   * @generated
   */
  public Adapter createModuleTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.nusmv.language.nuSMV.Val <em>Val</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.nusmv.language.nuSMV.Val
   * @generated
   */
  public Adapter createValAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.nusmv.language.nuSMV.NextExpression <em>Next Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.nusmv.language.nuSMV.NextExpression
   * @generated
   */
  public Adapter createNextExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.nusmv.language.nuSMV.SimpleExpression <em>Simple Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.nusmv.language.nuSMV.SimpleExpression
   * @generated
   */
  public Adapter createSimpleExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.nusmv.language.nuSMV.FormalParameter <em>Formal Parameter</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.nusmv.language.nuSMV.FormalParameter
   * @generated
   */
  public Adapter createFormalParameterAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.nusmv.language.nuSMV.CaseSimpleExpression <em>Case Simple Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.nusmv.language.nuSMV.CaseSimpleExpression
   * @generated
   */
  public Adapter createCaseSimpleExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.nusmv.language.nuSMV.CaseSimpleAssignementExpression <em>Case Simple Assignement Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.nusmv.language.nuSMV.CaseSimpleAssignementExpression
   * @generated
   */
  public Adapter createCaseSimpleAssignementExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.nusmv.language.nuSMV.CTLExpression <em>CTL Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.nusmv.language.nuSMV.CTLExpression
   * @generated
   */
  public Adapter createCTLExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.nusmv.language.nuSMV.PSLExpression <em>PSL Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.nusmv.language.nuSMV.PSLExpression
   * @generated
   */
  public Adapter createPSLExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.nusmv.language.nuSMV.LTLExpression <em>LTL Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.nusmv.language.nuSMV.LTLExpression
   * @generated
   */
  public Adapter createLTLExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.nusmv.language.nuSMV.RangeExpression <em>Range Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.nusmv.language.nuSMV.RangeExpression
   * @generated
   */
  public Adapter createRangeExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.nusmv.language.nuSMV.RTCTLExpression <em>RTCTL Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.nusmv.language.nuSMV.RTCTLExpression
   * @generated
   */
  public Adapter createRTCTLExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.nusmv.language.nuSMV.ComputeSpecification <em>Compute Specification</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.nusmv.language.nuSMV.ComputeSpecification
   * @generated
   */
  public Adapter createComputeSpecificationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.nusmv.language.nuSMV.BooleanType <em>Boolean Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.nusmv.language.nuSMV.BooleanType
   * @generated
   */
  public Adapter createBooleanTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.nusmv.language.nuSMV.WordType <em>Word Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.nusmv.language.nuSMV.WordType
   * @generated
   */
  public Adapter createWordTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.nusmv.language.nuSMV.UnsignedWordType <em>Unsigned Word Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.nusmv.language.nuSMV.UnsignedWordType
   * @generated
   */
  public Adapter createUnsignedWordTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.nusmv.language.nuSMV.SignedWordType <em>Signed Word Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.nusmv.language.nuSMV.SignedWordType
   * @generated
   */
  public Adapter createSignedWordTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.nusmv.language.nuSMV.EnumType <em>Enum Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.nusmv.language.nuSMV.EnumType
   * @generated
   */
  public Adapter createEnumTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.nusmv.language.nuSMV.IntervalType <em>Interval Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.nusmv.language.nuSMV.IntervalType
   * @generated
   */
  public Adapter createIntervalTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.nusmv.language.nuSMV.ArrayType <em>Array Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.nusmv.language.nuSMV.ArrayType
   * @generated
   */
  public Adapter createArrayTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.nusmv.language.nuSMV.AsyncrProcessType <em>Asyncr Process Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.nusmv.language.nuSMV.AsyncrProcessType
   * @generated
   */
  public Adapter createAsyncrProcessTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.nusmv.language.nuSMV.SyncrProcessType <em>Syncr Process Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.nusmv.language.nuSMV.SyncrProcessType
   * @generated
   */
  public Adapter createSyncrProcessTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.nusmv.language.nuSMV.BinaryExpression <em>Binary Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.nusmv.language.nuSMV.BinaryExpression
   * @generated
   */
  public Adapter createBinaryExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.nusmv.language.nuSMV.Not <em>Not</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.nusmv.language.nuSMV.Not
   * @generated
   */
  public Adapter createNotAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.nusmv.language.nuSMV.ParsExpression <em>Pars Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.nusmv.language.nuSMV.ParsExpression
   * @generated
   */
  public Adapter createParsExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.nusmv.language.nuSMV.UnaryExpression <em>Unary Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.nusmv.language.nuSMV.UnaryExpression
   * @generated
   */
  public Adapter createUnaryExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.nusmv.language.nuSMV.ValueExpression <em>Value Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.nusmv.language.nuSMV.ValueExpression
   * @generated
   */
  public Adapter createValueExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.nusmv.language.nuSMV.Var <em>Var</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.nusmv.language.nuSMV.Var
   * @generated
   */
  public Adapter createVarAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.nusmv.language.nuSMV.SetElementExpression <em>Set Element Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.nusmv.language.nuSMV.SetElementExpression
   * @generated
   */
  public Adapter createSetElementExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.nusmv.language.nuSMV.SetValueParameter <em>Set Value Parameter</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.nusmv.language.nuSMV.SetValueParameter
   * @generated
   */
  public Adapter createSetValueParameterAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.nusmv.language.nuSMV.SetExpression <em>Set Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.nusmv.language.nuSMV.SetExpression
   * @generated
   */
  public Adapter createSetExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.nusmv.language.nuSMV.WordExpression <em>Word Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.nusmv.language.nuSMV.WordExpression
   * @generated
   */
  public Adapter createWordExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.nusmv.language.nuSMV.IntervalExpression <em>Interval Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.nusmv.language.nuSMV.IntervalExpression
   * @generated
   */
  public Adapter createIntervalExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.nusmv.language.nuSMV.UntilCTLexpression <em>Until CT Lexpression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.nusmv.language.nuSMV.UntilCTLexpression
   * @generated
   */
  public Adapter createUntilCTLexpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.nusmv.language.nuSMV.UnaryFunctionExpression <em>Unary Function Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.nusmv.language.nuSMV.UnaryFunctionExpression
   * @generated
   */
  public Adapter createUnaryFunctionExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.nusmv.language.nuSMV.ToInt <em>To Int</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.nusmv.language.nuSMV.ToInt
   * @generated
   */
  public Adapter createToIntAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.nusmv.language.nuSMV.SingleRTCTLExpression <em>Single RTCTL Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.nusmv.language.nuSMV.SingleRTCTLExpression
   * @generated
   */
  public Adapter createSingleRTCTLExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.nusmv.language.nuSMV.UnaryRTCTLExpression <em>Unary RTCTL Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.nusmv.language.nuSMV.UnaryRTCTLExpression
   * @generated
   */
  public Adapter createUnaryRTCTLExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //NuSMVAdapterFactory
