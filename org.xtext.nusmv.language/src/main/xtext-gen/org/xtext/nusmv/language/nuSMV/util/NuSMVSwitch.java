/**
 * generated by Xtext 2.21.0
 */
package org.xtext.nusmv.language.nuSMV.util;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.util.Switch;

import org.xtext.nusmv.language.nuSMV.ArrayType;
import org.xtext.nusmv.language.nuSMV.AssignBody;
import org.xtext.nusmv.language.nuSMV.AssignConstraintElement;
import org.xtext.nusmv.language.nuSMV.AsyncrProcessType;
import org.xtext.nusmv.language.nuSMV.BinaryExpression;
import org.xtext.nusmv.language.nuSMV.BooleanType;
import org.xtext.nusmv.language.nuSMV.CTLExpression;
import org.xtext.nusmv.language.nuSMV.CaseSimpleAssignementExpression;
import org.xtext.nusmv.language.nuSMV.CaseSimpleExpression;
import org.xtext.nusmv.language.nuSMV.CompassionExpression;
import org.xtext.nusmv.language.nuSMV.ComputeSpecification;
import org.xtext.nusmv.language.nuSMV.ConstantsDeclaration;
import org.xtext.nusmv.language.nuSMV.CtlSpecification;
import org.xtext.nusmv.language.nuSMV.DefineBody;
import org.xtext.nusmv.language.nuSMV.DefineDeclaration;
import org.xtext.nusmv.language.nuSMV.EnumType;
import org.xtext.nusmv.language.nuSMV.FairnessConstraint;
import org.xtext.nusmv.language.nuSMV.FairnessExpression;
import org.xtext.nusmv.language.nuSMV.FormalParameter;
import org.xtext.nusmv.language.nuSMV.FrozenVariableDeclaration;
import org.xtext.nusmv.language.nuSMV.IVariableDeclaration;
import org.xtext.nusmv.language.nuSMV.InitBody;
import org.xtext.nusmv.language.nuSMV.InitConstraint;
import org.xtext.nusmv.language.nuSMV.IntervalExpression;
import org.xtext.nusmv.language.nuSMV.IntervalType;
import org.xtext.nusmv.language.nuSMV.InvarConstraint;
import org.xtext.nusmv.language.nuSMV.InvarSpecification;
import org.xtext.nusmv.language.nuSMV.IsaDeclaration;
import org.xtext.nusmv.language.nuSMV.JusticeExpression;
import org.xtext.nusmv.language.nuSMV.LTLExpression;
import org.xtext.nusmv.language.nuSMV.LtlSpecification;
import org.xtext.nusmv.language.nuSMV.ModuleElement;
import org.xtext.nusmv.language.nuSMV.ModuleType;
import org.xtext.nusmv.language.nuSMV.NextBody;
import org.xtext.nusmv.language.nuSMV.NextExpression;
import org.xtext.nusmv.language.nuSMV.Not;
import org.xtext.nusmv.language.nuSMV.NuSMVPackage;
import org.xtext.nusmv.language.nuSMV.NuSmvModel;
import org.xtext.nusmv.language.nuSMV.PSLExpression;
import org.xtext.nusmv.language.nuSMV.ParsExpression;
import org.xtext.nusmv.language.nuSMV.PslSpecification;
import org.xtext.nusmv.language.nuSMV.RTCTLExpression;
import org.xtext.nusmv.language.nuSMV.RangeExpression;
import org.xtext.nusmv.language.nuSMV.SetElementExpression;
import org.xtext.nusmv.language.nuSMV.SetExpression;
import org.xtext.nusmv.language.nuSMV.SetValueParameter;
import org.xtext.nusmv.language.nuSMV.SignedWordType;
import org.xtext.nusmv.language.nuSMV.SimpleExpression;
import org.xtext.nusmv.language.nuSMV.SimpleType;
import org.xtext.nusmv.language.nuSMV.SingleRTCTLExpression;
import org.xtext.nusmv.language.nuSMV.SyncrProcessType;
import org.xtext.nusmv.language.nuSMV.ToInt;
import org.xtext.nusmv.language.nuSMV.TransConstraint;
import org.xtext.nusmv.language.nuSMV.Type;
import org.xtext.nusmv.language.nuSMV.UnaryExpression;
import org.xtext.nusmv.language.nuSMV.UnaryFunctionExpression;
import org.xtext.nusmv.language.nuSMV.UnaryRTCTLExpression;
import org.xtext.nusmv.language.nuSMV.UnsignedWordType;
import org.xtext.nusmv.language.nuSMV.UntilCTLexpression;
import org.xtext.nusmv.language.nuSMV.Val;
import org.xtext.nusmv.language.nuSMV.ValueExpression;
import org.xtext.nusmv.language.nuSMV.Var;
import org.xtext.nusmv.language.nuSMV.VarBody;
import org.xtext.nusmv.language.nuSMV.VarBodyAssign;
import org.xtext.nusmv.language.nuSMV.VariableDeclaration;
import org.xtext.nusmv.language.nuSMV.WordExpression;
import org.xtext.nusmv.language.nuSMV.WordType;

/**
 * <!-- begin-user-doc -->
 * The <b>Switch</b> for the model's inheritance hierarchy.
 * It supports the call {@link #doSwitch(EObject) doSwitch(object)}
 * to invoke the <code>caseXXX</code> method for each class of the model,
 * starting with the actual class of the object
 * and proceeding up the inheritance hierarchy
 * until a non-null result is returned,
 * which is the result of the switch.
 * <!-- end-user-doc -->
 * @see org.xtext.nusmv.language.nuSMV.NuSMVPackage
 * @generated
 */
public class NuSMVSwitch<T> extends Switch<T>
{
  /**
   * The cached model package
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static NuSMVPackage modelPackage;

  /**
   * Creates an instance of the switch.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NuSMVSwitch()
  {
    if (modelPackage == null)
    {
      modelPackage = NuSMVPackage.eINSTANCE;
    }
  }

  /**
   * Checks whether this is a switch for the given package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param ePackage the package in question.
   * @return whether this is a switch for the given package.
   * @generated
   */
  @Override
  protected boolean isSwitchFor(EPackage ePackage)
  {
    return ePackage == modelPackage;
  }

  /**
   * Calls <code>caseXXX</code> for each class of the model until one returns a non null result; it yields that result.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the first non-null result returned by a <code>caseXXX</code> call.
   * @generated
   */
  @Override
  protected T doSwitch(int classifierID, EObject theEObject)
  {
    switch (classifierID)
    {
      case NuSMVPackage.NU_SMV_MODEL:
      {
        NuSmvModel nuSmvModel = (NuSmvModel)theEObject;
        T result = caseNuSmvModel(nuSmvModel);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NuSMVPackage.MODULE:
      {
        org.xtext.nusmv.language.nuSMV.Module module = (org.xtext.nusmv.language.nuSMV.Module)theEObject;
        T result = caseModule(module);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NuSMVPackage.MODULE_ELEMENT:
      {
        ModuleElement moduleElement = (ModuleElement)theEObject;
        T result = caseModuleElement(moduleElement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NuSMVPackage.VARIABLE_DECLARATION:
      {
        VariableDeclaration variableDeclaration = (VariableDeclaration)theEObject;
        T result = caseVariableDeclaration(variableDeclaration);
        if (result == null) result = caseModuleElement(variableDeclaration);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NuSMVPackage.IVARIABLE_DECLARATION:
      {
        IVariableDeclaration iVariableDeclaration = (IVariableDeclaration)theEObject;
        T result = caseIVariableDeclaration(iVariableDeclaration);
        if (result == null) result = caseModuleElement(iVariableDeclaration);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NuSMVPackage.FROZEN_VARIABLE_DECLARATION:
      {
        FrozenVariableDeclaration frozenVariableDeclaration = (FrozenVariableDeclaration)theEObject;
        T result = caseFrozenVariableDeclaration(frozenVariableDeclaration);
        if (result == null) result = caseModuleElement(frozenVariableDeclaration);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NuSMVPackage.VAR_BODY:
      {
        VarBody varBody = (VarBody)theEObject;
        T result = caseVarBody(varBody);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NuSMVPackage.DEFINE_DECLARATION:
      {
        DefineDeclaration defineDeclaration = (DefineDeclaration)theEObject;
        T result = caseDefineDeclaration(defineDeclaration);
        if (result == null) result = caseModuleElement(defineDeclaration);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NuSMVPackage.DEFINE_BODY:
      {
        DefineBody defineBody = (DefineBody)theEObject;
        T result = caseDefineBody(defineBody);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NuSMVPackage.CONSTANTS_DECLARATION:
      {
        ConstantsDeclaration constantsDeclaration = (ConstantsDeclaration)theEObject;
        T result = caseConstantsDeclaration(constantsDeclaration);
        if (result == null) result = caseModuleElement(constantsDeclaration);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NuSMVPackage.ASSIGN_CONSTRAINT_ELEMENT:
      {
        AssignConstraintElement assignConstraintElement = (AssignConstraintElement)theEObject;
        T result = caseAssignConstraintElement(assignConstraintElement);
        if (result == null) result = caseModuleElement(assignConstraintElement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NuSMVPackage.ASSIGN_BODY:
      {
        AssignBody assignBody = (AssignBody)theEObject;
        T result = caseAssignBody(assignBody);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NuSMVPackage.VAR_BODY_ASSIGN:
      {
        VarBodyAssign varBodyAssign = (VarBodyAssign)theEObject;
        T result = caseVarBodyAssign(varBodyAssign);
        if (result == null) result = caseAssignBody(varBodyAssign);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NuSMVPackage.INIT_BODY:
      {
        InitBody initBody = (InitBody)theEObject;
        T result = caseInitBody(initBody);
        if (result == null) result = caseAssignBody(initBody);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NuSMVPackage.NEXT_BODY:
      {
        NextBody nextBody = (NextBody)theEObject;
        T result = caseNextBody(nextBody);
        if (result == null) result = caseAssignBody(nextBody);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NuSMVPackage.TRANS_CONSTRAINT:
      {
        TransConstraint transConstraint = (TransConstraint)theEObject;
        T result = caseTransConstraint(transConstraint);
        if (result == null) result = caseModuleElement(transConstraint);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NuSMVPackage.INIT_CONSTRAINT:
      {
        InitConstraint initConstraint = (InitConstraint)theEObject;
        T result = caseInitConstraint(initConstraint);
        if (result == null) result = caseModuleElement(initConstraint);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NuSMVPackage.INVAR_CONSTRAINT:
      {
        InvarConstraint invarConstraint = (InvarConstraint)theEObject;
        T result = caseInvarConstraint(invarConstraint);
        if (result == null) result = caseModuleElement(invarConstraint);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NuSMVPackage.FAIRNESS_CONSTRAINT:
      {
        FairnessConstraint fairnessConstraint = (FairnessConstraint)theEObject;
        T result = caseFairnessConstraint(fairnessConstraint);
        if (result == null) result = caseModuleElement(fairnessConstraint);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NuSMVPackage.FAIRNESS_EXPRESSION:
      {
        FairnessExpression fairnessExpression = (FairnessExpression)theEObject;
        T result = caseFairnessExpression(fairnessExpression);
        if (result == null) result = caseFairnessConstraint(fairnessExpression);
        if (result == null) result = caseModuleElement(fairnessExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NuSMVPackage.JUSTICE_EXPRESSION:
      {
        JusticeExpression justiceExpression = (JusticeExpression)theEObject;
        T result = caseJusticeExpression(justiceExpression);
        if (result == null) result = caseFairnessConstraint(justiceExpression);
        if (result == null) result = caseModuleElement(justiceExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NuSMVPackage.COMPASSION_EXPRESSION:
      {
        CompassionExpression compassionExpression = (CompassionExpression)theEObject;
        T result = caseCompassionExpression(compassionExpression);
        if (result == null) result = caseFairnessConstraint(compassionExpression);
        if (result == null) result = caseModuleElement(compassionExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NuSMVPackage.CTL_SPECIFICATION:
      {
        CtlSpecification ctlSpecification = (CtlSpecification)theEObject;
        T result = caseCtlSpecification(ctlSpecification);
        if (result == null) result = caseModuleElement(ctlSpecification);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NuSMVPackage.PSL_SPECIFICATION:
      {
        PslSpecification pslSpecification = (PslSpecification)theEObject;
        T result = casePslSpecification(pslSpecification);
        if (result == null) result = caseModuleElement(pslSpecification);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NuSMVPackage.INVAR_SPECIFICATION:
      {
        InvarSpecification invarSpecification = (InvarSpecification)theEObject;
        T result = caseInvarSpecification(invarSpecification);
        if (result == null) result = caseModuleElement(invarSpecification);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NuSMVPackage.ISA_DECLARATION:
      {
        IsaDeclaration isaDeclaration = (IsaDeclaration)theEObject;
        T result = caseIsaDeclaration(isaDeclaration);
        if (result == null) result = caseModuleElement(isaDeclaration);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NuSMVPackage.LTL_SPECIFICATION:
      {
        LtlSpecification ltlSpecification = (LtlSpecification)theEObject;
        T result = caseLtlSpecification(ltlSpecification);
        if (result == null) result = caseModuleElement(ltlSpecification);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NuSMVPackage.TYPE:
      {
        Type type = (Type)theEObject;
        T result = caseType(type);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NuSMVPackage.SIMPLE_TYPE:
      {
        SimpleType simpleType = (SimpleType)theEObject;
        T result = caseSimpleType(simpleType);
        if (result == null) result = caseType(simpleType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NuSMVPackage.MODULE_TYPE:
      {
        ModuleType moduleType = (ModuleType)theEObject;
        T result = caseModuleType(moduleType);
        if (result == null) result = caseType(moduleType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NuSMVPackage.VAL:
      {
        Val val = (Val)theEObject;
        T result = caseVal(val);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NuSMVPackage.NEXT_EXPRESSION:
      {
        NextExpression nextExpression = (NextExpression)theEObject;
        T result = caseNextExpression(nextExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NuSMVPackage.SIMPLE_EXPRESSION:
      {
        SimpleExpression simpleExpression = (SimpleExpression)theEObject;
        T result = caseSimpleExpression(simpleExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NuSMVPackage.FORMAL_PARAMETER:
      {
        FormalParameter formalParameter = (FormalParameter)theEObject;
        T result = caseFormalParameter(formalParameter);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NuSMVPackage.CASE_SIMPLE_EXPRESSION:
      {
        CaseSimpleExpression caseSimpleExpression = (CaseSimpleExpression)theEObject;
        T result = caseCaseSimpleExpression(caseSimpleExpression);
        if (result == null) result = caseSimpleExpression(caseSimpleExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NuSMVPackage.CASE_SIMPLE_ASSIGNEMENT_EXPRESSION:
      {
        CaseSimpleAssignementExpression caseSimpleAssignementExpression = (CaseSimpleAssignementExpression)theEObject;
        T result = caseCaseSimpleAssignementExpression(caseSimpleAssignementExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NuSMVPackage.CTL_EXPRESSION:
      {
        CTLExpression ctlExpression = (CTLExpression)theEObject;
        T result = caseCTLExpression(ctlExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NuSMVPackage.PSL_EXPRESSION:
      {
        PSLExpression pslExpression = (PSLExpression)theEObject;
        T result = casePSLExpression(pslExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NuSMVPackage.LTL_EXPRESSION:
      {
        LTLExpression ltlExpression = (LTLExpression)theEObject;
        T result = caseLTLExpression(ltlExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NuSMVPackage.RANGE_EXPRESSION:
      {
        RangeExpression rangeExpression = (RangeExpression)theEObject;
        T result = caseRangeExpression(rangeExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NuSMVPackage.RTCTL_EXPRESSION:
      {
        RTCTLExpression rtctlExpression = (RTCTLExpression)theEObject;
        T result = caseRTCTLExpression(rtctlExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NuSMVPackage.COMPUTE_SPECIFICATION:
      {
        ComputeSpecification computeSpecification = (ComputeSpecification)theEObject;
        T result = caseComputeSpecification(computeSpecification);
        if (result == null) result = caseModuleElement(computeSpecification);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NuSMVPackage.BOOLEAN_TYPE:
      {
        BooleanType booleanType = (BooleanType)theEObject;
        T result = caseBooleanType(booleanType);
        if (result == null) result = caseSimpleType(booleanType);
        if (result == null) result = caseType(booleanType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NuSMVPackage.WORD_TYPE:
      {
        WordType wordType = (WordType)theEObject;
        T result = caseWordType(wordType);
        if (result == null) result = caseSimpleType(wordType);
        if (result == null) result = caseType(wordType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NuSMVPackage.UNSIGNED_WORD_TYPE:
      {
        UnsignedWordType unsignedWordType = (UnsignedWordType)theEObject;
        T result = caseUnsignedWordType(unsignedWordType);
        if (result == null) result = caseSimpleType(unsignedWordType);
        if (result == null) result = caseType(unsignedWordType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NuSMVPackage.SIGNED_WORD_TYPE:
      {
        SignedWordType signedWordType = (SignedWordType)theEObject;
        T result = caseSignedWordType(signedWordType);
        if (result == null) result = caseSimpleType(signedWordType);
        if (result == null) result = caseType(signedWordType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NuSMVPackage.ENUM_TYPE:
      {
        EnumType enumType = (EnumType)theEObject;
        T result = caseEnumType(enumType);
        if (result == null) result = caseSimpleType(enumType);
        if (result == null) result = caseType(enumType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NuSMVPackage.INTERVAL_TYPE:
      {
        IntervalType intervalType = (IntervalType)theEObject;
        T result = caseIntervalType(intervalType);
        if (result == null) result = caseSimpleType(intervalType);
        if (result == null) result = caseType(intervalType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NuSMVPackage.ARRAY_TYPE:
      {
        ArrayType arrayType = (ArrayType)theEObject;
        T result = caseArrayType(arrayType);
        if (result == null) result = caseSimpleType(arrayType);
        if (result == null) result = caseType(arrayType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NuSMVPackage.ASYNCR_PROCESS_TYPE:
      {
        AsyncrProcessType asyncrProcessType = (AsyncrProcessType)theEObject;
        T result = caseAsyncrProcessType(asyncrProcessType);
        if (result == null) result = caseModuleType(asyncrProcessType);
        if (result == null) result = caseType(asyncrProcessType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NuSMVPackage.SYNCR_PROCESS_TYPE:
      {
        SyncrProcessType syncrProcessType = (SyncrProcessType)theEObject;
        T result = caseSyncrProcessType(syncrProcessType);
        if (result == null) result = caseModuleType(syncrProcessType);
        if (result == null) result = caseType(syncrProcessType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NuSMVPackage.BINARY_EXPRESSION:
      {
        BinaryExpression binaryExpression = (BinaryExpression)theEObject;
        T result = caseBinaryExpression(binaryExpression);
        if (result == null) result = caseSimpleExpression(binaryExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NuSMVPackage.NOT:
      {
        Not not = (Not)theEObject;
        T result = caseNot(not);
        if (result == null) result = caseSimpleExpression(not);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NuSMVPackage.PARS_EXPRESSION:
      {
        ParsExpression parsExpression = (ParsExpression)theEObject;
        T result = caseParsExpression(parsExpression);
        if (result == null) result = caseSimpleExpression(parsExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NuSMVPackage.UNARY_EXPRESSION:
      {
        UnaryExpression unaryExpression = (UnaryExpression)theEObject;
        T result = caseUnaryExpression(unaryExpression);
        if (result == null) result = caseSimpleExpression(unaryExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NuSMVPackage.VALUE_EXPRESSION:
      {
        ValueExpression valueExpression = (ValueExpression)theEObject;
        T result = caseValueExpression(valueExpression);
        if (result == null) result = caseSimpleExpression(valueExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NuSMVPackage.VAR:
      {
        Var var = (Var)theEObject;
        T result = caseVar(var);
        if (result == null) result = caseSimpleExpression(var);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NuSMVPackage.SET_ELEMENT_EXPRESSION:
      {
        SetElementExpression setElementExpression = (SetElementExpression)theEObject;
        T result = caseSetElementExpression(setElementExpression);
        if (result == null) result = caseSimpleExpression(setElementExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NuSMVPackage.SET_VALUE_PARAMETER:
      {
        SetValueParameter setValueParameter = (SetValueParameter)theEObject;
        T result = caseSetValueParameter(setValueParameter);
        if (result == null) result = caseSimpleExpression(setValueParameter);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NuSMVPackage.SET_EXPRESSION:
      {
        SetExpression setExpression = (SetExpression)theEObject;
        T result = caseSetExpression(setExpression);
        if (result == null) result = caseSimpleExpression(setExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NuSMVPackage.WORD_EXPRESSION:
      {
        WordExpression wordExpression = (WordExpression)theEObject;
        T result = caseWordExpression(wordExpression);
        if (result == null) result = caseSimpleExpression(wordExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NuSMVPackage.INTERVAL_EXPRESSION:
      {
        IntervalExpression intervalExpression = (IntervalExpression)theEObject;
        T result = caseIntervalExpression(intervalExpression);
        if (result == null) result = caseSimpleExpression(intervalExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NuSMVPackage.UNTIL_CT_LEXPRESSION:
      {
        UntilCTLexpression untilCTLexpression = (UntilCTLexpression)theEObject;
        T result = caseUntilCTLexpression(untilCTLexpression);
        if (result == null) result = caseSimpleExpression(untilCTLexpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NuSMVPackage.UNARY_FUNCTION_EXPRESSION:
      {
        UnaryFunctionExpression unaryFunctionExpression = (UnaryFunctionExpression)theEObject;
        T result = caseUnaryFunctionExpression(unaryFunctionExpression);
        if (result == null) result = caseSimpleExpression(unaryFunctionExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NuSMVPackage.TO_INT:
      {
        ToInt toInt = (ToInt)theEObject;
        T result = caseToInt(toInt);
        if (result == null) result = caseSimpleExpression(toInt);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NuSMVPackage.SINGLE_RTCTL_EXPRESSION:
      {
        SingleRTCTLExpression singleRTCTLExpression = (SingleRTCTLExpression)theEObject;
        T result = caseSingleRTCTLExpression(singleRTCTLExpression);
        if (result == null) result = caseRTCTLExpression(singleRTCTLExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NuSMVPackage.UNARY_RTCTL_EXPRESSION:
      {
        UnaryRTCTLExpression unaryRTCTLExpression = (UnaryRTCTLExpression)theEObject;
        T result = caseUnaryRTCTLExpression(unaryRTCTLExpression);
        if (result == null) result = caseRTCTLExpression(unaryRTCTLExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      default: return defaultCase(theEObject);
    }
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Nu Smv Model</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Nu Smv Model</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNuSmvModel(NuSmvModel object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Module</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Module</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseModule(org.xtext.nusmv.language.nuSMV.Module object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Module Element</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Module Element</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseModuleElement(ModuleElement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Variable Declaration</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Variable Declaration</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseVariableDeclaration(VariableDeclaration object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>IVariable Declaration</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>IVariable Declaration</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseIVariableDeclaration(IVariableDeclaration object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Frozen Variable Declaration</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Frozen Variable Declaration</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFrozenVariableDeclaration(FrozenVariableDeclaration object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Var Body</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Var Body</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseVarBody(VarBody object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Define Declaration</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Define Declaration</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDefineDeclaration(DefineDeclaration object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Define Body</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Define Body</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDefineBody(DefineBody object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Constants Declaration</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Constants Declaration</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseConstantsDeclaration(ConstantsDeclaration object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Assign Constraint Element</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Assign Constraint Element</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAssignConstraintElement(AssignConstraintElement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Assign Body</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Assign Body</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAssignBody(AssignBody object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Var Body Assign</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Var Body Assign</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseVarBodyAssign(VarBodyAssign object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Init Body</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Init Body</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseInitBody(InitBody object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Next Body</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Next Body</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNextBody(NextBody object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Trans Constraint</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Trans Constraint</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTransConstraint(TransConstraint object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Init Constraint</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Init Constraint</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseInitConstraint(InitConstraint object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Invar Constraint</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Invar Constraint</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseInvarConstraint(InvarConstraint object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Fairness Constraint</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Fairness Constraint</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFairnessConstraint(FairnessConstraint object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Fairness Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Fairness Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFairnessExpression(FairnessExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Justice Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Justice Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseJusticeExpression(JusticeExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Compassion Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Compassion Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCompassionExpression(CompassionExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Ctl Specification</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Ctl Specification</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCtlSpecification(CtlSpecification object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Psl Specification</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Psl Specification</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePslSpecification(PslSpecification object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Invar Specification</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Invar Specification</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseInvarSpecification(InvarSpecification object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Isa Declaration</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Isa Declaration</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseIsaDeclaration(IsaDeclaration object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Ltl Specification</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Ltl Specification</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLtlSpecification(LtlSpecification object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseType(Type object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Simple Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Simple Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSimpleType(SimpleType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Module Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Module Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseModuleType(ModuleType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Val</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Val</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseVal(Val object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Next Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Next Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNextExpression(NextExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Simple Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Simple Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSimpleExpression(SimpleExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Formal Parameter</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Formal Parameter</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFormalParameter(FormalParameter object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Case Simple Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Case Simple Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCaseSimpleExpression(CaseSimpleExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Case Simple Assignement Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Case Simple Assignement Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCaseSimpleAssignementExpression(CaseSimpleAssignementExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>CTL Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>CTL Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCTLExpression(CTLExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>PSL Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>PSL Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePSLExpression(PSLExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>LTL Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>LTL Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLTLExpression(LTLExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Range Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Range Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRangeExpression(RangeExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>RTCTL Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>RTCTL Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRTCTLExpression(RTCTLExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Compute Specification</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Compute Specification</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseComputeSpecification(ComputeSpecification object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Boolean Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Boolean Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBooleanType(BooleanType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Word Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Word Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseWordType(WordType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Unsigned Word Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Unsigned Word Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseUnsignedWordType(UnsignedWordType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Signed Word Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Signed Word Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSignedWordType(SignedWordType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Enum Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Enum Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEnumType(EnumType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Interval Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Interval Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseIntervalType(IntervalType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Array Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Array Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseArrayType(ArrayType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Asyncr Process Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Asyncr Process Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAsyncrProcessType(AsyncrProcessType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Syncr Process Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Syncr Process Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSyncrProcessType(SyncrProcessType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Binary Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Binary Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBinaryExpression(BinaryExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Not</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Not</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNot(Not object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Pars Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Pars Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseParsExpression(ParsExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Unary Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Unary Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseUnaryExpression(UnaryExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Value Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Value Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseValueExpression(ValueExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Var</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Var</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseVar(Var object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Set Element Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Set Element Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSetElementExpression(SetElementExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Set Value Parameter</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Set Value Parameter</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSetValueParameter(SetValueParameter object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Set Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Set Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSetExpression(SetExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Word Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Word Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseWordExpression(WordExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Interval Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Interval Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseIntervalExpression(IntervalExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Until CT Lexpression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Until CT Lexpression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseUntilCTLexpression(UntilCTLexpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Unary Function Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Unary Function Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseUnaryFunctionExpression(UnaryFunctionExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>To Int</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>To Int</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseToInt(ToInt object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Single RTCTL Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Single RTCTL Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSingleRTCTLExpression(SingleRTCTLExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Unary RTCTL Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Unary RTCTL Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseUnaryRTCTLExpression(UnaryRTCTLExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EObject</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch, but this is the last case anyway.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EObject</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject)
   * @generated
   */
  @Override
  public T defaultCase(EObject object)
  {
    return null;
  }

} //NuSMVSwitch
