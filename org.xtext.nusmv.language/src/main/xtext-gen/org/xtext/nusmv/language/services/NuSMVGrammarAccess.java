/*
 * generated by Xtext 2.21.0
 */
package org.xtext.nusmv.language.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class NuSMVGrammarAccess extends AbstractGrammarElementFinder {
	
	public class NuSmvModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.nusmv.language.NuSMV.NuSmvModel");
		private final Assignment cModulesAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cModulesModuleParserRuleCall_0 = (RuleCall)cModulesAssignment.eContents().get(0);
		
		//NuSmvModel hidden(WS, SL_COMMENT):
		//	modules+=Module*;
		@Override public ParserRule getRule() { return rule; }
		
		//modules+=Module*
		public Assignment getModulesAssignment() { return cModulesAssignment; }
		
		//Module
		public RuleCall getModulesModuleParserRuleCall_0() { return cModulesModuleParserRuleCall_0; }
	}
	public class ModuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.nusmv.language.NuSMV.Module");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMODULEKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cParamsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cParamsFormalParameterParserRuleCall_2_1_0 = (RuleCall)cParamsAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cParamsAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cParamsFormalParameterParserRuleCall_2_2_1_0 = (RuleCall)cParamsAssignment_2_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Assignment cModuleElementAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cModuleElementModuleElementParserRuleCall_3_0 = (RuleCall)cModuleElementAssignment_3.eContents().get(0);
		
		//Module:
		//	"MODULE" name=ID ("(" params+=FormalParameter ("," params+=FormalParameter)* ")")?
		//	//"MODULE" ID=ID ("(" (params+=FormalParameter) ("," params+=FormalParameter)* ")")?
		//	//"MODULE" ID=ID ("(" (params+=ID) ("," params+=ID)* ")")?
		//	moduleElement+=ModuleElement*;
		@Override public ParserRule getRule() { return rule; }
		
		//"MODULE" name=ID ("(" params+=FormalParameter ("," params+=FormalParameter)* ")")? //"MODULE" ID=ID ("(" (params+=FormalParameter) ("," params+=FormalParameter)* ")")?
		////"MODULE" ID=ID ("(" (params+=ID) ("," params+=ID)* ")")?
		//moduleElement+=ModuleElement*
		public Group getGroup() { return cGroup; }
		
		//"MODULE"
		public Keyword getMODULEKeyword_0() { return cMODULEKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//("(" params+=FormalParameter ("," params+=FormalParameter)* ")")?
		public Group getGroup_2() { return cGroup_2; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }
		
		//params+=FormalParameter
		public Assignment getParamsAssignment_2_1() { return cParamsAssignment_2_1; }
		
		//FormalParameter
		public RuleCall getParamsFormalParameterParserRuleCall_2_1_0() { return cParamsFormalParameterParserRuleCall_2_1_0; }
		
		//("," params+=FormalParameter)*
		public Group getGroup_2_2() { return cGroup_2_2; }
		
		//","
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }
		
		//params+=FormalParameter
		public Assignment getParamsAssignment_2_2_1() { return cParamsAssignment_2_2_1; }
		
		//FormalParameter
		public RuleCall getParamsFormalParameterParserRuleCall_2_2_1_0() { return cParamsFormalParameterParserRuleCall_2_2_1_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_2_3() { return cRightParenthesisKeyword_2_3; }
		
		////"MODULE" ID=ID ("(" (params+=FormalParameter) ("," params+=FormalParameter)* ")")?
		////"MODULE" ID=ID ("(" (params+=ID) ("," params+=ID)* ")")?
		//moduleElement+=ModuleElement*
		public Assignment getModuleElementAssignment_3() { return cModuleElementAssignment_3; }
		
		//ModuleElement
		public RuleCall getModuleElementModuleElementParserRuleCall_3_0() { return cModuleElementModuleElementParserRuleCall_3_0; }
	}
	public class ModuleElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.nusmv.language.NuSMV.ModuleElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cVariableDeclarationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIVariableDeclarationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cFrozenVariableDeclarationParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cDefineDeclarationParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cConstantsDeclarationParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cAssignConstraintParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cTransConstraintParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cInitConstraintParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cInvarConstraintParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cFairnessConstraintParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cCtlSpecificationParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		private final RuleCall cPslSpecificationParserRuleCall_11 = (RuleCall)cAlternatives.eContents().get(11);
		private final RuleCall cInvarSpecificationParserRuleCall_12 = (RuleCall)cAlternatives.eContents().get(12);
		private final RuleCall cLtlSpecificationParserRuleCall_13 = (RuleCall)cAlternatives.eContents().get(13);
		private final RuleCall cIsaDeclarationParserRuleCall_14 = (RuleCall)cAlternatives.eContents().get(14);
		private final RuleCall cComputeSpecificationParserRuleCall_15 = (RuleCall)cAlternatives.eContents().get(15);
		
		////un ModuleElement e' una sezione del modulo
		//ModuleElement hidden(WS, SL_COMMENT):
		//	VariableDeclaration | IVariableDeclaration | FrozenVariableDeclaration | DefineDeclaration | ConstantsDeclaration |
		//	AssignConstraint | TransConstraint | InitConstraint | InvarConstraint | FairnessConstraint | CtlSpecification |
		//	PslSpecification | InvarSpecification | LtlSpecification | IsaDeclaration | ComputeSpecification;
		@Override public ParserRule getRule() { return rule; }
		
		//VariableDeclaration | IVariableDeclaration | FrozenVariableDeclaration | DefineDeclaration | ConstantsDeclaration |
		//AssignConstraint | TransConstraint | InitConstraint | InvarConstraint | FairnessConstraint | CtlSpecification |
		//PslSpecification | InvarSpecification | LtlSpecification | IsaDeclaration | ComputeSpecification
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//VariableDeclaration
		public RuleCall getVariableDeclarationParserRuleCall_0() { return cVariableDeclarationParserRuleCall_0; }
		
		//IVariableDeclaration
		public RuleCall getIVariableDeclarationParserRuleCall_1() { return cIVariableDeclarationParserRuleCall_1; }
		
		//FrozenVariableDeclaration
		public RuleCall getFrozenVariableDeclarationParserRuleCall_2() { return cFrozenVariableDeclarationParserRuleCall_2; }
		
		//DefineDeclaration
		public RuleCall getDefineDeclarationParserRuleCall_3() { return cDefineDeclarationParserRuleCall_3; }
		
		//ConstantsDeclaration
		public RuleCall getConstantsDeclarationParserRuleCall_4() { return cConstantsDeclarationParserRuleCall_4; }
		
		//AssignConstraint
		public RuleCall getAssignConstraintParserRuleCall_5() { return cAssignConstraintParserRuleCall_5; }
		
		//TransConstraint
		public RuleCall getTransConstraintParserRuleCall_6() { return cTransConstraintParserRuleCall_6; }
		
		//InitConstraint
		public RuleCall getInitConstraintParserRuleCall_7() { return cInitConstraintParserRuleCall_7; }
		
		//InvarConstraint
		public RuleCall getInvarConstraintParserRuleCall_8() { return cInvarConstraintParserRuleCall_8; }
		
		//FairnessConstraint
		public RuleCall getFairnessConstraintParserRuleCall_9() { return cFairnessConstraintParserRuleCall_9; }
		
		//CtlSpecification
		public RuleCall getCtlSpecificationParserRuleCall_10() { return cCtlSpecificationParserRuleCall_10; }
		
		//PslSpecification
		public RuleCall getPslSpecificationParserRuleCall_11() { return cPslSpecificationParserRuleCall_11; }
		
		//InvarSpecification
		public RuleCall getInvarSpecificationParserRuleCall_12() { return cInvarSpecificationParserRuleCall_12; }
		
		//LtlSpecification
		public RuleCall getLtlSpecificationParserRuleCall_13() { return cLtlSpecificationParserRuleCall_13; }
		
		//IsaDeclaration
		public RuleCall getIsaDeclarationParserRuleCall_14() { return cIsaDeclarationParserRuleCall_14; }
		
		//ComputeSpecification
		public RuleCall getComputeSpecificationParserRuleCall_15() { return cComputeSpecificationParserRuleCall_15; }
	}
	public class VariableDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.nusmv.language.NuSMV.VariableDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVARKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cVariableDeclarationAction_1 = (Action)cGroup.eContents().get(1);
		private final Assignment cVarsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVarsVarBodyParserRuleCall_2_0 = (RuleCall)cVarsAssignment_2.eContents().get(0);
		
		////Also the single keyword "VAR" is accepted (without anything else)
		//VariableDeclaration hidden(WS, SL_COMMENT): //"VAR" (vars+=VarBody ";")+
		//	"VAR" {VariableDeclaration} vars+=VarBody*;
		@Override public ParserRule getRule() { return rule; }
		
		////"VAR" (vars+=VarBody ";")+
		//"VAR" {VariableDeclaration} vars+=VarBody*
		public Group getGroup() { return cGroup; }
		
		////"VAR" (vars+=VarBody ";")+
		//"VAR"
		public Keyword getVARKeyword_0() { return cVARKeyword_0; }
		
		//{VariableDeclaration}
		public Action getVariableDeclarationAction_1() { return cVariableDeclarationAction_1; }
		
		//vars+=VarBody*
		public Assignment getVarsAssignment_2() { return cVarsAssignment_2; }
		
		//VarBody
		public RuleCall getVarsVarBodyParserRuleCall_2_0() { return cVarsVarBodyParserRuleCall_2_0; }
	}
	public class IVariableDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.nusmv.language.NuSMV.IVariableDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIVARKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cVarsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVarsVarBodyParserRuleCall_1_0 = (RuleCall)cVarsAssignment_1.eContents().get(0);
		
		//IVariableDeclaration hidden(WS, SL_COMMENT):
		//	"IVAR" vars+=VarBody+;
		@Override public ParserRule getRule() { return rule; }
		
		//"IVAR" vars+=VarBody+
		public Group getGroup() { return cGroup; }
		
		//"IVAR"
		public Keyword getIVARKeyword_0() { return cIVARKeyword_0; }
		
		//vars+=VarBody+
		public Assignment getVarsAssignment_1() { return cVarsAssignment_1; }
		
		//VarBody
		public RuleCall getVarsVarBodyParserRuleCall_1_0() { return cVarsVarBodyParserRuleCall_1_0; }
	}
	public class FrozenVariableDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.nusmv.language.NuSMV.FrozenVariableDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFROZENVARKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cVarsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVarsVarBodyParserRuleCall_1_0 = (RuleCall)cVarsAssignment_1.eContents().get(0);
		
		//FrozenVariableDeclaration hidden(WS, SL_COMMENT):
		//	"FROZENVAR" vars+=VarBody+;
		@Override public ParserRule getRule() { return rule; }
		
		//"FROZENVAR" vars+=VarBody+
		public Group getGroup() { return cGroup; }
		
		//"FROZENVAR"
		public Keyword getFROZENVARKeyword_0() { return cFROZENVARKeyword_0; }
		
		//vars+=VarBody+
		public Assignment getVarsAssignment_1() { return cVarsAssignment_1; }
		
		//VarBody
		public RuleCall getVarsVarBodyParserRuleCall_1_0() { return cVarsVarBodyParserRuleCall_1_0; }
	}
	public class VarBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.nusmv.language.NuSMV.VarBody");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeTypeParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		private final Assignment cSemicolonAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Keyword cSemicolonSemicolonKeyword_3_0 = (Keyword)cSemicolonAssignment_3.eContents().get(0);
		
		//VarBody hidden(WS, SL_COMMENT):
		//	name=ID ":" type=Type semicolon?=";";
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ":" type=Type semicolon?=";"
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//type=Type
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//Type
		public RuleCall getTypeTypeParserRuleCall_2_0() { return cTypeTypeParserRuleCall_2_0; }
		
		//semicolon?=";"
		public Assignment getSemicolonAssignment_3() { return cSemicolonAssignment_3; }
		
		//";"
		public Keyword getSemicolonSemicolonKeyword_3_0() { return cSemicolonSemicolonKeyword_3_0; }
	}
	public class DefineDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.nusmv.language.NuSMV.DefineDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDefineAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cDefineDEFINEKeyword_0_0 = (Keyword)cDefineAssignment_0.eContents().get(0);
		private final Assignment cDefineBodiesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDefineBodiesDefineBodyParserRuleCall_1_0 = (RuleCall)cDefineBodiesAssignment_1.eContents().get(0);
		
		//DefineDeclaration hidden(WS, SL_COMMENT):
		//	define="DEFINE" defineBodies+=DefineBody*;
		@Override public ParserRule getRule() { return rule; }
		
		//define="DEFINE" defineBodies+=DefineBody*
		public Group getGroup() { return cGroup; }
		
		//define="DEFINE"
		public Assignment getDefineAssignment_0() { return cDefineAssignment_0; }
		
		//"DEFINE"
		public Keyword getDefineDEFINEKeyword_0_0() { return cDefineDEFINEKeyword_0_0; }
		
		//defineBodies+=DefineBody*
		public Assignment getDefineBodiesAssignment_1() { return cDefineBodiesAssignment_1; }
		
		//DefineBody
		public RuleCall getDefineBodiesDefineBodyParserRuleCall_1_0() { return cDefineBodiesDefineBodyParserRuleCall_1_0; }
	}
	public class DefineBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.nusmv.language.NuSMV.DefineBody");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVarAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVarIDTerminalRuleCall_0_0 = (RuleCall)cVarAssignment_0.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAssignmentAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAssignmentSimpleExpressionParserRuleCall_2_0 = (RuleCall)cAssignmentAssignment_2.eContents().get(0);
		private final Assignment cSemicolonAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Keyword cSemicolonSemicolonKeyword_3_0 = (Keyword)cSemicolonAssignment_3.eContents().get(0);
		
		//DefineBody hidden(WS, SL_COMMENT):
		//	var=ID ":=" assignment=SimpleExpression semicolon?=";";
		@Override public ParserRule getRule() { return rule; }
		
		//var=ID ":=" assignment=SimpleExpression semicolon?=";"
		public Group getGroup() { return cGroup; }
		
		//var=ID
		public Assignment getVarAssignment_0() { return cVarAssignment_0; }
		
		//ID
		public RuleCall getVarIDTerminalRuleCall_0_0() { return cVarIDTerminalRuleCall_0_0; }
		
		//":="
		public Keyword getColonEqualsSignKeyword_1() { return cColonEqualsSignKeyword_1; }
		
		//assignment=SimpleExpression
		public Assignment getAssignmentAssignment_2() { return cAssignmentAssignment_2; }
		
		//SimpleExpression
		public RuleCall getAssignmentSimpleExpressionParserRuleCall_2_0() { return cAssignmentSimpleExpressionParserRuleCall_2_0; }
		
		//semicolon?=";"
		public Assignment getSemicolonAssignment_3() { return cSemicolonAssignment_3; }
		
		//";"
		public Keyword getSemicolonSemicolonKeyword_3_0() { return cSemicolonSemicolonKeyword_3_0; }
	}
	public class ConstantsDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.nusmv.language.NuSMV.ConstantsDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCONSTANTSKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cConstantsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConstantsIDTerminalRuleCall_1_0 = (RuleCall)cConstantsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cConstantsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cConstantsIDTerminalRuleCall_2_1_0 = (RuleCall)cConstantsAssignment_2_1.eContents().get(0);
		private final Assignment cSemicolonAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Keyword cSemicolonSemicolonKeyword_3_0 = (Keyword)cSemicolonAssignment_3.eContents().get(0);
		
		//ConstantsDeclaration hidden(WS, SL_COMMENT):
		//	"CONSTANTS" constants+=ID ("," constants+=ID)* semicolon?=";";
		@Override public ParserRule getRule() { return rule; }
		
		//"CONSTANTS" constants+=ID ("," constants+=ID)* semicolon?=";"
		public Group getGroup() { return cGroup; }
		
		//"CONSTANTS"
		public Keyword getCONSTANTSKeyword_0() { return cCONSTANTSKeyword_0; }
		
		//constants+=ID
		public Assignment getConstantsAssignment_1() { return cConstantsAssignment_1; }
		
		//ID
		public RuleCall getConstantsIDTerminalRuleCall_1_0() { return cConstantsIDTerminalRuleCall_1_0; }
		
		//("," constants+=ID)*
		public Group getGroup_2() { return cGroup_2; }
		
		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//constants+=ID
		public Assignment getConstantsAssignment_2_1() { return cConstantsAssignment_2_1; }
		
		//ID
		public RuleCall getConstantsIDTerminalRuleCall_2_1_0() { return cConstantsIDTerminalRuleCall_2_1_0; }
		
		//semicolon?=";"
		public Assignment getSemicolonAssignment_3() { return cSemicolonAssignment_3; }
		
		//";"
		public Keyword getSemicolonSemicolonKeyword_3_0() { return cSemicolonSemicolonKeyword_3_0; }
	}
	public class AssignConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.nusmv.language.NuSMV.AssignConstraint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAssignAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cAssignASSIGNKeyword_0_0 = (Keyword)cAssignAssignment_0.eContents().get(0);
		private final Assignment cBodiesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBodiesAssignBodyParserRuleCall_1_0 = (RuleCall)cBodiesAssignment_1.eContents().get(0);
		
		//// 2.3.8 ASSIGN Constraint
		//AssignConstraint AssignConstraintElement hidden(WS, SL_COMMENT):
		//	assign="ASSIGN" bodies+=AssignBody*;
		@Override public ParserRule getRule() { return rule; }
		
		//assign="ASSIGN" bodies+=AssignBody*
		public Group getGroup() { return cGroup; }
		
		//assign="ASSIGN"
		public Assignment getAssignAssignment_0() { return cAssignAssignment_0; }
		
		//"ASSIGN"
		public Keyword getAssignASSIGNKeyword_0_0() { return cAssignASSIGNKeyword_0_0; }
		
		//bodies+=AssignBody*
		public Assignment getBodiesAssignment_1() { return cBodiesAssignment_1; }
		
		//AssignBody
		public RuleCall getBodiesAssignBodyParserRuleCall_1_0() { return cBodiesAssignBodyParserRuleCall_1_0; }
	}
	public class AssignBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.nusmv.language.NuSMV.AssignBody");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cVarBodyAssignParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cInitBodyParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cNextBodyParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//AssignBody hidden(WS, SL_COMMENT):
		//	VarBodyAssign | InitBody | NextBody;
		@Override public ParserRule getRule() { return rule; }
		
		//VarBodyAssign | InitBody | NextBody
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//VarBodyAssign
		public RuleCall getVarBodyAssignParserRuleCall_0() { return cVarBodyAssignParserRuleCall_0; }
		
		//InitBody
		public RuleCall getInitBodyParserRuleCall_1() { return cInitBodyParserRuleCall_1; }
		
		//NextBody
		public RuleCall getNextBodyParserRuleCall_2() { return cNextBodyParserRuleCall_2; }
	}
	public class VarBodyAssignElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.nusmv.language.NuSMV.VarBodyAssign");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVarAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVarVariableIDParserRuleCall_0_0 = (RuleCall)cVarAssignment_0.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAssignmentAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAssignmentSimpleExpressionParserRuleCall_2_0 = (RuleCall)cAssignmentAssignment_2.eContents().get(0);
		private final Assignment cSemicolonAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Keyword cSemicolonSemicolonKeyword_3_0 = (Keyword)cSemicolonAssignment_3.eContents().get(0);
		
		//VarBodyAssign hidden(WS, SL_COMMENT):
		//	var=VariableID ":=" assignment=SimpleExpression semicolon?=";";
		@Override public ParserRule getRule() { return rule; }
		
		//var=VariableID ":=" assignment=SimpleExpression semicolon?=";"
		public Group getGroup() { return cGroup; }
		
		//var=VariableID
		public Assignment getVarAssignment_0() { return cVarAssignment_0; }
		
		//VariableID
		public RuleCall getVarVariableIDParserRuleCall_0_0() { return cVarVariableIDParserRuleCall_0_0; }
		
		//":="
		public Keyword getColonEqualsSignKeyword_1() { return cColonEqualsSignKeyword_1; }
		
		//assignment=SimpleExpression
		public Assignment getAssignmentAssignment_2() { return cAssignmentAssignment_2; }
		
		//SimpleExpression
		public RuleCall getAssignmentSimpleExpressionParserRuleCall_2_0() { return cAssignmentSimpleExpressionParserRuleCall_2_0; }
		
		//semicolon?=";"
		public Assignment getSemicolonAssignment_3() { return cSemicolonAssignment_3; }
		
		//";"
		public Keyword getSemicolonSemicolonKeyword_3_0() { return cSemicolonSemicolonKeyword_3_0; }
	}
	public class InitBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.nusmv.language.NuSMV.InitBody");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInitKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cVarAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVarVariableIDParserRuleCall_2_0 = (RuleCall)cVarAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cColonEqualsSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cInitialAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cInitialSimpleExpressionParserRuleCall_5_0 = (RuleCall)cInitialAssignment_5.eContents().get(0);
		private final Assignment cSemicolonAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final Keyword cSemicolonSemicolonKeyword_6_0 = (Keyword)cSemicolonAssignment_6.eContents().get(0);
		
		//InitBody hidden(WS, SL_COMMENT):
		//	"init" "(" var=VariableID ")" ":=" initial=SimpleExpression semicolon?=";";
		@Override public ParserRule getRule() { return rule; }
		
		//"init" "(" var=VariableID ")" ":=" initial=SimpleExpression semicolon?=";"
		public Group getGroup() { return cGroup; }
		
		//"init"
		public Keyword getInitKeyword_0() { return cInitKeyword_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//var=VariableID
		public Assignment getVarAssignment_2() { return cVarAssignment_2; }
		
		//VariableID
		public RuleCall getVarVariableIDParserRuleCall_2_0() { return cVarVariableIDParserRuleCall_2_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//":="
		public Keyword getColonEqualsSignKeyword_4() { return cColonEqualsSignKeyword_4; }
		
		//initial=SimpleExpression
		public Assignment getInitialAssignment_5() { return cInitialAssignment_5; }
		
		//SimpleExpression
		public RuleCall getInitialSimpleExpressionParserRuleCall_5_0() { return cInitialSimpleExpressionParserRuleCall_5_0; }
		
		//semicolon?=";"
		public Assignment getSemicolonAssignment_6() { return cSemicolonAssignment_6; }
		
		//";"
		public Keyword getSemicolonSemicolonKeyword_6_0() { return cSemicolonSemicolonKeyword_6_0; }
	}
	public class NextBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.nusmv.language.NuSMV.NextBody");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNextKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cVarAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVarVariableIDParserRuleCall_2_0 = (RuleCall)cVarAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cColonEqualsSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cNextAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cNextNextExpressionParserRuleCall_5_0 = (RuleCall)cNextAssignment_5.eContents().get(0);
		private final Assignment cSemicolonAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final Keyword cSemicolonSemicolonKeyword_6_0 = (Keyword)cSemicolonAssignment_6.eContents().get(0);
		
		//// Non so se la seguente potrebbe essere una via di risoluzione, ma dopo averla provata
		//// non mi sembra sensata e mi da' errore nel generare il linguaggio
		////InitBody returns AssignBodyInit hidden(WS, SL_COMMENT):
		////	"init" "(" var=[VarBody|ID] ")" ":=" initial=(SimpleExpression|[VarBody]) semicolon?=";";
		//// next of a (qualified) variable
		//// TODO refactor qualified variable
		//NextBody hidden(WS, SL_COMMENT):
		//	"next" "(" var=VariableID ")" ":=" next=NextExpression semicolon?=";";
		@Override public ParserRule getRule() { return rule; }
		
		//"next" "(" var=VariableID ")" ":=" next=NextExpression semicolon?=";"
		public Group getGroup() { return cGroup; }
		
		//"next"
		public Keyword getNextKeyword_0() { return cNextKeyword_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//var=VariableID
		public Assignment getVarAssignment_2() { return cVarAssignment_2; }
		
		//VariableID
		public RuleCall getVarVariableIDParserRuleCall_2_0() { return cVarVariableIDParserRuleCall_2_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//":="
		public Keyword getColonEqualsSignKeyword_4() { return cColonEqualsSignKeyword_4; }
		
		//next=NextExpression
		public Assignment getNextAssignment_5() { return cNextAssignment_5; }
		
		//NextExpression
		public RuleCall getNextNextExpressionParserRuleCall_5_0() { return cNextNextExpressionParserRuleCall_5_0; }
		
		//semicolon?=";"
		public Assignment getSemicolonAssignment_6() { return cSemicolonAssignment_6; }
		
		//";"
		public Keyword getSemicolonSemicolonKeyword_6_0() { return cSemicolonSemicolonKeyword_6_0; }
	}
	public class TransConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.nusmv.language.NuSMV.TransConstraint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTRANSKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTransExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTransExpressionSimpleExpressionParserRuleCall_1_0 = (RuleCall)cTransExpressionAssignment_1.eContents().get(0);
		private final Assignment cSemicolonAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cSemicolonSemicolonKeyword_2_0 = (Keyword)cSemicolonAssignment_2.eContents().get(0);
		
		//TransConstraint hidden(WS, SL_COMMENT):
		//	"TRANS" transExpression=SimpleExpression semicolon?=";"?;
		@Override public ParserRule getRule() { return rule; }
		
		//"TRANS" transExpression=SimpleExpression semicolon?=";"?
		public Group getGroup() { return cGroup; }
		
		//"TRANS"
		public Keyword getTRANSKeyword_0() { return cTRANSKeyword_0; }
		
		//transExpression=SimpleExpression
		public Assignment getTransExpressionAssignment_1() { return cTransExpressionAssignment_1; }
		
		//SimpleExpression
		public RuleCall getTransExpressionSimpleExpressionParserRuleCall_1_0() { return cTransExpressionSimpleExpressionParserRuleCall_1_0; }
		
		//semicolon?=";"?
		public Assignment getSemicolonAssignment_2() { return cSemicolonAssignment_2; }
		
		//";"
		public Keyword getSemicolonSemicolonKeyword_2_0() { return cSemicolonSemicolonKeyword_2_0; }
	}
	public class InitConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.nusmv.language.NuSMV.InitConstraint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cINITKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cInitExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cInitExpressionSimpleExpressionParserRuleCall_1_0 = (RuleCall)cInitExpressionAssignment_1.eContents().get(0);
		private final Assignment cSemicolonAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cSemicolonSemicolonKeyword_2_0 = (Keyword)cSemicolonAssignment_2.eContents().get(0);
		
		//InitConstraint hidden(WS, SL_COMMENT):
		//	"INIT" initExpression=SimpleExpression semicolon?=";"?;
		@Override public ParserRule getRule() { return rule; }
		
		//"INIT" initExpression=SimpleExpression semicolon?=";"?
		public Group getGroup() { return cGroup; }
		
		//"INIT"
		public Keyword getINITKeyword_0() { return cINITKeyword_0; }
		
		//initExpression=SimpleExpression
		public Assignment getInitExpressionAssignment_1() { return cInitExpressionAssignment_1; }
		
		//SimpleExpression
		public RuleCall getInitExpressionSimpleExpressionParserRuleCall_1_0() { return cInitExpressionSimpleExpressionParserRuleCall_1_0; }
		
		//semicolon?=";"?
		public Assignment getSemicolonAssignment_2() { return cSemicolonAssignment_2; }
		
		//";"
		public Keyword getSemicolonSemicolonKeyword_2_0() { return cSemicolonSemicolonKeyword_2_0; }
	}
	public class InvarConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.nusmv.language.NuSMV.InvarConstraint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cINVARKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cInvarExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cInvarExpressionSimpleExpressionParserRuleCall_1_0 = (RuleCall)cInvarExpressionAssignment_1.eContents().get(0);
		private final Assignment cSemicolonAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cSemicolonSemicolonKeyword_2_0 = (Keyword)cSemicolonAssignment_2.eContents().get(0);
		
		//InvarConstraint hidden(WS, SL_COMMENT):
		//	"INVAR" invarExpression=SimpleExpression semicolon?=";"?;
		@Override public ParserRule getRule() { return rule; }
		
		//"INVAR" invarExpression=SimpleExpression semicolon?=";"?
		public Group getGroup() { return cGroup; }
		
		//"INVAR"
		public Keyword getINVARKeyword_0() { return cINVARKeyword_0; }
		
		//invarExpression=SimpleExpression
		public Assignment getInvarExpressionAssignment_1() { return cInvarExpressionAssignment_1; }
		
		//SimpleExpression
		public RuleCall getInvarExpressionSimpleExpressionParserRuleCall_1_0() { return cInvarExpressionSimpleExpressionParserRuleCall_1_0; }
		
		//semicolon?=";"?
		public Assignment getSemicolonAssignment_2() { return cSemicolonAssignment_2; }
		
		//";"
		public Keyword getSemicolonSemicolonKeyword_2_0() { return cSemicolonSemicolonKeyword_2_0; }
	}
	public class FairnessConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.nusmv.language.NuSMV.FairnessConstraint");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFairnessExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cJusticeExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cCompassionExpressionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//FairnessConstraint hidden(WS, SL_COMMENT):
		//	FairnessExpression | JusticeExpression | CompassionExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//FairnessExpression | JusticeExpression | CompassionExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//FairnessExpression
		public RuleCall getFairnessExpressionParserRuleCall_0() { return cFairnessExpressionParserRuleCall_0; }
		
		//JusticeExpression
		public RuleCall getJusticeExpressionParserRuleCall_1() { return cJusticeExpressionParserRuleCall_1; }
		
		//CompassionExpression
		public RuleCall getCompassionExpressionParserRuleCall_2() { return cCompassionExpressionParserRuleCall_2; }
	}
	public class FairnessExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.nusmv.language.NuSMV.FairnessExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFAIRNESSKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFairnessExprAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFairnessExprSimpleExpressionParserRuleCall_1_0 = (RuleCall)cFairnessExprAssignment_1.eContents().get(0);
		private final Assignment cSemicolonAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cSemicolonSemicolonKeyword_2_0 = (Keyword)cSemicolonAssignment_2.eContents().get(0);
		
		//FairnessExpression hidden(WS, SL_COMMENT):
		//	"FAIRNESS" fairnessExpr=SimpleExpression semicolon?=";"?;
		@Override public ParserRule getRule() { return rule; }
		
		//"FAIRNESS" fairnessExpr=SimpleExpression semicolon?=";"?
		public Group getGroup() { return cGroup; }
		
		//"FAIRNESS"
		public Keyword getFAIRNESSKeyword_0() { return cFAIRNESSKeyword_0; }
		
		//fairnessExpr=SimpleExpression
		public Assignment getFairnessExprAssignment_1() { return cFairnessExprAssignment_1; }
		
		//SimpleExpression
		public RuleCall getFairnessExprSimpleExpressionParserRuleCall_1_0() { return cFairnessExprSimpleExpressionParserRuleCall_1_0; }
		
		//semicolon?=";"?
		public Assignment getSemicolonAssignment_2() { return cSemicolonAssignment_2; }
		
		//";"
		public Keyword getSemicolonSemicolonKeyword_2_0() { return cSemicolonSemicolonKeyword_2_0; }
	}
	public class JusticeExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.nusmv.language.NuSMV.JusticeExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cJUSTICEKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cJusticeExprAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cJusticeExprSimpleExpressionParserRuleCall_1_0 = (RuleCall)cJusticeExprAssignment_1.eContents().get(0);
		private final Assignment cSemicolonAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cSemicolonSemicolonKeyword_2_0 = (Keyword)cSemicolonAssignment_2.eContents().get(0);
		
		//JusticeExpression hidden(WS, SL_COMMENT):
		//	"JUSTICE" justiceExpr=SimpleExpression semicolon?=";"?;
		@Override public ParserRule getRule() { return rule; }
		
		//"JUSTICE" justiceExpr=SimpleExpression semicolon?=";"?
		public Group getGroup() { return cGroup; }
		
		//"JUSTICE"
		public Keyword getJUSTICEKeyword_0() { return cJUSTICEKeyword_0; }
		
		//justiceExpr=SimpleExpression
		public Assignment getJusticeExprAssignment_1() { return cJusticeExprAssignment_1; }
		
		//SimpleExpression
		public RuleCall getJusticeExprSimpleExpressionParserRuleCall_1_0() { return cJusticeExprSimpleExpressionParserRuleCall_1_0; }
		
		//semicolon?=";"?
		public Assignment getSemicolonAssignment_2() { return cSemicolonAssignment_2; }
		
		//";"
		public Keyword getSemicolonSemicolonKeyword_2_0() { return cSemicolonSemicolonKeyword_2_0; }
	}
	public class CompassionExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.nusmv.language.NuSMV.CompassionExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCOMPASSIONKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFirstExprAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFirstExprSimpleExpressionParserRuleCall_1_0 = (RuleCall)cFirstExprAssignment_1.eContents().get(0);
		private final Keyword cCommaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cSecondExprAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSecondExprSimpleExpressionParserRuleCall_3_0 = (RuleCall)cSecondExprAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cSemicolonAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final Keyword cSemicolonSemicolonKeyword_5_0 = (Keyword)cSemicolonAssignment_5.eContents().get(0);
		
		//CompassionExpression hidden(WS, SL_COMMENT):
		//	"COMPASSION (" firstExpr=SimpleExpression "," secondExpr=SimpleExpression ")" semicolon?=";"?;
		@Override public ParserRule getRule() { return rule; }
		
		//"COMPASSION (" firstExpr=SimpleExpression "," secondExpr=SimpleExpression ")" semicolon?=";"?
		public Group getGroup() { return cGroup; }
		
		//"COMPASSION ("
		public Keyword getCOMPASSIONKeyword_0() { return cCOMPASSIONKeyword_0; }
		
		//firstExpr=SimpleExpression
		public Assignment getFirstExprAssignment_1() { return cFirstExprAssignment_1; }
		
		//SimpleExpression
		public RuleCall getFirstExprSimpleExpressionParserRuleCall_1_0() { return cFirstExprSimpleExpressionParserRuleCall_1_0; }
		
		//","
		public Keyword getCommaKeyword_2() { return cCommaKeyword_2; }
		
		//secondExpr=SimpleExpression
		public Assignment getSecondExprAssignment_3() { return cSecondExprAssignment_3; }
		
		//SimpleExpression
		public RuleCall getSecondExprSimpleExpressionParserRuleCall_3_0() { return cSecondExprSimpleExpressionParserRuleCall_3_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
		
		//semicolon?=";"?
		public Assignment getSemicolonAssignment_5() { return cSemicolonAssignment_5; }
		
		//";"
		public Keyword getSemicolonSemicolonKeyword_5_0() { return cSemicolonSemicolonKeyword_5_0; }
	}
	public class CtlSpecificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.nusmv.language.NuSMV.CtlSpecification");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSpecKeyWordAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cSpecKeyWordAlternatives_0_0 = (Alternatives)cSpecKeyWordAssignment_0.eContents().get(0);
		private final Keyword cSpecKeyWordCTLSPECKeyword_0_0_0 = (Keyword)cSpecKeyWordAlternatives_0_0.eContents().get(0);
		private final Keyword cSpecKeyWordSPECKeyword_0_0_1 = (Keyword)cSpecKeyWordAlternatives_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cNameKeyWordAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Keyword cNameKeyWordNAMEKeyword_1_0_0 = (Keyword)cNameKeyWordAssignment_1_0.eContents().get(0);
		private final Assignment cNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_1_0 = (RuleCall)cNameAssignment_1_1.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cCtlExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCtlExpressionCTLExpressionParserRuleCall_2_0 = (RuleCall)cCtlExpressionAssignment_2.eContents().get(0);
		private final Assignment cSemicolonAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Keyword cSemicolonSemicolonKeyword_3_0 = (Keyword)cSemicolonAssignment_3.eContents().get(0);
		
		////It doesn't work. It doesn't get all the CTL properties. Why?
		////Isn't it equivalent to the previous one?
		//CtlSpecification hidden(WS, SL_COMMENT):
		//	specKeyWord=("CTLSPEC" | "SPEC") (nameKeyWord?="NAME" name=ID ":=")? ctlExpression=CTLExpression semicolon?=";"?;
		@Override public ParserRule getRule() { return rule; }
		
		//specKeyWord=("CTLSPEC" | "SPEC") (nameKeyWord?="NAME" name=ID ":=")? ctlExpression=CTLExpression semicolon?=";"?
		public Group getGroup() { return cGroup; }
		
		//specKeyWord=("CTLSPEC" | "SPEC")
		public Assignment getSpecKeyWordAssignment_0() { return cSpecKeyWordAssignment_0; }
		
		//("CTLSPEC" | "SPEC")
		public Alternatives getSpecKeyWordAlternatives_0_0() { return cSpecKeyWordAlternatives_0_0; }
		
		//"CTLSPEC"
		public Keyword getSpecKeyWordCTLSPECKeyword_0_0_0() { return cSpecKeyWordCTLSPECKeyword_0_0_0; }
		
		//"SPEC"
		public Keyword getSpecKeyWordSPECKeyword_0_0_1() { return cSpecKeyWordSPECKeyword_0_0_1; }
		
		//(nameKeyWord?="NAME" name=ID ":=")?
		public Group getGroup_1() { return cGroup_1; }
		
		//nameKeyWord?="NAME"
		public Assignment getNameKeyWordAssignment_1_0() { return cNameKeyWordAssignment_1_0; }
		
		//"NAME"
		public Keyword getNameKeyWordNAMEKeyword_1_0_0() { return cNameKeyWordNAMEKeyword_1_0_0; }
		
		//name=ID
		public Assignment getNameAssignment_1_1() { return cNameAssignment_1_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_1_0() { return cNameIDTerminalRuleCall_1_1_0; }
		
		//":="
		public Keyword getColonEqualsSignKeyword_1_2() { return cColonEqualsSignKeyword_1_2; }
		
		//ctlExpression=CTLExpression
		public Assignment getCtlExpressionAssignment_2() { return cCtlExpressionAssignment_2; }
		
		//CTLExpression
		public RuleCall getCtlExpressionCTLExpressionParserRuleCall_2_0() { return cCtlExpressionCTLExpressionParserRuleCall_2_0; }
		
		//semicolon?=";"?
		public Assignment getSemicolonAssignment_3() { return cSemicolonAssignment_3; }
		
		//";"
		public Keyword getSemicolonSemicolonKeyword_3_0() { return cSemicolonSemicolonKeyword_3_0; }
	}
	public class PslSpecificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.nusmv.language.NuSMV.PslSpecification");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPSLSPECKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cNameKeyWordAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Keyword cNameKeyWordNAMEKeyword_1_0_0 = (Keyword)cNameKeyWordAssignment_1_0.eContents().get(0);
		private final Assignment cNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_1_0 = (RuleCall)cNameAssignment_1_1.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cPslExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPslExpressionPSLExpressionParserRuleCall_2_0 = (RuleCall)cPslExpressionAssignment_2.eContents().get(0);
		private final Assignment cSemicolonAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Keyword cSemicolonSemicolonKeyword_3_0 = (Keyword)cSemicolonAssignment_3.eContents().get(0);
		
		//PslSpecification hidden(WS, SL_COMMENT):
		//	"PSLSPEC" (nameKeyWord?="NAME" name=ID ":=")? pslExpression=PSLExpression semicolon?=";"?;
		@Override public ParserRule getRule() { return rule; }
		
		//"PSLSPEC" (nameKeyWord?="NAME" name=ID ":=")? pslExpression=PSLExpression semicolon?=";"?
		public Group getGroup() { return cGroup; }
		
		//"PSLSPEC"
		public Keyword getPSLSPECKeyword_0() { return cPSLSPECKeyword_0; }
		
		//(nameKeyWord?="NAME" name=ID ":=")?
		public Group getGroup_1() { return cGroup_1; }
		
		//nameKeyWord?="NAME"
		public Assignment getNameKeyWordAssignment_1_0() { return cNameKeyWordAssignment_1_0; }
		
		//"NAME"
		public Keyword getNameKeyWordNAMEKeyword_1_0_0() { return cNameKeyWordNAMEKeyword_1_0_0; }
		
		//name=ID
		public Assignment getNameAssignment_1_1() { return cNameAssignment_1_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_1_0() { return cNameIDTerminalRuleCall_1_1_0; }
		
		//":="
		public Keyword getColonEqualsSignKeyword_1_2() { return cColonEqualsSignKeyword_1_2; }
		
		//pslExpression=PSLExpression
		public Assignment getPslExpressionAssignment_2() { return cPslExpressionAssignment_2; }
		
		//PSLExpression
		public RuleCall getPslExpressionPSLExpressionParserRuleCall_2_0() { return cPslExpressionPSLExpressionParserRuleCall_2_0; }
		
		//semicolon?=";"?
		public Assignment getSemicolonAssignment_3() { return cSemicolonAssignment_3; }
		
		//";"
		public Keyword getSemicolonSemicolonKeyword_3_0() { return cSemicolonSemicolonKeyword_3_0; }
	}
	public class InvarSpecificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.nusmv.language.NuSMV.InvarSpecification");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cINVARSPECKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cInvarSpecAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cInvarSpecNextExpressionParserRuleCall_0_1_0 = (RuleCall)cInvarSpecAssignment_0_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cINVARSPECKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_1_0 = (RuleCall)cNameAssignment_1_1.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cInvarSpecAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cInvarSpecNextExpressionParserRuleCall_1_3_0 = (RuleCall)cInvarSpecAssignment_1_3.eContents().get(0);
		private final Assignment cSemicolonAssignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final Keyword cSemicolonSemicolonKeyword_1_4_0 = (Keyword)cSemicolonAssignment_1_4.eContents().get(0);
		
		//InvarSpecification hidden(WS, SL_COMMENT):
		//	"INVARSPEC" invarSpec=NextExpression ";" | "INVARSPEC" name=ID ":=" invarSpec=NextExpression semicolon?=";"?;
		@Override public ParserRule getRule() { return rule; }
		
		//"INVARSPEC" invarSpec=NextExpression ";" | "INVARSPEC" name=ID ":=" invarSpec=NextExpression semicolon?=";"?
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"INVARSPEC" invarSpec=NextExpression ";"
		public Group getGroup_0() { return cGroup_0; }
		
		//"INVARSPEC"
		public Keyword getINVARSPECKeyword_0_0() { return cINVARSPECKeyword_0_0; }
		
		//invarSpec=NextExpression
		public Assignment getInvarSpecAssignment_0_1() { return cInvarSpecAssignment_0_1; }
		
		//NextExpression
		public RuleCall getInvarSpecNextExpressionParserRuleCall_0_1_0() { return cInvarSpecNextExpressionParserRuleCall_0_1_0; }
		
		//";"
		public Keyword getSemicolonKeyword_0_2() { return cSemicolonKeyword_0_2; }
		
		//"INVARSPEC" name=ID ":=" invarSpec=NextExpression semicolon?=";"?
		public Group getGroup_1() { return cGroup_1; }
		
		//"INVARSPEC"
		public Keyword getINVARSPECKeyword_1_0() { return cINVARSPECKeyword_1_0; }
		
		//name=ID
		public Assignment getNameAssignment_1_1() { return cNameAssignment_1_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_1_0() { return cNameIDTerminalRuleCall_1_1_0; }
		
		//":="
		public Keyword getColonEqualsSignKeyword_1_2() { return cColonEqualsSignKeyword_1_2; }
		
		//invarSpec=NextExpression
		public Assignment getInvarSpecAssignment_1_3() { return cInvarSpecAssignment_1_3; }
		
		//NextExpression
		public RuleCall getInvarSpecNextExpressionParserRuleCall_1_3_0() { return cInvarSpecNextExpressionParserRuleCall_1_3_0; }
		
		//semicolon?=";"?
		public Assignment getSemicolonAssignment_1_4() { return cSemicolonAssignment_1_4; }
		
		//";"
		public Keyword getSemicolonSemicolonKeyword_1_4_0() { return cSemicolonSemicolonKeyword_1_4_0; }
	}
	public class IsaDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.nusmv.language.NuSMV.IsaDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cISAKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIdAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIdIDTerminalRuleCall_1_0 = (RuleCall)cIdAssignment_1.eContents().get(0);
		
		//IsaDeclaration hidden(WS, SL_COMMENT):
		//	"ISA" id=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//"ISA" id=ID
		public Group getGroup() { return cGroup; }
		
		//"ISA"
		public Keyword getISAKeyword_0() { return cISAKeyword_0; }
		
		//id=ID
		public Assignment getIdAssignment_1() { return cIdAssignment_1; }
		
		//ID
		public RuleCall getIdIDTerminalRuleCall_1_0() { return cIdIDTerminalRuleCall_1_0; }
	}
	public class LtlSpecificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.nusmv.language.NuSMV.LtlSpecification");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLTLSPECKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cNameIdAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Keyword cNameIdNAMEKeyword_1_0_0 = (Keyword)cNameIdAssignment_1_0.eContents().get(0);
		private final Assignment cNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_1_0 = (RuleCall)cNameAssignment_1_1.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cLtlExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLtlExpressionLTLExpressionParserRuleCall_2_0 = (RuleCall)cLtlExpressionAssignment_2.eContents().get(0);
		private final Assignment cSemicolonAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Keyword cSemicolonSemicolonKeyword_3_0 = (Keyword)cSemicolonAssignment_3.eContents().get(0);
		
		//LtlSpecification hidden(WS, SL_COMMENT):
		//	"LTLSPEC" (nameId?="NAME" name=ID ":=")? ltlExpression=LTLExpression semicolon?=";"?;
		@Override public ParserRule getRule() { return rule; }
		
		//"LTLSPEC" (nameId?="NAME" name=ID ":=")? ltlExpression=LTLExpression semicolon?=";"?
		public Group getGroup() { return cGroup; }
		
		//"LTLSPEC"
		public Keyword getLTLSPECKeyword_0() { return cLTLSPECKeyword_0; }
		
		//(nameId?="NAME" name=ID ":=")?
		public Group getGroup_1() { return cGroup_1; }
		
		//nameId?="NAME"
		public Assignment getNameIdAssignment_1_0() { return cNameIdAssignment_1_0; }
		
		//"NAME"
		public Keyword getNameIdNAMEKeyword_1_0_0() { return cNameIdNAMEKeyword_1_0_0; }
		
		//name=ID
		public Assignment getNameAssignment_1_1() { return cNameAssignment_1_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_1_0() { return cNameIDTerminalRuleCall_1_1_0; }
		
		//":="
		public Keyword getColonEqualsSignKeyword_1_2() { return cColonEqualsSignKeyword_1_2; }
		
		//ltlExpression=LTLExpression
		public Assignment getLtlExpressionAssignment_2() { return cLtlExpressionAssignment_2; }
		
		//LTLExpression
		public RuleCall getLtlExpressionLTLExpressionParserRuleCall_2_0() { return cLtlExpressionLTLExpressionParserRuleCall_2_0; }
		
		//semicolon?=";"?
		public Assignment getSemicolonAssignment_3() { return cSemicolonAssignment_3; }
		
		//";"
		public Keyword getSemicolonSemicolonKeyword_3_0() { return cSemicolonSemicolonKeyword_3_0; }
	}
	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.nusmv.language.NuSMV.Type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSimpleTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cModuleTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Type hidden(WS, SL_COMMENT):
		//	SimpleType | ModuleType;
		@Override public ParserRule getRule() { return rule; }
		
		//SimpleType | ModuleType
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SimpleType
		public RuleCall getSimpleTypeParserRuleCall_0() { return cSimpleTypeParserRuleCall_0; }
		
		//ModuleType
		public RuleCall getModuleTypeParserRuleCall_1() { return cModuleTypeParserRuleCall_1; }
	}
	public class SimpleTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.nusmv.language.NuSMV.SimpleType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cBooleanTypeAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cBooleanKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cWordTypeAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cWordKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		private final Assignment cWordNumberAssignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final RuleCall cWordNumberNUMBERParserRuleCall_1_1_2_0 = (RuleCall)cWordNumberAssignment_1_1_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_1_3 = (Keyword)cGroup_1_1.eContents().get(3);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cUnsignedWordTypeAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cUnsignedKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Keyword cWordKeyword_2_1_1 = (Keyword)cGroup_2_1.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_2_1_2 = (Keyword)cGroup_2_1.eContents().get(2);
		private final Assignment cUWordNumberAssignment_2_1_3 = (Assignment)cGroup_2_1.eContents().get(3);
		private final RuleCall cUWordNumberNUMBERParserRuleCall_2_1_3_0 = (RuleCall)cUWordNumberAssignment_2_1_3.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2_1_4 = (Keyword)cGroup_2_1.eContents().get(4);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cSignedWordTypeAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cSignedWordKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_3_1_1 = (Keyword)cGroup_3_1.eContents().get(1);
		private final Assignment cSignedNumberAssignment_3_1_2 = (Assignment)cGroup_3_1.eContents().get(2);
		private final RuleCall cSignedNumberNUMBERParserRuleCall_3_1_2_0 = (RuleCall)cSignedNumberAssignment_3_1_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3_1_3 = (Keyword)cGroup_3_1.eContents().get(3);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cEnumTypeAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cValAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cValValParserRuleCall_4_2_0 = (RuleCall)cValAssignment_4_2.eContents().get(0);
		private final Group cGroup_4_3 = (Group)cGroup_4.eContents().get(3);
		private final Keyword cCommaKeyword_4_3_0 = (Keyword)cGroup_4_3.eContents().get(0);
		private final Assignment cValAssignment_4_3_1 = (Assignment)cGroup_4_3.eContents().get(1);
		private final RuleCall cValValParserRuleCall_4_3_1_0 = (RuleCall)cValAssignment_4_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4_4 = (Keyword)cGroup_4.eContents().get(4);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Action cIntervalTypeAction_5_0 = (Action)cGroup_5.eContents().get(0);
		private final Group cGroup_5_1 = (Group)cGroup_5.eContents().get(1);
		private final Assignment cLowAssignment_5_1_0 = (Assignment)cGroup_5_1.eContents().get(0);
		private final Alternatives cLowAlternatives_5_1_0_0 = (Alternatives)cLowAssignment_5_1_0.eContents().get(0);
		private final RuleCall cLowNUMBERParserRuleCall_5_1_0_0_0 = (RuleCall)cLowAlternatives_5_1_0_0.eContents().get(0);
		private final RuleCall cLowVariableIDParserRuleCall_5_1_0_0_1 = (RuleCall)cLowAlternatives_5_1_0_0.eContents().get(1);
		private final Keyword cFullStopFullStopKeyword_5_1_1 = (Keyword)cGroup_5_1.eContents().get(1);
		private final Assignment cHighAssignment_5_1_2 = (Assignment)cGroup_5_1.eContents().get(2);
		private final Alternatives cHighAlternatives_5_1_2_0 = (Alternatives)cHighAssignment_5_1_2.eContents().get(0);
		private final RuleCall cHighNUMBERParserRuleCall_5_1_2_0_0 = (RuleCall)cHighAlternatives_5_1_2_0.eContents().get(0);
		private final RuleCall cHighVariableIDParserRuleCall_5_1_2_0_1 = (RuleCall)cHighAlternatives_5_1_2_0.eContents().get(1);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Action cArrayTypeAction_6_0 = (Action)cGroup_6.eContents().get(0);
		private final Keyword cArrayKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Assignment cLowerBoundAssignment_6_2 = (Assignment)cGroup_6.eContents().get(2);
		private final Alternatives cLowerBoundAlternatives_6_2_0 = (Alternatives)cLowerBoundAssignment_6_2.eContents().get(0);
		private final RuleCall cLowerBoundNUMBERParserRuleCall_6_2_0_0 = (RuleCall)cLowerBoundAlternatives_6_2_0.eContents().get(0);
		private final RuleCall cLowerBoundVariableIDParserRuleCall_6_2_0_1 = (RuleCall)cLowerBoundAlternatives_6_2_0.eContents().get(1);
		private final Keyword cFullStopFullStopKeyword_6_3 = (Keyword)cGroup_6.eContents().get(3);
		private final Assignment cUpperBoundAssignment_6_4 = (Assignment)cGroup_6.eContents().get(4);
		private final Alternatives cUpperBoundAlternatives_6_4_0 = (Alternatives)cUpperBoundAssignment_6_4.eContents().get(0);
		private final RuleCall cUpperBoundNUMBERParserRuleCall_6_4_0_0 = (RuleCall)cUpperBoundAlternatives_6_4_0.eContents().get(0);
		private final RuleCall cUpperBoundVariableIDParserRuleCall_6_4_0_1 = (RuleCall)cUpperBoundAlternatives_6_4_0.eContents().get(1);
		private final Keyword cOfKeyword_6_5 = (Keyword)cGroup_6.eContents().get(5);
		private final Assignment cTypeAssignment_6_6 = (Assignment)cGroup_6.eContents().get(6);
		private final RuleCall cTypeSimpleTypeParserRuleCall_6_6_0 = (RuleCall)cTypeAssignment_6_6.eContents().get(0);
		
		//SimpleType hidden(WS, SL_COMMENT):
		//	{BooleanType} "boolean" | {WordType} ("word" "[" wordNumber=NUMBER "]") | {UnsignedWordType} ("unsigned" "word" "["
		//	uWordNumber=NUMBER "]") | {SignedWordType} ("signed word" "[" signedNumber=NUMBER "]") | {EnumType} "{" val+=Val (","
		//	val+=Val)* "}" | {IntervalType} (low=(NUMBER | VariableID) ".." high=(NUMBER | VariableID)) | {ArrayType} "array"
		//	lowerBound=(NUMBER | VariableID) ".."
		//	upperBound=(NUMBER | VariableID) "of" type=SimpleType;
		@Override public ParserRule getRule() { return rule; }
		
		//{BooleanType} "boolean" | {WordType} ("word" "[" wordNumber=NUMBER "]") | {UnsignedWordType} ("unsigned" "word" "["
		//uWordNumber=NUMBER "]") | {SignedWordType} ("signed word" "[" signedNumber=NUMBER "]") | {EnumType} "{" val+=Val (","
		//val+=Val)* "}" | {IntervalType} (low=(NUMBER | VariableID) ".." high=(NUMBER | VariableID)) | {ArrayType} "array"
		//lowerBound=(NUMBER | VariableID) ".." upperBound=(NUMBER | VariableID) "of" type=SimpleType
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{BooleanType} "boolean"
		public Group getGroup_0() { return cGroup_0; }
		
		//{BooleanType}
		public Action getBooleanTypeAction_0_0() { return cBooleanTypeAction_0_0; }
		
		//"boolean"
		public Keyword getBooleanKeyword_0_1() { return cBooleanKeyword_0_1; }
		
		//{WordType} ("word" "[" wordNumber=NUMBER "]")
		public Group getGroup_1() { return cGroup_1; }
		
		//{WordType}
		public Action getWordTypeAction_1_0() { return cWordTypeAction_1_0; }
		
		//("word" "[" wordNumber=NUMBER "]")
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//"word"
		public Keyword getWordKeyword_1_1_0() { return cWordKeyword_1_1_0; }
		
		//"["
		public Keyword getLeftSquareBracketKeyword_1_1_1() { return cLeftSquareBracketKeyword_1_1_1; }
		
		//wordNumber=NUMBER
		public Assignment getWordNumberAssignment_1_1_2() { return cWordNumberAssignment_1_1_2; }
		
		//NUMBER
		public RuleCall getWordNumberNUMBERParserRuleCall_1_1_2_0() { return cWordNumberNUMBERParserRuleCall_1_1_2_0; }
		
		//"]"
		public Keyword getRightSquareBracketKeyword_1_1_3() { return cRightSquareBracketKeyword_1_1_3; }
		
		//{UnsignedWordType} ("unsigned" "word" "[" uWordNumber=NUMBER "]")
		public Group getGroup_2() { return cGroup_2; }
		
		//{UnsignedWordType}
		public Action getUnsignedWordTypeAction_2_0() { return cUnsignedWordTypeAction_2_0; }
		
		//("unsigned" "word" "[" uWordNumber=NUMBER "]")
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//"unsigned"
		public Keyword getUnsignedKeyword_2_1_0() { return cUnsignedKeyword_2_1_0; }
		
		//"word"
		public Keyword getWordKeyword_2_1_1() { return cWordKeyword_2_1_1; }
		
		//"["
		public Keyword getLeftSquareBracketKeyword_2_1_2() { return cLeftSquareBracketKeyword_2_1_2; }
		
		//uWordNumber=NUMBER
		public Assignment getUWordNumberAssignment_2_1_3() { return cUWordNumberAssignment_2_1_3; }
		
		//NUMBER
		public RuleCall getUWordNumberNUMBERParserRuleCall_2_1_3_0() { return cUWordNumberNUMBERParserRuleCall_2_1_3_0; }
		
		//"]"
		public Keyword getRightSquareBracketKeyword_2_1_4() { return cRightSquareBracketKeyword_2_1_4; }
		
		//{SignedWordType} ("signed word" "[" signedNumber=NUMBER "]")
		public Group getGroup_3() { return cGroup_3; }
		
		//{SignedWordType}
		public Action getSignedWordTypeAction_3_0() { return cSignedWordTypeAction_3_0; }
		
		//("signed word" "[" signedNumber=NUMBER "]")
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//"signed word"
		public Keyword getSignedWordKeyword_3_1_0() { return cSignedWordKeyword_3_1_0; }
		
		//"["
		public Keyword getLeftSquareBracketKeyword_3_1_1() { return cLeftSquareBracketKeyword_3_1_1; }
		
		//signedNumber=NUMBER
		public Assignment getSignedNumberAssignment_3_1_2() { return cSignedNumberAssignment_3_1_2; }
		
		//NUMBER
		public RuleCall getSignedNumberNUMBERParserRuleCall_3_1_2_0() { return cSignedNumberNUMBERParserRuleCall_3_1_2_0; }
		
		//"]"
		public Keyword getRightSquareBracketKeyword_3_1_3() { return cRightSquareBracketKeyword_3_1_3; }
		
		//{EnumType} "{" val+=Val ("," val+=Val)* "}"
		public Group getGroup_4() { return cGroup_4; }
		
		//{EnumType}
		public Action getEnumTypeAction_4_0() { return cEnumTypeAction_4_0; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_4_1() { return cLeftCurlyBracketKeyword_4_1; }
		
		//val+=Val
		public Assignment getValAssignment_4_2() { return cValAssignment_4_2; }
		
		//Val
		public RuleCall getValValParserRuleCall_4_2_0() { return cValValParserRuleCall_4_2_0; }
		
		//("," val+=Val)*
		public Group getGroup_4_3() { return cGroup_4_3; }
		
		//","
		public Keyword getCommaKeyword_4_3_0() { return cCommaKeyword_4_3_0; }
		
		//val+=Val
		public Assignment getValAssignment_4_3_1() { return cValAssignment_4_3_1; }
		
		//Val
		public RuleCall getValValParserRuleCall_4_3_1_0() { return cValValParserRuleCall_4_3_1_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_4_4() { return cRightCurlyBracketKeyword_4_4; }
		
		//{IntervalType} (low=(NUMBER | VariableID) ".." high=(NUMBER | VariableID))
		public Group getGroup_5() { return cGroup_5; }
		
		//{IntervalType}
		public Action getIntervalTypeAction_5_0() { return cIntervalTypeAction_5_0; }
		
		//(low=(NUMBER | VariableID) ".." high=(NUMBER | VariableID))
		public Group getGroup_5_1() { return cGroup_5_1; }
		
		//low=(NUMBER | VariableID)
		public Assignment getLowAssignment_5_1_0() { return cLowAssignment_5_1_0; }
		
		//(NUMBER | VariableID)
		public Alternatives getLowAlternatives_5_1_0_0() { return cLowAlternatives_5_1_0_0; }
		
		//NUMBER
		public RuleCall getLowNUMBERParserRuleCall_5_1_0_0_0() { return cLowNUMBERParserRuleCall_5_1_0_0_0; }
		
		//VariableID
		public RuleCall getLowVariableIDParserRuleCall_5_1_0_0_1() { return cLowVariableIDParserRuleCall_5_1_0_0_1; }
		
		//".."
		public Keyword getFullStopFullStopKeyword_5_1_1() { return cFullStopFullStopKeyword_5_1_1; }
		
		//high=(NUMBER | VariableID)
		public Assignment getHighAssignment_5_1_2() { return cHighAssignment_5_1_2; }
		
		//(NUMBER | VariableID)
		public Alternatives getHighAlternatives_5_1_2_0() { return cHighAlternatives_5_1_2_0; }
		
		//NUMBER
		public RuleCall getHighNUMBERParserRuleCall_5_1_2_0_0() { return cHighNUMBERParserRuleCall_5_1_2_0_0; }
		
		//VariableID
		public RuleCall getHighVariableIDParserRuleCall_5_1_2_0_1() { return cHighVariableIDParserRuleCall_5_1_2_0_1; }
		
		//{ArrayType} "array" lowerBound=(NUMBER | VariableID) ".." upperBound=(NUMBER | VariableID) "of" type=SimpleType
		public Group getGroup_6() { return cGroup_6; }
		
		//{ArrayType}
		public Action getArrayTypeAction_6_0() { return cArrayTypeAction_6_0; }
		
		//"array"
		public Keyword getArrayKeyword_6_1() { return cArrayKeyword_6_1; }
		
		//lowerBound=(NUMBER | VariableID)
		public Assignment getLowerBoundAssignment_6_2() { return cLowerBoundAssignment_6_2; }
		
		//(NUMBER | VariableID)
		public Alternatives getLowerBoundAlternatives_6_2_0() { return cLowerBoundAlternatives_6_2_0; }
		
		//NUMBER
		public RuleCall getLowerBoundNUMBERParserRuleCall_6_2_0_0() { return cLowerBoundNUMBERParserRuleCall_6_2_0_0; }
		
		//VariableID
		public RuleCall getLowerBoundVariableIDParserRuleCall_6_2_0_1() { return cLowerBoundVariableIDParserRuleCall_6_2_0_1; }
		
		//".."
		public Keyword getFullStopFullStopKeyword_6_3() { return cFullStopFullStopKeyword_6_3; }
		
		//upperBound=(NUMBER | VariableID)
		public Assignment getUpperBoundAssignment_6_4() { return cUpperBoundAssignment_6_4; }
		
		//(NUMBER | VariableID)
		public Alternatives getUpperBoundAlternatives_6_4_0() { return cUpperBoundAlternatives_6_4_0; }
		
		//NUMBER
		public RuleCall getUpperBoundNUMBERParserRuleCall_6_4_0_0() { return cUpperBoundNUMBERParserRuleCall_6_4_0_0; }
		
		//VariableID
		public RuleCall getUpperBoundVariableIDParserRuleCall_6_4_0_1() { return cUpperBoundVariableIDParserRuleCall_6_4_0_1; }
		
		//"of"
		public Keyword getOfKeyword_6_5() { return cOfKeyword_6_5; }
		
		//type=SimpleType
		public Assignment getTypeAssignment_6_6() { return cTypeAssignment_6_6; }
		
		//SimpleType
		public RuleCall getTypeSimpleTypeParserRuleCall_6_6_0() { return cTypeSimpleTypeParserRuleCall_6_6_0; }
	}
	public class ModuleTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.nusmv.language.NuSMV.ModuleType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cAsyncrProcessTypeAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Keyword cProcessKeyword_0_1_0 = (Keyword)cGroup_0_1.eContents().get(0);
		private final Assignment cModuleAssignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final CrossReference cModuleModuleCrossReference_0_1_1_0 = (CrossReference)cModuleAssignment_0_1_1.eContents().get(0);
		private final RuleCall cModuleModuleIDTerminalRuleCall_0_1_1_0_1 = (RuleCall)cModuleModuleCrossReference_0_1_1_0.eContents().get(1);
		private final Group cGroup_0_1_2 = (Group)cGroup_0_1.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_0_1_2_0 = (Keyword)cGroup_0_1_2.eContents().get(0);
		private final Alternatives cAlternatives_0_1_2_1 = (Alternatives)cGroup_0_1_2.eContents().get(1);
		private final Assignment cParamsAssignment_0_1_2_1_0 = (Assignment)cAlternatives_0_1_2_1.eContents().get(0);
		private final RuleCall cParamsSimpleExpressionParserRuleCall_0_1_2_1_0_0 = (RuleCall)cParamsAssignment_0_1_2_1_0.eContents().get(0);
		private final Assignment cParAssignment_0_1_2_1_1 = (Assignment)cAlternatives_0_1_2_1.eContents().get(1);
		private final CrossReference cParVarBodyCrossReference_0_1_2_1_1_0 = (CrossReference)cParAssignment_0_1_2_1_1.eContents().get(0);
		private final RuleCall cParVarBodyIDTerminalRuleCall_0_1_2_1_1_0_1 = (RuleCall)cParVarBodyCrossReference_0_1_2_1_1_0.eContents().get(1);
		private final Group cGroup_0_1_2_2 = (Group)cGroup_0_1_2.eContents().get(2);
		private final Keyword cCommaKeyword_0_1_2_2_0 = (Keyword)cGroup_0_1_2_2.eContents().get(0);
		private final Assignment cParamsAssignment_0_1_2_2_1 = (Assignment)cGroup_0_1_2_2.eContents().get(1);
		private final RuleCall cParamsSimpleExpressionParserRuleCall_0_1_2_2_1_0 = (RuleCall)cParamsAssignment_0_1_2_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_1_2_3 = (Keyword)cGroup_0_1_2.eContents().get(3);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cSyncrProcessTypeAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Assignment cModuleAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final CrossReference cModuleModuleCrossReference_1_1_0_0 = (CrossReference)cModuleAssignment_1_1_0.eContents().get(0);
		private final RuleCall cModuleModuleIDTerminalRuleCall_1_1_0_0_1 = (RuleCall)cModuleModuleCrossReference_1_1_0_0.eContents().get(1);
		private final Group cGroup_1_1_1 = (Group)cGroup_1_1.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_1_1_0 = (Keyword)cGroup_1_1_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1_1_1 = (Alternatives)cGroup_1_1_1.eContents().get(1);
		private final Assignment cParamsAssignment_1_1_1_1_0 = (Assignment)cAlternatives_1_1_1_1.eContents().get(0);
		private final RuleCall cParamsSimpleExpressionParserRuleCall_1_1_1_1_0_0 = (RuleCall)cParamsAssignment_1_1_1_1_0.eContents().get(0);
		private final Assignment cParAssignment_1_1_1_1_1 = (Assignment)cAlternatives_1_1_1_1.eContents().get(1);
		private final CrossReference cParVarBodyCrossReference_1_1_1_1_1_0 = (CrossReference)cParAssignment_1_1_1_1_1.eContents().get(0);
		private final RuleCall cParVarBodyIDTerminalRuleCall_1_1_1_1_1_0_1 = (RuleCall)cParVarBodyCrossReference_1_1_1_1_1_0.eContents().get(1);
		private final Group cGroup_1_1_1_2 = (Group)cGroup_1_1_1.eContents().get(2);
		private final Keyword cCommaKeyword_1_1_1_2_0 = (Keyword)cGroup_1_1_1_2.eContents().get(0);
		private final Assignment cParamsAssignment_1_1_1_2_1 = (Assignment)cGroup_1_1_1_2.eContents().get(1);
		private final RuleCall cParamsSimpleExpressionParserRuleCall_1_1_1_2_1_0 = (RuleCall)cParamsAssignment_1_1_1_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_1_1_3 = (Keyword)cGroup_1_1_1.eContents().get(3);
		
		//ModuleType hidden(WS, SL_COMMENT):
		//	{AsyncrProcessType} ("process" module=[Module] ("(" (params+=SimpleExpression | par=[VarBody]) (","
		//	params+=SimpleExpression)* ")")?) | {SyncrProcessType} (module=[Module] ("(" (params+=SimpleExpression |
		//	par=[VarBody]) (","
		//	params+=SimpleExpression)* ")")?);
		@Override public ParserRule getRule() { return rule; }
		
		//{AsyncrProcessType} ("process" module=[Module] ("(" (params+=SimpleExpression | par=[VarBody]) (","
		//params+=SimpleExpression)* ")")?) | {SyncrProcessType} (module=[Module] ("(" (params+=SimpleExpression | par=[VarBody])
		//("," params+=SimpleExpression)* ")")?)
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{AsyncrProcessType} ("process" module=[Module] ("(" (params+=SimpleExpression | par=[VarBody]) (","
		//params+=SimpleExpression)* ")")?)
		public Group getGroup_0() { return cGroup_0; }
		
		//{AsyncrProcessType}
		public Action getAsyncrProcessTypeAction_0_0() { return cAsyncrProcessTypeAction_0_0; }
		
		//("process" module=[Module] ("(" (params+=SimpleExpression | par=[VarBody]) ("," params+=SimpleExpression)* ")")?)
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//"process"
		public Keyword getProcessKeyword_0_1_0() { return cProcessKeyword_0_1_0; }
		
		//module=[Module]
		public Assignment getModuleAssignment_0_1_1() { return cModuleAssignment_0_1_1; }
		
		//[Module]
		public CrossReference getModuleModuleCrossReference_0_1_1_0() { return cModuleModuleCrossReference_0_1_1_0; }
		
		//ID
		public RuleCall getModuleModuleIDTerminalRuleCall_0_1_1_0_1() { return cModuleModuleIDTerminalRuleCall_0_1_1_0_1; }
		
		//("(" (params+=SimpleExpression | par=[VarBody]) ("," params+=SimpleExpression)* ")")?
		public Group getGroup_0_1_2() { return cGroup_0_1_2; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_0_1_2_0() { return cLeftParenthesisKeyword_0_1_2_0; }
		
		//(params+=SimpleExpression | par=[VarBody])
		public Alternatives getAlternatives_0_1_2_1() { return cAlternatives_0_1_2_1; }
		
		//params+=SimpleExpression
		public Assignment getParamsAssignment_0_1_2_1_0() { return cParamsAssignment_0_1_2_1_0; }
		
		//SimpleExpression
		public RuleCall getParamsSimpleExpressionParserRuleCall_0_1_2_1_0_0() { return cParamsSimpleExpressionParserRuleCall_0_1_2_1_0_0; }
		
		//par=[VarBody]
		public Assignment getParAssignment_0_1_2_1_1() { return cParAssignment_0_1_2_1_1; }
		
		//[VarBody]
		public CrossReference getParVarBodyCrossReference_0_1_2_1_1_0() { return cParVarBodyCrossReference_0_1_2_1_1_0; }
		
		//ID
		public RuleCall getParVarBodyIDTerminalRuleCall_0_1_2_1_1_0_1() { return cParVarBodyIDTerminalRuleCall_0_1_2_1_1_0_1; }
		
		//("," params+=SimpleExpression)*
		public Group getGroup_0_1_2_2() { return cGroup_0_1_2_2; }
		
		//","
		public Keyword getCommaKeyword_0_1_2_2_0() { return cCommaKeyword_0_1_2_2_0; }
		
		//params+=SimpleExpression
		public Assignment getParamsAssignment_0_1_2_2_1() { return cParamsAssignment_0_1_2_2_1; }
		
		//SimpleExpression
		public RuleCall getParamsSimpleExpressionParserRuleCall_0_1_2_2_1_0() { return cParamsSimpleExpressionParserRuleCall_0_1_2_2_1_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_0_1_2_3() { return cRightParenthesisKeyword_0_1_2_3; }
		
		//{SyncrProcessType} (module=[Module] ("(" (params+=SimpleExpression | par=[VarBody]) ("," params+=SimpleExpression)*
		//")")?)
		public Group getGroup_1() { return cGroup_1; }
		
		//{SyncrProcessType}
		public Action getSyncrProcessTypeAction_1_0() { return cSyncrProcessTypeAction_1_0; }
		
		//(module=[Module] ("(" (params+=SimpleExpression | par=[VarBody]) ("," params+=SimpleExpression)* ")")?)
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//module=[Module]
		public Assignment getModuleAssignment_1_1_0() { return cModuleAssignment_1_1_0; }
		
		//[Module]
		public CrossReference getModuleModuleCrossReference_1_1_0_0() { return cModuleModuleCrossReference_1_1_0_0; }
		
		//ID
		public RuleCall getModuleModuleIDTerminalRuleCall_1_1_0_0_1() { return cModuleModuleIDTerminalRuleCall_1_1_0_0_1; }
		
		//("(" (params+=SimpleExpression | par=[VarBody]) ("," params+=SimpleExpression)* ")")?
		public Group getGroup_1_1_1() { return cGroup_1_1_1; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_1_1_1_0() { return cLeftParenthesisKeyword_1_1_1_0; }
		
		//(params+=SimpleExpression | par=[VarBody])
		public Alternatives getAlternatives_1_1_1_1() { return cAlternatives_1_1_1_1; }
		
		//params+=SimpleExpression
		public Assignment getParamsAssignment_1_1_1_1_0() { return cParamsAssignment_1_1_1_1_0; }
		
		//SimpleExpression
		public RuleCall getParamsSimpleExpressionParserRuleCall_1_1_1_1_0_0() { return cParamsSimpleExpressionParserRuleCall_1_1_1_1_0_0; }
		
		//par=[VarBody]
		public Assignment getParAssignment_1_1_1_1_1() { return cParAssignment_1_1_1_1_1; }
		
		//[VarBody]
		public CrossReference getParVarBodyCrossReference_1_1_1_1_1_0() { return cParVarBodyCrossReference_1_1_1_1_1_0; }
		
		//ID
		public RuleCall getParVarBodyIDTerminalRuleCall_1_1_1_1_1_0_1() { return cParVarBodyIDTerminalRuleCall_1_1_1_1_1_0_1; }
		
		//("," params+=SimpleExpression)*
		public Group getGroup_1_1_1_2() { return cGroup_1_1_1_2; }
		
		//","
		public Keyword getCommaKeyword_1_1_1_2_0() { return cCommaKeyword_1_1_1_2_0; }
		
		//params+=SimpleExpression
		public Assignment getParamsAssignment_1_1_1_2_1() { return cParamsAssignment_1_1_1_2_1; }
		
		//SimpleExpression
		public RuleCall getParamsSimpleExpressionParserRuleCall_1_1_1_2_1_0() { return cParamsSimpleExpressionParserRuleCall_1_1_1_2_1_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_1_1_1_3() { return cRightParenthesisKeyword_1_1_1_3; }
	}
	public class ValElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.nusmv.language.NuSMV.Val");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cValAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_1_0_0 = (RuleCall)cNameAssignment_1_0.eContents().get(0);
		private final Assignment cNumAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cNumNUMBERParserRuleCall_1_1_0 = (RuleCall)cNumAssignment_1_1.eContents().get(0);
		private final Keyword cTRUEKeyword_1_2 = (Keyword)cAlternatives_1.eContents().get(2);
		private final Keyword cFALSEKeyword_1_3 = (Keyword)cAlternatives_1.eContents().get(3);
		
		//// value element of enumerative or numeric value or boolean constant
		//Val hidden(WS, SL_COMMENT):
		//	{Val} (name=ID | num=NUMBER | "TRUE" | "FALSE");
		@Override public ParserRule getRule() { return rule; }
		
		//{Val} (name=ID | num=NUMBER | "TRUE" | "FALSE")
		public Group getGroup() { return cGroup; }
		
		//{Val}
		public Action getValAction_0() { return cValAction_0; }
		
		//(name=ID | num=NUMBER | "TRUE" | "FALSE")
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//name=ID
		public Assignment getNameAssignment_1_0() { return cNameAssignment_1_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0_0() { return cNameIDTerminalRuleCall_1_0_0; }
		
		//num=NUMBER
		public Assignment getNumAssignment_1_1() { return cNumAssignment_1_1; }
		
		//NUMBER
		public RuleCall getNumNUMBERParserRuleCall_1_1_0() { return cNumNUMBERParserRuleCall_1_1_0; }
		
		//"TRUE"
		public Keyword getTRUEKeyword_1_2() { return cTRUEKeyword_1_2; }
		
		//"FALSE"
		public Keyword getFALSEKeyword_1_3() { return cFALSEKeyword_1_3; }
	}
	public class NextExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.nusmv.language.NuSMV.NextExpression");
		private final Assignment cSimpleExpressionAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cSimpleExpressionSimpleExpressionParserRuleCall_0 = (RuleCall)cSimpleExpressionAssignment.eContents().get(0);
		
		//NextExpression hidden(WS, SL_COMMENT):
		//	simpleExpression=SimpleExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//simpleExpression=SimpleExpression
		public Assignment getSimpleExpressionAssignment() { return cSimpleExpressionAssignment; }
		
		//SimpleExpression
		public RuleCall getSimpleExpressionSimpleExpressionParserRuleCall_0() { return cSimpleExpressionSimpleExpressionParserRuleCall_0; }
	}
	public class SimpleExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.nusmv.language.NuSMV.SimpleExpression");
		private final RuleCall cLTLbinExpressionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//SimpleExpression:
		//	LTLbinExpression;
		@Override public ParserRule getRule() { return rule; }
		
		////ImpliesExpression;
		//LTLbinExpression
		public RuleCall getLTLbinExpressionParserRuleCall() { return cLTLbinExpressionParserRuleCall; }
	}
	public class LTLbinExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.nusmv.language.NuSMV.LTLbinExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cImpliesExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cBinaryExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperatorLTLbinoperatorsEnumRuleCall_1_1_0 = (RuleCall)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightImpliesExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//LTLbinExpression SimpleExpression:
		//	=> ImpliesExpression ({BinaryExpression.left=current} operator=LTLbinoperators right=ImpliesExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//=> ImpliesExpression ({BinaryExpression.left=current} operator=LTLbinoperators right=ImpliesExpression)*
		public Group getGroup() { return cGroup; }
		
		//=> ImpliesExpression
		public RuleCall getImpliesExpressionParserRuleCall_0() { return cImpliesExpressionParserRuleCall_0; }
		
		//({BinaryExpression.left=current} operator=LTLbinoperators right=ImpliesExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{BinaryExpression.left=current}
		public Action getBinaryExpressionLeftAction_1_0() { return cBinaryExpressionLeftAction_1_0; }
		
		//operator=LTLbinoperators
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//LTLbinoperators
		public RuleCall getOperatorLTLbinoperatorsEnumRuleCall_1_1_0() { return cOperatorLTLbinoperatorsEnumRuleCall_1_1_0; }
		
		//right=ImpliesExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//ImpliesExpression
		public RuleCall getRightImpliesExpressionParserRuleCall_1_2_0() { return cRightImpliesExpressionParserRuleCall_1_2_0; }
	}
	public class ImpliesExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.nusmv.language.NuSMV.ImpliesExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIffExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cBinaryExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperatorImpliesoperatorEnumRuleCall_1_1_0 = (RuleCall)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightIffExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//ImpliesExpression SimpleExpression:
		//	=> IffExpression ({BinaryExpression.left=current} operator=impliesoperator right=IffExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//=> IffExpression ({BinaryExpression.left=current} operator=impliesoperator right=IffExpression)*
		public Group getGroup() { return cGroup; }
		
		//=> IffExpression
		public RuleCall getIffExpressionParserRuleCall_0() { return cIffExpressionParserRuleCall_0; }
		
		//({BinaryExpression.left=current} operator=impliesoperator right=IffExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{BinaryExpression.left=current}
		public Action getBinaryExpressionLeftAction_1_0() { return cBinaryExpressionLeftAction_1_0; }
		
		//operator=impliesoperator
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//impliesoperator
		public RuleCall getOperatorImpliesoperatorEnumRuleCall_1_1_0() { return cOperatorImpliesoperatorEnumRuleCall_1_1_0; }
		
		//right=IffExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//IffExpression
		public RuleCall getRightIffExpressionParserRuleCall_1_2_0() { return cRightIffExpressionParserRuleCall_1_2_0; }
	}
	public class IffExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.nusmv.language.NuSMV.IffExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cOrExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cBinaryExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperatorIffoperatorEnumRuleCall_1_1_0 = (RuleCall)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightOrExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//IffExpression SimpleExpression: //left=IfThenElseExpression ({BinaryExpression.left=current} operator="<->" right = IfThenElseExpression)*;
		//	=> OrExpression ({BinaryExpression.left=current} operator=iffoperator right=OrExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		////left=IfThenElseExpression ({BinaryExpression.left=current} operator="<->" right = IfThenElseExpression)*;
		//=> OrExpression ({BinaryExpression.left=current} operator=iffoperator right=OrExpression)*
		public Group getGroup() { return cGroup; }
		
		////left=IfThenElseExpression ({BinaryExpression.left=current} operator="<->" right = IfThenElseExpression)*;
		//=> OrExpression
		public RuleCall getOrExpressionParserRuleCall_0() { return cOrExpressionParserRuleCall_0; }
		
		//({BinaryExpression.left=current} operator=iffoperator right=OrExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{BinaryExpression.left=current}
		public Action getBinaryExpressionLeftAction_1_0() { return cBinaryExpressionLeftAction_1_0; }
		
		//operator=iffoperator
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//iffoperator
		public RuleCall getOperatorIffoperatorEnumRuleCall_1_1_0() { return cOperatorIffoperatorEnumRuleCall_1_1_0; }
		
		//right=OrExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//OrExpression
		public RuleCall getRightOrExpressionParserRuleCall_1_2_0() { return cRightOrExpressionParserRuleCall_1_2_0; }
	}
	public class OrExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.nusmv.language.NuSMV.OrExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAndExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cBinaryExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperatorOroperatorsEnumRuleCall_1_1_0 = (RuleCall)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightAndExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		////IfThenElseExpression returns TernaryExpression:
		////	cond=OrExpression "?" then=OrExpression ":" else=OrExpression;
		////fine PA
		//OrExpression SimpleExpression:
		//	=> AndExpression ({BinaryExpression.left=current} operator=oroperators right=AndExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//=> AndExpression ({BinaryExpression.left=current} operator=oroperators right=AndExpression)*
		public Group getGroup() { return cGroup; }
		
		//=> AndExpression
		public RuleCall getAndExpressionParserRuleCall_0() { return cAndExpressionParserRuleCall_0; }
		
		//({BinaryExpression.left=current} operator=oroperators right=AndExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{BinaryExpression.left=current}
		public Action getBinaryExpressionLeftAction_1_0() { return cBinaryExpressionLeftAction_1_0; }
		
		//operator=oroperators
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//oroperators
		public RuleCall getOperatorOroperatorsEnumRuleCall_1_1_0() { return cOperatorOroperatorsEnumRuleCall_1_1_0; }
		
		//right=AndExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//AndExpression
		public RuleCall getRightAndExpressionParserRuleCall_1_2_0() { return cRightAndExpressionParserRuleCall_1_2_0; }
	}
	public class AndExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.nusmv.language.NuSMV.AndExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cComparisonExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cBinaryExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperatorAndoperatorEnumRuleCall_1_1_0 = (RuleCall)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightComparisonExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		////left=AndExpression (operator=('|'|'xor'|'xnor') right = AndExpression)?;
		//AndExpression SimpleExpression:
		//	=> ComparisonExpression ({BinaryExpression.left=current} operator=andoperator right=ComparisonExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//=> ComparisonExpression ({BinaryExpression.left=current} operator=andoperator right=ComparisonExpression)*
		public Group getGroup() { return cGroup; }
		
		//=> ComparisonExpression
		public RuleCall getComparisonExpressionParserRuleCall_0() { return cComparisonExpressionParserRuleCall_0; }
		
		//({BinaryExpression.left=current} operator=andoperator right=ComparisonExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{BinaryExpression.left=current}
		public Action getBinaryExpressionLeftAction_1_0() { return cBinaryExpressionLeftAction_1_0; }
		
		//operator=andoperator
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//andoperator
		public RuleCall getOperatorAndoperatorEnumRuleCall_1_1_0() { return cOperatorAndoperatorEnumRuleCall_1_1_0; }
		
		//right=ComparisonExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//ComparisonExpression
		public RuleCall getRightComparisonExpressionParserRuleCall_1_2_0() { return cRightComparisonExpressionParserRuleCall_1_2_0; }
	}
	public class ComparisonExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.nusmv.language.NuSMV.ComparisonExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cInExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cBinaryExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperatorComparisonoperatorsEnumRuleCall_1_1_0 = (RuleCall)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightInExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		////left=ComparisonExpression (operator='&' right=ComparisonExpression)?;
		//ComparisonExpression SimpleExpression: //first=ATOM (operator=('='|'!='|'<'|'>'|'<='|'>=') second=ATOM)?;
		////left=ATOM ({BinaryExpression.left = current} operator='&' right=BasicExpression)*;
		//	=> InExpression ({BinaryExpression.left=current} operator=comparisonoperators right=InExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		////first=ATOM (operator=('='|'!='|'<'|'>'|'<='|'>=') second=ATOM)?;
		////left=ATOM ({BinaryExpression.left = current} operator='&' right=BasicExpression)*;
		//=> InExpression ({BinaryExpression.left=current} operator=comparisonoperators right=InExpression)*
		public Group getGroup() { return cGroup; }
		
		////first=ATOM (operator=('='|'!='|'<'|'>'|'<='|'>=') second=ATOM)?;
		////left=ATOM ({BinaryExpression.left = current} operator='&' right=BasicExpression)*;
		//=> InExpression
		public RuleCall getInExpressionParserRuleCall_0() { return cInExpressionParserRuleCall_0; }
		
		//({BinaryExpression.left=current} operator=comparisonoperators right=InExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{BinaryExpression.left=current}
		public Action getBinaryExpressionLeftAction_1_0() { return cBinaryExpressionLeftAction_1_0; }
		
		//operator=comparisonoperators
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//comparisonoperators
		public RuleCall getOperatorComparisonoperatorsEnumRuleCall_1_1_0() { return cOperatorComparisonoperatorsEnumRuleCall_1_1_0; }
		
		//right=InExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//InExpression
		public RuleCall getRightInExpressionParserRuleCall_1_2_0() { return cRightInExpressionParserRuleCall_1_2_0; }
	}
	public class InExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.nusmv.language.NuSMV.InExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUnionExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cBinaryExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cOpInKeyword_1_1_0 = (Keyword)cOpAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightUnionExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		////ComparisonExpression returns BinaryExpression:
		////	InExpression ({BinaryExpression.left = current} operator=('='|'!='|'<'|'>'|'<='|'>=') right=NotExpression)*;
		//InExpression SimpleExpression:
		//	=> UnionExpression ({BinaryExpression.left=current} op="in" right=UnionExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//=> UnionExpression ({BinaryExpression.left=current} op="in" right=UnionExpression)*
		public Group getGroup() { return cGroup; }
		
		//=> UnionExpression
		public RuleCall getUnionExpressionParserRuleCall_0() { return cUnionExpressionParserRuleCall_0; }
		
		//({BinaryExpression.left=current} op="in" right=UnionExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{BinaryExpression.left=current}
		public Action getBinaryExpressionLeftAction_1_0() { return cBinaryExpressionLeftAction_1_0; }
		
		//op="in"
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//"in"
		public Keyword getOpInKeyword_1_1_0() { return cOpInKeyword_1_1_0; }
		
		//right=UnionExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//UnionExpression
		public RuleCall getRightUnionExpressionParserRuleCall_1_2_0() { return cRightUnionExpressionParserRuleCall_1_2_0; }
	}
	public class UnionExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.nusmv.language.NuSMV.UnionExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cRightShiftParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cBinaryExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cOpUnionKeyword_1_1_0 = (Keyword)cOpAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightRightShiftParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//UnionExpression SimpleExpression:
		//	=> RightShift ({BinaryExpression.left=current} op="union" right=RightShift)*;
		@Override public ParserRule getRule() { return rule; }
		
		//=> RightShift ({BinaryExpression.left=current} op="union" right=RightShift)*
		public Group getGroup() { return cGroup; }
		
		//=> RightShift
		public RuleCall getRightShiftParserRuleCall_0() { return cRightShiftParserRuleCall_0; }
		
		//({BinaryExpression.left=current} op="union" right=RightShift)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{BinaryExpression.left=current}
		public Action getBinaryExpressionLeftAction_1_0() { return cBinaryExpressionLeftAction_1_0; }
		
		//op="union"
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//"union"
		public Keyword getOpUnionKeyword_1_1_0() { return cOpUnionKeyword_1_1_0; }
		
		//right=RightShift
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//RightShift
		public RuleCall getRightRightShiftParserRuleCall_1_2_0() { return cRightRightShiftParserRuleCall_1_2_0; }
	}
	public class RightShiftElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.nusmv.language.NuSMV.RightShift");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cLeftShiftParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cBinaryExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cOpGreaterThanSignGreaterThanSignKeyword_1_1_0 = (Keyword)cOpAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightLeftShiftParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//RightShift SimpleExpression:
		//	=> LeftShift ({BinaryExpression.left=current} op=">>" right=LeftShift)*;
		@Override public ParserRule getRule() { return rule; }
		
		//=> LeftShift ({BinaryExpression.left=current} op=">>" right=LeftShift)*
		public Group getGroup() { return cGroup; }
		
		//=> LeftShift
		public RuleCall getLeftShiftParserRuleCall_0() { return cLeftShiftParserRuleCall_0; }
		
		//({BinaryExpression.left=current} op=">>" right=LeftShift)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{BinaryExpression.left=current}
		public Action getBinaryExpressionLeftAction_1_0() { return cBinaryExpressionLeftAction_1_0; }
		
		//op=">>"
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//">>"
		public Keyword getOpGreaterThanSignGreaterThanSignKeyword_1_1_0() { return cOpGreaterThanSignGreaterThanSignKeyword_1_1_0; }
		
		//right=LeftShift
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//LeftShift
		public RuleCall getRightLeftShiftParserRuleCall_1_2_0() { return cRightLeftShiftParserRuleCall_1_2_0; }
	}
	public class LeftShiftElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.nusmv.language.NuSMV.LeftShift");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMinusParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cBinaryExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cOpLessThanSignLessThanSignKeyword_1_1_0 = (Keyword)cOpAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightMinusParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//LeftShift SimpleExpression:
		//	=> Minus ({BinaryExpression.left=current} op="<<" right=Minus)*;
		@Override public ParserRule getRule() { return rule; }
		
		//=> Minus ({BinaryExpression.left=current} op="<<" right=Minus)*
		public Group getGroup() { return cGroup; }
		
		//=> Minus
		public RuleCall getMinusParserRuleCall_0() { return cMinusParserRuleCall_0; }
		
		//({BinaryExpression.left=current} op="<<" right=Minus)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{BinaryExpression.left=current}
		public Action getBinaryExpressionLeftAction_1_0() { return cBinaryExpressionLeftAction_1_0; }
		
		//op="<<"
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//"<<"
		public Keyword getOpLessThanSignLessThanSignKeyword_1_1_0() { return cOpLessThanSignLessThanSignKeyword_1_1_0; }
		
		//right=Minus
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Minus
		public RuleCall getRightMinusParserRuleCall_1_2_0() { return cRightMinusParserRuleCall_1_2_0; }
	}
	public class MinusElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.nusmv.language.NuSMV.Minus");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPlusParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cBinaryExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cOpHyphenMinusKeyword_1_1_0 = (Keyword)cOpAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightPlusParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Minus SimpleExpression:
		//	=> Plus ({BinaryExpression.left=current} op="-" right=Plus)*;
		@Override public ParserRule getRule() { return rule; }
		
		//=> Plus ({BinaryExpression.left=current} op="-" right=Plus)*
		public Group getGroup() { return cGroup; }
		
		//=> Plus
		public RuleCall getPlusParserRuleCall_0() { return cPlusParserRuleCall_0; }
		
		//({BinaryExpression.left=current} op="-" right=Plus)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{BinaryExpression.left=current}
		public Action getBinaryExpressionLeftAction_1_0() { return cBinaryExpressionLeftAction_1_0; }
		
		//op="-"
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//"-"
		public Keyword getOpHyphenMinusKeyword_1_1_0() { return cOpHyphenMinusKeyword_1_1_0; }
		
		//right=Plus
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Plus
		public RuleCall getRightPlusParserRuleCall_1_2_0() { return cRightPlusParserRuleCall_1_2_0; }
	}
	public class PlusElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.nusmv.language.NuSMV.Plus");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMultParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cBinaryExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cOpPlusSignKeyword_1_1_0 = (Keyword)cOpAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightMultParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Plus SimpleExpression:
		//	=> Mult ({BinaryExpression.left=current} op="+" right=Mult)*;
		@Override public ParserRule getRule() { return rule; }
		
		//=> Mult ({BinaryExpression.left=current} op="+" right=Mult)*
		public Group getGroup() { return cGroup; }
		
		//=> Mult
		public RuleCall getMultParserRuleCall_0() { return cMultParserRuleCall_0; }
		
		//({BinaryExpression.left=current} op="+" right=Mult)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{BinaryExpression.left=current}
		public Action getBinaryExpressionLeftAction_1_0() { return cBinaryExpressionLeftAction_1_0; }
		
		//op="+"
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//"+"
		public Keyword getOpPlusSignKeyword_1_1_0() { return cOpPlusSignKeyword_1_1_0; }
		
		//right=Mult
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Mult
		public RuleCall getRightMultParserRuleCall_1_2_0() { return cRightMultParserRuleCall_1_2_0; }
	}
	public class MultElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.nusmv.language.NuSMV.Mult");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cModParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cBinaryExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cOpAsteriskKeyword_1_1_0 = (Keyword)cOpAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightModParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Mult SimpleExpression:
		//	=> Mod ({BinaryExpression.left=current} op="*" right=Mod)*;
		@Override public ParserRule getRule() { return rule; }
		
		//=> Mod ({BinaryExpression.left=current} op="*" right=Mod)*
		public Group getGroup() { return cGroup; }
		
		//=> Mod
		public RuleCall getModParserRuleCall_0() { return cModParserRuleCall_0; }
		
		//({BinaryExpression.left=current} op="*" right=Mod)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{BinaryExpression.left=current}
		public Action getBinaryExpressionLeftAction_1_0() { return cBinaryExpressionLeftAction_1_0; }
		
		//op="*"
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//"*"
		public Keyword getOpAsteriskKeyword_1_1_0() { return cOpAsteriskKeyword_1_1_0; }
		
		//right=Mod
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Mod
		public RuleCall getRightModParserRuleCall_1_2_0() { return cRightModParserRuleCall_1_2_0; }
	}
	public class ModElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.nusmv.language.NuSMV.Mod");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cWordConcatenationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cBinaryExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cOpModKeyword_1_1_0 = (Keyword)cOpAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightWordConcatenationParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Mod SimpleExpression:
		//	=> WordConcatenation ({BinaryExpression.left=current} op="mod" right=WordConcatenation)*;
		@Override public ParserRule getRule() { return rule; }
		
		//=> WordConcatenation ({BinaryExpression.left=current} op="mod" right=WordConcatenation)*
		public Group getGroup() { return cGroup; }
		
		//=> WordConcatenation
		public RuleCall getWordConcatenationParserRuleCall_0() { return cWordConcatenationParserRuleCall_0; }
		
		//({BinaryExpression.left=current} op="mod" right=WordConcatenation)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{BinaryExpression.left=current}
		public Action getBinaryExpressionLeftAction_1_0() { return cBinaryExpressionLeftAction_1_0; }
		
		//op="mod"
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//"mod"
		public Keyword getOpModKeyword_1_1_0() { return cOpModKeyword_1_1_0; }
		
		//right=WordConcatenation
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//WordConcatenation
		public RuleCall getRightWordConcatenationParserRuleCall_1_2_0() { return cRightWordConcatenationParserRuleCall_1_2_0; }
	}
	public class WordConcatenationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.nusmv.language.NuSMV.WordConcatenation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cDivParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cBinaryExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cOpColonColonKeyword_1_1_0 = (Keyword)cOpAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightDivParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//WordConcatenation SimpleExpression: //left=LTLbinExpression ({BinaryExpression.left = current} operator="::" right=LTLbinExpression)*;
		//	=> Div ({BinaryExpression.left=current} op="::" right=Div)*;
		@Override public ParserRule getRule() { return rule; }
		
		////left=LTLbinExpression ({BinaryExpression.left = current} operator="::" right=LTLbinExpression)*;
		//=> Div ({BinaryExpression.left=current} op="::" right=Div)*
		public Group getGroup() { return cGroup; }
		
		////left=LTLbinExpression ({BinaryExpression.left = current} operator="::" right=LTLbinExpression)*;
		//=> Div
		public RuleCall getDivParserRuleCall_0() { return cDivParserRuleCall_0; }
		
		//({BinaryExpression.left=current} op="::" right=Div)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{BinaryExpression.left=current}
		public Action getBinaryExpressionLeftAction_1_0() { return cBinaryExpressionLeftAction_1_0; }
		
		//op="::"
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//"::"
		public Keyword getOpColonColonKeyword_1_1_0() { return cOpColonColonKeyword_1_1_0; }
		
		//right=Div
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Div
		public RuleCall getRightDivParserRuleCall_1_2_0() { return cRightDivParserRuleCall_1_2_0; }
	}
	public class DivElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.nusmv.language.NuSMV.Div");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cNotOrTerminalSimpleExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cBinaryExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cOpSolidusKeyword_1_1_0 = (Keyword)cOpAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightNotOrTerminalSimpleExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Div SimpleExpression:
		//	=> NotOrTerminalSimpleExpression ({BinaryExpression.left=current} op='/' right=NotOrTerminalSimpleExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//=> NotOrTerminalSimpleExpression ({BinaryExpression.left=current} op='/' right=NotOrTerminalSimpleExpression)*
		public Group getGroup() { return cGroup; }
		
		//=> NotOrTerminalSimpleExpression
		public RuleCall getNotOrTerminalSimpleExpressionParserRuleCall_0() { return cNotOrTerminalSimpleExpressionParserRuleCall_0; }
		
		//({BinaryExpression.left=current} op='/' right=NotOrTerminalSimpleExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{BinaryExpression.left=current}
		public Action getBinaryExpressionLeftAction_1_0() { return cBinaryExpressionLeftAction_1_0; }
		
		//op='/'
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//'/'
		public Keyword getOpSolidusKeyword_1_1_0() { return cOpSolidusKeyword_1_1_0; }
		
		//right=NotOrTerminalSimpleExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//NotOrTerminalSimpleExpression
		public RuleCall getRightNotOrTerminalSimpleExpressionParserRuleCall_1_2_0() { return cRightNotOrTerminalSimpleExpressionParserRuleCall_1_2_0; }
	}
	public class NotOrTerminalSimpleExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.nusmv.language.NuSMV.NotOrTerminalSimpleExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cNotAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cExclamationMarkKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cExpAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cExpTerminalSimpleExpressionParserRuleCall_0_2_0 = (RuleCall)cExpAssignment_0_2.eContents().get(0);
		private final RuleCall cTerminalSimpleExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		////TerminalSimpleExpression ({Div.left=current} op='/' right=SimpleExpression)*;
		////first=TerminalSimpleExpression ( operator="/" second=SimpleExpression)?;
		//NotOrTerminalSimpleExpression SimpleExpression:
		//	{Not} '!' exp=TerminalSimpleExpression | TerminalSimpleExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//{Not} '!' exp=TerminalSimpleExpression | TerminalSimpleExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{Not} '!' exp=TerminalSimpleExpression
		public Group getGroup_0() { return cGroup_0; }
		
		//{Not}
		public Action getNotAction_0_0() { return cNotAction_0_0; }
		
		//'!'
		public Keyword getExclamationMarkKeyword_0_1() { return cExclamationMarkKeyword_0_1; }
		
		//exp=TerminalSimpleExpression
		public Assignment getExpAssignment_0_2() { return cExpAssignment_0_2; }
		
		//TerminalSimpleExpression
		public RuleCall getExpTerminalSimpleExpressionParserRuleCall_0_2_0() { return cExpTerminalSimpleExpressionParserRuleCall_0_2_0; }
		
		//TerminalSimpleExpression
		public RuleCall getTerminalSimpleExpressionParserRuleCall_1() { return cTerminalSimpleExpressionParserRuleCall_1; }
	}
	public class TerminalSimpleExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.nusmv.language.NuSMV.TerminalSimpleExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cParsExpressionAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cIsNextAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final Keyword cIsNextNextKeyword_0_1_0 = (Keyword)cIsNextAssignment_0_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cSimpleExpressionAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cSimpleExpressionSimpleExpressionParserRuleCall_0_3_0 = (RuleCall)cSimpleExpressionAssignment_0_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_4 = (Keyword)cGroup_0.eContents().get(4);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cUnaryExpressionAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Assignment cOperatorAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final Alternatives cOperatorAlternatives_1_1_0_0 = (Alternatives)cOperatorAssignment_1_1_0.eContents().get(0);
		private final Keyword cOperatorHyphenMinusKeyword_1_1_0_0_0 = (Keyword)cOperatorAlternatives_1_1_0_0.eContents().get(0);
		private final Keyword cOperatorPlusSignKeyword_1_1_0_0_1 = (Keyword)cOperatorAlternatives_1_1_0_0.eContents().get(1);
		private final Keyword cOperatorEGKeyword_1_1_0_0_2 = (Keyword)cOperatorAlternatives_1_1_0_0.eContents().get(2);
		private final Keyword cOperatorEXKeyword_1_1_0_0_3 = (Keyword)cOperatorAlternatives_1_1_0_0.eContents().get(3);
		private final Keyword cOperatorEFKeyword_1_1_0_0_4 = (Keyword)cOperatorAlternatives_1_1_0_0.eContents().get(4);
		private final Keyword cOperatorAGKeyword_1_1_0_0_5 = (Keyword)cOperatorAlternatives_1_1_0_0.eContents().get(5);
		private final Keyword cOperatorAXKeyword_1_1_0_0_6 = (Keyword)cOperatorAlternatives_1_1_0_0.eContents().get(6);
		private final Keyword cOperatorAFKeyword_1_1_0_0_7 = (Keyword)cOperatorAlternatives_1_1_0_0.eContents().get(7);
		private final Keyword cOperatorXKeyword_1_1_0_0_8 = (Keyword)cOperatorAlternatives_1_1_0_0.eContents().get(8);
		private final Keyword cOperatorGKeyword_1_1_0_0_9 = (Keyword)cOperatorAlternatives_1_1_0_0.eContents().get(9);
		private final Keyword cOperatorFKeyword_1_1_0_0_10 = (Keyword)cOperatorAlternatives_1_1_0_0.eContents().get(10);
		private final Keyword cOperatorYKeyword_1_1_0_0_11 = (Keyword)cOperatorAlternatives_1_1_0_0.eContents().get(11);
		private final Keyword cOperatorZKeyword_1_1_0_0_12 = (Keyword)cOperatorAlternatives_1_1_0_0.eContents().get(12);
		private final Keyword cOperatorHKeyword_1_1_0_0_13 = (Keyword)cOperatorAlternatives_1_1_0_0.eContents().get(13);
		private final Keyword cOperatorOKeyword_1_1_0_0_14 = (Keyword)cOperatorAlternatives_1_1_0_0.eContents().get(14);
		private final Assignment cSimpleExpressionAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cSimpleExpressionSimpleExpressionParserRuleCall_1_1_1_0 = (RuleCall)cSimpleExpressionAssignment_1_1_1.eContents().get(0);
		private final RuleCall cCaseSimpleExpressionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cValueExpressionAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Assignment cValueAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cValueVariableIDParserRuleCall_3_1_0 = (RuleCall)cValueAssignment_3_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Keyword cLeftSquareBracketKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cArrayAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final RuleCall cArrayNUMBERParserRuleCall_3_2_1_0 = (RuleCall)cArrayAssignment_3_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3_2_2 = (Keyword)cGroup_3_2.eContents().get(2);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cVarAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Assignment cValueAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final CrossReference cValueVarBodyCrossReference_4_1_0 = (CrossReference)cValueAssignment_4_1.eContents().get(0);
		private final RuleCall cValueVarBodyIDTerminalRuleCall_4_1_0_1 = (RuleCall)cValueVarBodyCrossReference_4_1_0.eContents().get(1);
		private final Alternatives cAlternatives_4_2 = (Alternatives)cGroup_4.eContents().get(2);
		private final Group cGroup_4_2_0 = (Group)cAlternatives_4_2.eContents().get(0);
		private final Keyword cFullStopKeyword_4_2_0_0 = (Keyword)cGroup_4_2_0.eContents().get(0);
		private final Assignment cDottedAssignment_4_2_0_1 = (Assignment)cGroup_4_2_0.eContents().get(1);
		private final RuleCall cDottedTerminalSimpleExpressionParserRuleCall_4_2_0_1_0 = (RuleCall)cDottedAssignment_4_2_0_1.eContents().get(0);
		private final Group cGroup_4_2_1 = (Group)cAlternatives_4_2.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_4_2_1_0 = (Keyword)cGroup_4_2_1.eContents().get(0);
		private final Assignment cArrayAssignment_4_2_1_1 = (Assignment)cGroup_4_2_1.eContents().get(1);
		private final RuleCall cArrayNUMBERParserRuleCall_4_2_1_1_0 = (RuleCall)cArrayAssignment_4_2_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4_2_1_2 = (Keyword)cGroup_4_2_1.eContents().get(2);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Action cSetElementExpressionAction_5_0 = (Action)cGroup_5.eContents().get(0);
		private final Assignment cValAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final CrossReference cValValCrossReference_5_1_0 = (CrossReference)cValAssignment_5_1.eContents().get(0);
		private final RuleCall cValValIDTerminalRuleCall_5_1_0_1 = (RuleCall)cValValCrossReference_5_1_0.eContents().get(1);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Action cSetValueParameterAction_6_0 = (Action)cGroup_6.eContents().get(0);
		private final Assignment cValparamAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final CrossReference cValparamFormalParameterCrossReference_6_1_0 = (CrossReference)cValparamAssignment_6_1.eContents().get(0);
		private final RuleCall cValparamFormalParameterIDTerminalRuleCall_6_1_0_1 = (RuleCall)cValparamFormalParameterCrossReference_6_1_0.eContents().get(1);
		private final Group cGroup_7 = (Group)cAlternatives.eContents().get(7);
		private final Action cValueExpressionAction_7_0 = (Action)cGroup_7.eContents().get(0);
		private final Assignment cValueAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cValueIDTerminalRuleCall_7_1_0 = (RuleCall)cValueAssignment_7_1.eContents().get(0);
		private final Group cGroup_8 = (Group)cAlternatives.eContents().get(8);
		private final Action cValueExpressionAction_8_0 = (Action)cGroup_8.eContents().get(0);
		private final Assignment cValueAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final RuleCall cValueNUMBERParserRuleCall_8_1_0 = (RuleCall)cValueAssignment_8_1.eContents().get(0);
		private final Group cGroup_9 = (Group)cAlternatives.eContents().get(9);
		private final Action cValueExpressionAction_9_0 = (Action)cGroup_9.eContents().get(0);
		private final Assignment cValueAssignment_9_1 = (Assignment)cGroup_9.eContents().get(1);
		private final Keyword cValueTRUEKeyword_9_1_0 = (Keyword)cValueAssignment_9_1.eContents().get(0);
		private final Group cGroup_10 = (Group)cAlternatives.eContents().get(10);
		private final Action cValueExpressionAction_10_0 = (Action)cGroup_10.eContents().get(0);
		private final Assignment cValueAssignment_10_1 = (Assignment)cGroup_10.eContents().get(1);
		private final Keyword cValueFALSEKeyword_10_1_0 = (Keyword)cValueAssignment_10_1.eContents().get(0);
		private final Group cGroup_11 = (Group)cAlternatives.eContents().get(11);
		private final Action cValueExpressionAction_11_0 = (Action)cGroup_11.eContents().get(0);
		private final Assignment cValueAssignment_11_1 = (Assignment)cGroup_11.eContents().get(1);
		private final Keyword cValueSelfKeyword_11_1_0 = (Keyword)cValueAssignment_11_1.eContents().get(0);
		private final Group cGroup_12 = (Group)cAlternatives.eContents().get(12);
		private final Action cSetExpressionAction_12_0 = (Action)cGroup_12.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_12_1 = (Keyword)cGroup_12.eContents().get(1);
		private final Assignment cSetElementAssignment_12_2 = (Assignment)cGroup_12.eContents().get(2);
		private final RuleCall cSetElementSimpleExpressionParserRuleCall_12_2_0 = (RuleCall)cSetElementAssignment_12_2.eContents().get(0);
		private final Group cGroup_12_3 = (Group)cGroup_12.eContents().get(3);
		private final Keyword cCommaKeyword_12_3_0 = (Keyword)cGroup_12_3.eContents().get(0);
		private final Assignment cSetElementAssignment_12_3_1 = (Assignment)cGroup_12_3.eContents().get(1);
		private final RuleCall cSetElementSimpleExpressionParserRuleCall_12_3_1_0 = (RuleCall)cSetElementAssignment_12_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_12_4 = (Keyword)cGroup_12.eContents().get(4);
		private final Group cGroup_13 = (Group)cAlternatives.eContents().get(13);
		private final Action cWordExpressionAction_13_0 = (Action)cGroup_13.eContents().get(0);
		private final Assignment cValueAssignment_13_1 = (Assignment)cGroup_13.eContents().get(1);
		private final RuleCall cValueWORDTerminalRuleCall_13_1_0 = (RuleCall)cValueAssignment_13_1.eContents().get(0);
		private final Group cGroup_14 = (Group)cAlternatives.eContents().get(14);
		private final Action cIntervalExpressionAction_14_0 = (Action)cGroup_14.eContents().get(0);
		private final Assignment cLowerBoundAssignment_14_1 = (Assignment)cGroup_14.eContents().get(1);
		private final RuleCall cLowerBoundNUMBERParserRuleCall_14_1_0 = (RuleCall)cLowerBoundAssignment_14_1.eContents().get(0);
		private final Keyword cFullStopFullStopKeyword_14_2 = (Keyword)cGroup_14.eContents().get(2);
		private final Assignment cUpperBoundAssignment_14_3 = (Assignment)cGroup_14.eContents().get(3);
		private final RuleCall cUpperBoundNUMBERParserRuleCall_14_3_0 = (RuleCall)cUpperBoundAssignment_14_3.eContents().get(0);
		private final Group cGroup_15 = (Group)cAlternatives.eContents().get(15);
		private final Action cUntilCTLexpressionAction_15_0 = (Action)cGroup_15.eContents().get(0);
		private final Assignment cEaAssignment_15_1 = (Assignment)cGroup_15.eContents().get(1);
		private final Alternatives cEaAlternatives_15_1_0 = (Alternatives)cEaAssignment_15_1.eContents().get(0);
		private final Keyword cEaEKeyword_15_1_0_0 = (Keyword)cEaAlternatives_15_1_0.eContents().get(0);
		private final Keyword cEaAKeyword_15_1_0_1 = (Keyword)cEaAlternatives_15_1_0.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_15_2 = (Keyword)cGroup_15.eContents().get(2);
		private final Assignment cArgAssignment_15_3 = (Assignment)cGroup_15.eContents().get(3);
		private final RuleCall cArgLTLbinExpressionParserRuleCall_15_3_0 = (RuleCall)cArgAssignment_15_3.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_15_4 = (Keyword)cGroup_15.eContents().get(4);
		private final Group cGroup_16 = (Group)cAlternatives.eContents().get(16);
		private final Action cUnaryFunctionExpressionAction_16_0 = (Action)cGroup_16.eContents().get(0);
		private final Assignment cFunctionAssignment_16_1 = (Assignment)cGroup_16.eContents().get(1);
		private final Alternatives cFunctionAlternatives_16_1_0 = (Alternatives)cFunctionAssignment_16_1.eContents().get(0);
		private final Keyword cFunctionWord1Keyword_16_1_0_0 = (Keyword)cFunctionAlternatives_16_1_0.eContents().get(0);
		private final Keyword cFunctionBoolKeyword_16_1_0_1 = (Keyword)cFunctionAlternatives_16_1_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_16_2 = (Keyword)cGroup_16.eContents().get(2);
		private final Assignment cArgAssignment_16_3 = (Assignment)cGroup_16.eContents().get(3);
		private final RuleCall cArgSimpleExpressionParserRuleCall_16_3_0 = (RuleCall)cArgAssignment_16_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_16_4 = (Keyword)cGroup_16.eContents().get(4);
		private final Group cGroup_17 = (Group)cAlternatives.eContents().get(17);
		private final Action cToIntAction_17_0 = (Action)cGroup_17.eContents().get(0);
		private final Keyword cTointKeyword_17_1 = (Keyword)cGroup_17.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_17_2 = (Keyword)cGroup_17.eContents().get(2);
		private final Assignment cArgAssignment_17_3 = (Assignment)cGroup_17.eContents().get(3);
		private final RuleCall cArgSimpleExpressionParserRuleCall_17_3_0 = (RuleCall)cArgAssignment_17_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_17_4 = (Keyword)cGroup_17.eContents().get(4);
		
		//TerminalSimpleExpression SimpleExpression hidden(WS, SL_COMMENT):
		//	{ParsExpression} isNext="next"? "(" simpleExpression=SimpleExpression ")"
		//	| {UnaryExpression} (operator=('-' | '+' | 'EG' | 'EX' | 'EF' | 'AG' | 'AX' | 'AF' | 'X' | 'G' | 'F' | 'Y' | 'Z' | 'H'
		//	| 'O') simpleExpression=SimpleExpression) | CaseSimpleExpression
		//	| {ValueExpression} value=VariableID ('[' array+=NUMBER ']')*
		//	| {Var} value=[VarBody] ("." dotted=TerminalSimpleExpression | ('[' array+=NUMBER ']')*)?
		//	| {SetElementExpression} val=[Val] | {SetValueParameter} valparam=[FormalParameter] | {ValueExpression} value=ID |
		//	{ValueExpression} value=NUMBER | {ValueExpression} value="TRUE" | {ValueExpression} value="FALSE" | {ValueExpression}
		//	value="self"
		//	| {SetExpression} "{" setElement+=SimpleExpression ("," setElement+=SimpleExpression)* "}"
		//	| {WordExpression} value=WORD | {IntervalExpression} lowerBound=NUMBER ".." upperBound=NUMBER | {UntilCTLexpression}
		//	ea=("E" | "A") "[" arg=LTLbinExpression "]" | {UnaryFunctionExpression} function=("word1" |
		//	"bool") "(" arg=SimpleExpression ")" | {ToInt} "toint" "(" arg=SimpleExpression ")";
		@Override public ParserRule getRule() { return rule; }
		
		//{ParsExpression} isNext="next"? "(" simpleExpression=SimpleExpression ")" | {UnaryExpression} (operator=('-' | '+' |
		//'EG' | 'EX' | 'EF' | 'AG' | 'AX' | 'AF' | 'X' | 'G' | 'F' | 'Y' | 'Z' | 'H' | 'O') simpleExpression=SimpleExpression) |
		//CaseSimpleExpression | {ValueExpression} value=VariableID ('[' array+=NUMBER ']')* | {Var} value=[VarBody] ("."
		//dotted=TerminalSimpleExpression | ('[' array+=NUMBER ']')*)? | {SetElementExpression} val=[Val] | {SetValueParameter}
		//valparam=[FormalParameter] | {ValueExpression} value=ID | {ValueExpression} value=NUMBER | {ValueExpression}
		//value="TRUE" | {ValueExpression} value="FALSE" | {ValueExpression} value="self" | {SetExpression} "{"
		//setElement+=SimpleExpression ("," setElement+=SimpleExpression)* "}" | {WordExpression} value=WORD |
		//{IntervalExpression} lowerBound=NUMBER ".." upperBound=NUMBER | {UntilCTLexpression} ea=("E" | "A") "["
		//arg=LTLbinExpression "]" | {UnaryFunctionExpression} function=("word1" | "bool") "(" arg=SimpleExpression ")" | {ToInt}
		//"toint" "(" arg=SimpleExpression ")"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{ParsExpression} isNext="next"? "(" simpleExpression=SimpleExpression ")"
		public Group getGroup_0() { return cGroup_0; }
		
		//{ParsExpression}
		public Action getParsExpressionAction_0_0() { return cParsExpressionAction_0_0; }
		
		//isNext="next"?
		public Assignment getIsNextAssignment_0_1() { return cIsNextAssignment_0_1; }
		
		//"next"
		public Keyword getIsNextNextKeyword_0_1_0() { return cIsNextNextKeyword_0_1_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_0_2() { return cLeftParenthesisKeyword_0_2; }
		
		//simpleExpression=SimpleExpression
		public Assignment getSimpleExpressionAssignment_0_3() { return cSimpleExpressionAssignment_0_3; }
		
		//SimpleExpression
		public RuleCall getSimpleExpressionSimpleExpressionParserRuleCall_0_3_0() { return cSimpleExpressionSimpleExpressionParserRuleCall_0_3_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_0_4() { return cRightParenthesisKeyword_0_4; }
		
		//{UnaryExpression} (operator=('-' | '+' | 'EG' | 'EX' | 'EF' | 'AG' | 'AX' | 'AF' | 'X' | 'G' | 'F' | 'Y' | 'Z' | 'H' |
		//'O') simpleExpression=SimpleExpression)
		public Group getGroup_1() { return cGroup_1; }
		
		//{UnaryExpression}
		public Action getUnaryExpressionAction_1_0() { return cUnaryExpressionAction_1_0; }
		
		//(operator=('-' | '+' | 'EG' | 'EX' | 'EF' | 'AG' | 'AX' | 'AF' | 'X' | 'G' | 'F' | 'Y' | 'Z' | 'H' | 'O')
		//simpleExpression=SimpleExpression)
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//operator=('-' | '+' | 'EG' | 'EX' | 'EF' | 'AG' | 'AX' | 'AF' | 'X' | 'G' | 'F' | 'Y' | 'Z' | 'H' | 'O')
		public Assignment getOperatorAssignment_1_1_0() { return cOperatorAssignment_1_1_0; }
		
		//('-' | '+' | 'EG' | 'EX' | 'EF' | 'AG' | 'AX' | 'AF' | 'X' | 'G' | 'F' | 'Y' | 'Z' | 'H' | 'O')
		public Alternatives getOperatorAlternatives_1_1_0_0() { return cOperatorAlternatives_1_1_0_0; }
		
		//'-'
		public Keyword getOperatorHyphenMinusKeyword_1_1_0_0_0() { return cOperatorHyphenMinusKeyword_1_1_0_0_0; }
		
		//'+'
		public Keyword getOperatorPlusSignKeyword_1_1_0_0_1() { return cOperatorPlusSignKeyword_1_1_0_0_1; }
		
		//'EG'
		public Keyword getOperatorEGKeyword_1_1_0_0_2() { return cOperatorEGKeyword_1_1_0_0_2; }
		
		//'EX'
		public Keyword getOperatorEXKeyword_1_1_0_0_3() { return cOperatorEXKeyword_1_1_0_0_3; }
		
		//'EF'
		public Keyword getOperatorEFKeyword_1_1_0_0_4() { return cOperatorEFKeyword_1_1_0_0_4; }
		
		//'AG'
		public Keyword getOperatorAGKeyword_1_1_0_0_5() { return cOperatorAGKeyword_1_1_0_0_5; }
		
		//'AX'
		public Keyword getOperatorAXKeyword_1_1_0_0_6() { return cOperatorAXKeyword_1_1_0_0_6; }
		
		//'AF'
		public Keyword getOperatorAFKeyword_1_1_0_0_7() { return cOperatorAFKeyword_1_1_0_0_7; }
		
		//'X'
		public Keyword getOperatorXKeyword_1_1_0_0_8() { return cOperatorXKeyword_1_1_0_0_8; }
		
		//'G'
		public Keyword getOperatorGKeyword_1_1_0_0_9() { return cOperatorGKeyword_1_1_0_0_9; }
		
		//'F'
		public Keyword getOperatorFKeyword_1_1_0_0_10() { return cOperatorFKeyword_1_1_0_0_10; }
		
		//'Y'
		public Keyword getOperatorYKeyword_1_1_0_0_11() { return cOperatorYKeyword_1_1_0_0_11; }
		
		//'Z'
		public Keyword getOperatorZKeyword_1_1_0_0_12() { return cOperatorZKeyword_1_1_0_0_12; }
		
		//'H'
		public Keyword getOperatorHKeyword_1_1_0_0_13() { return cOperatorHKeyword_1_1_0_0_13; }
		
		//'O'
		public Keyword getOperatorOKeyword_1_1_0_0_14() { return cOperatorOKeyword_1_1_0_0_14; }
		
		//simpleExpression=SimpleExpression
		public Assignment getSimpleExpressionAssignment_1_1_1() { return cSimpleExpressionAssignment_1_1_1; }
		
		//SimpleExpression
		public RuleCall getSimpleExpressionSimpleExpressionParserRuleCall_1_1_1_0() { return cSimpleExpressionSimpleExpressionParserRuleCall_1_1_1_0; }
		
		//CaseSimpleExpression
		public RuleCall getCaseSimpleExpressionParserRuleCall_2() { return cCaseSimpleExpressionParserRuleCall_2; }
		
		//{ValueExpression} value=VariableID ('[' array+=NUMBER ']')*
		public Group getGroup_3() { return cGroup_3; }
		
		//{ValueExpression}
		public Action getValueExpressionAction_3_0() { return cValueExpressionAction_3_0; }
		
		//value=VariableID
		public Assignment getValueAssignment_3_1() { return cValueAssignment_3_1; }
		
		//VariableID
		public RuleCall getValueVariableIDParserRuleCall_3_1_0() { return cValueVariableIDParserRuleCall_3_1_0; }
		
		//('[' array+=NUMBER ']')*
		public Group getGroup_3_2() { return cGroup_3_2; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_3_2_0() { return cLeftSquareBracketKeyword_3_2_0; }
		
		//array+=NUMBER
		public Assignment getArrayAssignment_3_2_1() { return cArrayAssignment_3_2_1; }
		
		//NUMBER
		public RuleCall getArrayNUMBERParserRuleCall_3_2_1_0() { return cArrayNUMBERParserRuleCall_3_2_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_3_2_2() { return cRightSquareBracketKeyword_3_2_2; }
		
		//{Var} value=[VarBody] ("." dotted=TerminalSimpleExpression | ('[' array+=NUMBER ']')*)?
		public Group getGroup_4() { return cGroup_4; }
		
		//{Var}
		public Action getVarAction_4_0() { return cVarAction_4_0; }
		
		//value=[VarBody]
		public Assignment getValueAssignment_4_1() { return cValueAssignment_4_1; }
		
		//[VarBody]
		public CrossReference getValueVarBodyCrossReference_4_1_0() { return cValueVarBodyCrossReference_4_1_0; }
		
		//ID
		public RuleCall getValueVarBodyIDTerminalRuleCall_4_1_0_1() { return cValueVarBodyIDTerminalRuleCall_4_1_0_1; }
		
		//("." dotted=TerminalSimpleExpression | ('[' array+=NUMBER ']')*)?
		public Alternatives getAlternatives_4_2() { return cAlternatives_4_2; }
		
		//"." dotted=TerminalSimpleExpression
		public Group getGroup_4_2_0() { return cGroup_4_2_0; }
		
		//"."
		public Keyword getFullStopKeyword_4_2_0_0() { return cFullStopKeyword_4_2_0_0; }
		
		//dotted=TerminalSimpleExpression
		public Assignment getDottedAssignment_4_2_0_1() { return cDottedAssignment_4_2_0_1; }
		
		//TerminalSimpleExpression
		public RuleCall getDottedTerminalSimpleExpressionParserRuleCall_4_2_0_1_0() { return cDottedTerminalSimpleExpressionParserRuleCall_4_2_0_1_0; }
		
		//('[' array+=NUMBER ']')*
		public Group getGroup_4_2_1() { return cGroup_4_2_1; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_4_2_1_0() { return cLeftSquareBracketKeyword_4_2_1_0; }
		
		//array+=NUMBER
		public Assignment getArrayAssignment_4_2_1_1() { return cArrayAssignment_4_2_1_1; }
		
		//NUMBER
		public RuleCall getArrayNUMBERParserRuleCall_4_2_1_1_0() { return cArrayNUMBERParserRuleCall_4_2_1_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_4_2_1_2() { return cRightSquareBracketKeyword_4_2_1_2; }
		
		//{SetElementExpression} val=[Val]
		public Group getGroup_5() { return cGroup_5; }
		
		//{SetElementExpression}
		public Action getSetElementExpressionAction_5_0() { return cSetElementExpressionAction_5_0; }
		
		//val=[Val]
		public Assignment getValAssignment_5_1() { return cValAssignment_5_1; }
		
		//[Val]
		public CrossReference getValValCrossReference_5_1_0() { return cValValCrossReference_5_1_0; }
		
		//ID
		public RuleCall getValValIDTerminalRuleCall_5_1_0_1() { return cValValIDTerminalRuleCall_5_1_0_1; }
		
		//{SetValueParameter} valparam=[FormalParameter]
		public Group getGroup_6() { return cGroup_6; }
		
		//{SetValueParameter}
		public Action getSetValueParameterAction_6_0() { return cSetValueParameterAction_6_0; }
		
		//valparam=[FormalParameter]
		public Assignment getValparamAssignment_6_1() { return cValparamAssignment_6_1; }
		
		//[FormalParameter]
		public CrossReference getValparamFormalParameterCrossReference_6_1_0() { return cValparamFormalParameterCrossReference_6_1_0; }
		
		//ID
		public RuleCall getValparamFormalParameterIDTerminalRuleCall_6_1_0_1() { return cValparamFormalParameterIDTerminalRuleCall_6_1_0_1; }
		
		//{ValueExpression} value=ID
		public Group getGroup_7() { return cGroup_7; }
		
		//{ValueExpression}
		public Action getValueExpressionAction_7_0() { return cValueExpressionAction_7_0; }
		
		//value=ID
		public Assignment getValueAssignment_7_1() { return cValueAssignment_7_1; }
		
		//ID
		public RuleCall getValueIDTerminalRuleCall_7_1_0() { return cValueIDTerminalRuleCall_7_1_0; }
		
		//{ValueExpression} value=NUMBER
		public Group getGroup_8() { return cGroup_8; }
		
		//{ValueExpression}
		public Action getValueExpressionAction_8_0() { return cValueExpressionAction_8_0; }
		
		//value=NUMBER
		public Assignment getValueAssignment_8_1() { return cValueAssignment_8_1; }
		
		//NUMBER
		public RuleCall getValueNUMBERParserRuleCall_8_1_0() { return cValueNUMBERParserRuleCall_8_1_0; }
		
		//{ValueExpression} value="TRUE"
		public Group getGroup_9() { return cGroup_9; }
		
		//{ValueExpression}
		public Action getValueExpressionAction_9_0() { return cValueExpressionAction_9_0; }
		
		//value="TRUE"
		public Assignment getValueAssignment_9_1() { return cValueAssignment_9_1; }
		
		//"TRUE"
		public Keyword getValueTRUEKeyword_9_1_0() { return cValueTRUEKeyword_9_1_0; }
		
		//{ValueExpression} value="FALSE"
		public Group getGroup_10() { return cGroup_10; }
		
		//{ValueExpression}
		public Action getValueExpressionAction_10_0() { return cValueExpressionAction_10_0; }
		
		//value="FALSE"
		public Assignment getValueAssignment_10_1() { return cValueAssignment_10_1; }
		
		//"FALSE"
		public Keyword getValueFALSEKeyword_10_1_0() { return cValueFALSEKeyword_10_1_0; }
		
		//{ValueExpression} value="self"
		public Group getGroup_11() { return cGroup_11; }
		
		//{ValueExpression}
		public Action getValueExpressionAction_11_0() { return cValueExpressionAction_11_0; }
		
		//value="self"
		public Assignment getValueAssignment_11_1() { return cValueAssignment_11_1; }
		
		//"self"
		public Keyword getValueSelfKeyword_11_1_0() { return cValueSelfKeyword_11_1_0; }
		
		//{SetExpression} "{" setElement+=SimpleExpression ("," setElement+=SimpleExpression)* "}"
		public Group getGroup_12() { return cGroup_12; }
		
		//{SetExpression}
		public Action getSetExpressionAction_12_0() { return cSetExpressionAction_12_0; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_12_1() { return cLeftCurlyBracketKeyword_12_1; }
		
		//setElement+=SimpleExpression
		public Assignment getSetElementAssignment_12_2() { return cSetElementAssignment_12_2; }
		
		//SimpleExpression
		public RuleCall getSetElementSimpleExpressionParserRuleCall_12_2_0() { return cSetElementSimpleExpressionParserRuleCall_12_2_0; }
		
		//("," setElement+=SimpleExpression)*
		public Group getGroup_12_3() { return cGroup_12_3; }
		
		//","
		public Keyword getCommaKeyword_12_3_0() { return cCommaKeyword_12_3_0; }
		
		//setElement+=SimpleExpression
		public Assignment getSetElementAssignment_12_3_1() { return cSetElementAssignment_12_3_1; }
		
		//SimpleExpression
		public RuleCall getSetElementSimpleExpressionParserRuleCall_12_3_1_0() { return cSetElementSimpleExpressionParserRuleCall_12_3_1_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_12_4() { return cRightCurlyBracketKeyword_12_4; }
		
		//{WordExpression} value=WORD
		public Group getGroup_13() { return cGroup_13; }
		
		//{WordExpression}
		public Action getWordExpressionAction_13_0() { return cWordExpressionAction_13_0; }
		
		//value=WORD
		public Assignment getValueAssignment_13_1() { return cValueAssignment_13_1; }
		
		//WORD
		public RuleCall getValueWORDTerminalRuleCall_13_1_0() { return cValueWORDTerminalRuleCall_13_1_0; }
		
		//{IntervalExpression} lowerBound=NUMBER ".." upperBound=NUMBER
		public Group getGroup_14() { return cGroup_14; }
		
		//{IntervalExpression}
		public Action getIntervalExpressionAction_14_0() { return cIntervalExpressionAction_14_0; }
		
		//lowerBound=NUMBER
		public Assignment getLowerBoundAssignment_14_1() { return cLowerBoundAssignment_14_1; }
		
		//NUMBER
		public RuleCall getLowerBoundNUMBERParserRuleCall_14_1_0() { return cLowerBoundNUMBERParserRuleCall_14_1_0; }
		
		//".."
		public Keyword getFullStopFullStopKeyword_14_2() { return cFullStopFullStopKeyword_14_2; }
		
		//upperBound=NUMBER
		public Assignment getUpperBoundAssignment_14_3() { return cUpperBoundAssignment_14_3; }
		
		//NUMBER
		public RuleCall getUpperBoundNUMBERParserRuleCall_14_3_0() { return cUpperBoundNUMBERParserRuleCall_14_3_0; }
		
		//{UntilCTLexpression} ea=("E" | "A") "[" arg=LTLbinExpression "]"
		public Group getGroup_15() { return cGroup_15; }
		
		//{UntilCTLexpression}
		public Action getUntilCTLexpressionAction_15_0() { return cUntilCTLexpressionAction_15_0; }
		
		//ea=("E" | "A")
		public Assignment getEaAssignment_15_1() { return cEaAssignment_15_1; }
		
		//("E" | "A")
		public Alternatives getEaAlternatives_15_1_0() { return cEaAlternatives_15_1_0; }
		
		//"E"
		public Keyword getEaEKeyword_15_1_0_0() { return cEaEKeyword_15_1_0_0; }
		
		//"A"
		public Keyword getEaAKeyword_15_1_0_1() { return cEaAKeyword_15_1_0_1; }
		
		//"["
		public Keyword getLeftSquareBracketKeyword_15_2() { return cLeftSquareBracketKeyword_15_2; }
		
		//arg=LTLbinExpression
		public Assignment getArgAssignment_15_3() { return cArgAssignment_15_3; }
		
		//LTLbinExpression
		public RuleCall getArgLTLbinExpressionParserRuleCall_15_3_0() { return cArgLTLbinExpressionParserRuleCall_15_3_0; }
		
		//"]"
		public Keyword getRightSquareBracketKeyword_15_4() { return cRightSquareBracketKeyword_15_4; }
		
		//{UnaryFunctionExpression} function=("word1" | "bool") "(" arg=SimpleExpression ")"
		public Group getGroup_16() { return cGroup_16; }
		
		//{UnaryFunctionExpression}
		public Action getUnaryFunctionExpressionAction_16_0() { return cUnaryFunctionExpressionAction_16_0; }
		
		//function=("word1" | "bool")
		public Assignment getFunctionAssignment_16_1() { return cFunctionAssignment_16_1; }
		
		//("word1" | "bool")
		public Alternatives getFunctionAlternatives_16_1_0() { return cFunctionAlternatives_16_1_0; }
		
		//"word1"
		public Keyword getFunctionWord1Keyword_16_1_0_0() { return cFunctionWord1Keyword_16_1_0_0; }
		
		//"bool"
		public Keyword getFunctionBoolKeyword_16_1_0_1() { return cFunctionBoolKeyword_16_1_0_1; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_16_2() { return cLeftParenthesisKeyword_16_2; }
		
		//arg=SimpleExpression
		public Assignment getArgAssignment_16_3() { return cArgAssignment_16_3; }
		
		//SimpleExpression
		public RuleCall getArgSimpleExpressionParserRuleCall_16_3_0() { return cArgSimpleExpressionParserRuleCall_16_3_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_16_4() { return cRightParenthesisKeyword_16_4; }
		
		//{ToInt} "toint" "(" arg=SimpleExpression ")"
		public Group getGroup_17() { return cGroup_17; }
		
		//{ToInt}
		public Action getToIntAction_17_0() { return cToIntAction_17_0; }
		
		//"toint"
		public Keyword getTointKeyword_17_1() { return cTointKeyword_17_1; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_17_2() { return cLeftParenthesisKeyword_17_2; }
		
		//arg=SimpleExpression
		public Assignment getArgAssignment_17_3() { return cArgAssignment_17_3; }
		
		//SimpleExpression
		public RuleCall getArgSimpleExpressionParserRuleCall_17_3_0() { return cArgSimpleExpressionParserRuleCall_17_3_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_17_4() { return cRightParenthesisKeyword_17_4; }
	}
	public class FormalParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.nusmv.language.NuSMV.FormalParameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//FormalParameter:
		//	name=ID ("."? ID)*;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ("."? ID)*
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//("."? ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//"."?
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	public class CaseSimpleExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.nusmv.language.NuSMV.CaseSimpleExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCaseKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cBranchesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBranchesCaseSimpleAssignementExpressionParserRuleCall_1_0 = (RuleCall)cBranchesAssignment_1.eContents().get(0);
		private final Keyword cEsacKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//CaseSimpleExpression hidden(WS, SL_COMMENT):
		//	"case" branches+=CaseSimpleAssignementExpression+ "esac";
		@Override public ParserRule getRule() { return rule; }
		
		//"case" branches+=CaseSimpleAssignementExpression+ "esac"
		public Group getGroup() { return cGroup; }
		
		//"case"
		public Keyword getCaseKeyword_0() { return cCaseKeyword_0; }
		
		//branches+=CaseSimpleAssignementExpression+
		public Assignment getBranchesAssignment_1() { return cBranchesAssignment_1; }
		
		//CaseSimpleAssignementExpression
		public RuleCall getBranchesCaseSimpleAssignementExpressionParserRuleCall_1_0() { return cBranchesCaseSimpleAssignementExpressionParserRuleCall_1_0; }
		
		//"esac"
		public Keyword getEsacKeyword_2() { return cEsacKeyword_2; }
	}
	public class CaseSimpleAssignementExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.nusmv.language.NuSMV.CaseSimpleAssignementExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCaseAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cCaseSimpleExpressionParserRuleCall_0_0 = (RuleCall)cCaseAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAssignmentAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAssignmentSimpleExpressionParserRuleCall_2_0 = (RuleCall)cAssignmentAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//CaseSimpleAssignementExpression hidden(WS, SL_COMMENT):
		//	case=SimpleExpression ":" assignment=SimpleExpression ";";
		@Override public ParserRule getRule() { return rule; }
		
		//case=SimpleExpression ":" assignment=SimpleExpression ";"
		public Group getGroup() { return cGroup; }
		
		//case=SimpleExpression
		public Assignment getCaseAssignment_0() { return cCaseAssignment_0; }
		
		//SimpleExpression
		public RuleCall getCaseSimpleExpressionParserRuleCall_0_0() { return cCaseSimpleExpressionParserRuleCall_0_0; }
		
		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//assignment=SimpleExpression
		public Assignment getAssignmentAssignment_2() { return cAssignmentAssignment_2; }
		
		//SimpleExpression
		public RuleCall getAssignmentSimpleExpressionParserRuleCall_2_0() { return cAssignmentSimpleExpressionParserRuleCall_2_0; }
		
		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class CTLExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.nusmv.language.NuSMV.CTLExpression");
		private final Assignment cSimpleExpressionAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cSimpleExpressionSimpleExpressionParserRuleCall_0 = (RuleCall)cSimpleExpressionAssignment.eContents().get(0);
		
		//CTLExpression hidden(WS, SL_COMMENT):
		//	simpleExpression=SimpleExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//simpleExpression=SimpleExpression
		public Assignment getSimpleExpressionAssignment() { return cSimpleExpressionAssignment; }
		
		//SimpleExpression
		public RuleCall getSimpleExpressionSimpleExpressionParserRuleCall_0() { return cSimpleExpressionSimpleExpressionParserRuleCall_0; }
	}
	public class PSLExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.nusmv.language.NuSMV.PSLExpression");
		private final Assignment cSimpleExpressionAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cSimpleExpressionSimpleExpressionParserRuleCall_0 = (RuleCall)cSimpleExpressionAssignment.eContents().get(0);
		
		//PSLExpression hidden(WS, SL_COMMENT):
		//	simpleExpression=SimpleExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//simpleExpression=SimpleExpression
		public Assignment getSimpleExpressionAssignment() { return cSimpleExpressionAssignment; }
		
		//SimpleExpression
		public RuleCall getSimpleExpressionSimpleExpressionParserRuleCall_0() { return cSimpleExpressionSimpleExpressionParserRuleCall_0; }
	}
	public class LTLExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.nusmv.language.NuSMV.LTLExpression");
		private final Assignment cSimpleExpressionAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cSimpleExpressionSimpleExpressionParserRuleCall_0 = (RuleCall)cSimpleExpressionAssignment.eContents().get(0);
		
		//LTLExpression hidden(WS, SL_COMMENT):
		//	simpleExpression=SimpleExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//simpleExpression=SimpleExpression
		public Assignment getSimpleExpressionAssignment() { return cSimpleExpressionAssignment; }
		
		//SimpleExpression
		public RuleCall getSimpleExpressionSimpleExpressionParserRuleCall_0() { return cSimpleExpressionSimpleExpressionParserRuleCall_0; }
	}
	public class RangeExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.nusmv.language.NuSMV.RangeExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLowerAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLowerNUMBERParserRuleCall_0_0 = (RuleCall)cLowerAssignment_0.eContents().get(0);
		private final Keyword cFullStopFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cUpperAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cUpperNUMBERParserRuleCall_2_0 = (RuleCall)cUpperAssignment_2.eContents().get(0);
		
		//RangeExpression:
		//	lower=NUMBER ".." upper=NUMBER;
		@Override public ParserRule getRule() { return rule; }
		
		//lower=NUMBER ".." upper=NUMBER
		public Group getGroup() { return cGroup; }
		
		//lower=NUMBER
		public Assignment getLowerAssignment_0() { return cLowerAssignment_0; }
		
		//NUMBER
		public RuleCall getLowerNUMBERParserRuleCall_0_0() { return cLowerNUMBERParserRuleCall_0_0; }
		
		//".."
		public Keyword getFullStopFullStopKeyword_1() { return cFullStopFullStopKeyword_1; }
		
		//upper=NUMBER
		public Assignment getUpperAssignment_2() { return cUpperAssignment_2; }
		
		//NUMBER
		public RuleCall getUpperNUMBERParserRuleCall_2_0() { return cUpperNUMBERParserRuleCall_2_0; }
	}
	public class RTCTLExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.nusmv.language.NuSMV.RTCTLExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cSingleRTCTLExpressionAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cCtlExpressionAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final Alternatives cCtlExpressionAlternatives_0_1_0 = (Alternatives)cCtlExpressionAssignment_0_1.eContents().get(0);
		private final RuleCall cCtlExpressionCTLExpressionParserRuleCall_0_1_0_0 = (RuleCall)cCtlExpressionAlternatives_0_1_0.eContents().get(0);
		private final RuleCall cCtlExpressionFormalParameterParserRuleCall_0_1_0_1 = (RuleCall)cCtlExpressionAlternatives_0_1_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cUnaryRTCTLExpressionAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cUnaryAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cUnaryAlternatives_1_1_0 = (Alternatives)cUnaryAssignment_1_1.eContents().get(0);
		private final Keyword cUnaryEBFKeyword_1_1_0_0 = (Keyword)cUnaryAlternatives_1_1_0.eContents().get(0);
		private final Keyword cUnaryABFKeyword_1_1_0_1 = (Keyword)cUnaryAlternatives_1_1_0.eContents().get(1);
		private final Keyword cUnaryEBGKeyword_1_1_0_2 = (Keyword)cUnaryAlternatives_1_1_0.eContents().get(2);
		private final Keyword cUnaryABGKeyword_1_1_0_3 = (Keyword)cUnaryAlternatives_1_1_0.eContents().get(3);
		private final Assignment cRangeAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRangeRangeExpressionParserRuleCall_1_2_0 = (RuleCall)cRangeAssignment_1_2.eContents().get(0);
		private final Assignment cRctlAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cRctlRTCTLExpressionParserRuleCall_1_3_0 = (RuleCall)cRctlAssignment_1_3.eContents().get(0);
		
		//RTCTLExpression hidden(WS, SL_COMMENT):
		//	{SingleRTCTLExpression} ctlExpression=(CTLExpression | FormalParameter) | {UnaryRTCTLExpression} unary=("EBF" | "ABF"
		//	| "EBG" | "ABG") range=RangeExpression rctl=RTCTLExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//{SingleRTCTLExpression} ctlExpression=(CTLExpression | FormalParameter) | {UnaryRTCTLExpression} unary=("EBF" | "ABF" |
		//"EBG" | "ABG") range=RangeExpression rctl=RTCTLExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{SingleRTCTLExpression} ctlExpression=(CTLExpression | FormalParameter)
		public Group getGroup_0() { return cGroup_0; }
		
		//{SingleRTCTLExpression}
		public Action getSingleRTCTLExpressionAction_0_0() { return cSingleRTCTLExpressionAction_0_0; }
		
		//ctlExpression=(CTLExpression | FormalParameter)
		public Assignment getCtlExpressionAssignment_0_1() { return cCtlExpressionAssignment_0_1; }
		
		//(CTLExpression | FormalParameter)
		public Alternatives getCtlExpressionAlternatives_0_1_0() { return cCtlExpressionAlternatives_0_1_0; }
		
		//CTLExpression
		public RuleCall getCtlExpressionCTLExpressionParserRuleCall_0_1_0_0() { return cCtlExpressionCTLExpressionParserRuleCall_0_1_0_0; }
		
		//FormalParameter
		public RuleCall getCtlExpressionFormalParameterParserRuleCall_0_1_0_1() { return cCtlExpressionFormalParameterParserRuleCall_0_1_0_1; }
		
		//{UnaryRTCTLExpression} unary=("EBF" | "ABF" | "EBG" | "ABG") range=RangeExpression rctl=RTCTLExpression
		public Group getGroup_1() { return cGroup_1; }
		
		//{UnaryRTCTLExpression}
		public Action getUnaryRTCTLExpressionAction_1_0() { return cUnaryRTCTLExpressionAction_1_0; }
		
		//unary=("EBF" | "ABF" | "EBG" | "ABG")
		public Assignment getUnaryAssignment_1_1() { return cUnaryAssignment_1_1; }
		
		//("EBF" | "ABF" | "EBG" | "ABG")
		public Alternatives getUnaryAlternatives_1_1_0() { return cUnaryAlternatives_1_1_0; }
		
		//"EBF"
		public Keyword getUnaryEBFKeyword_1_1_0_0() { return cUnaryEBFKeyword_1_1_0_0; }
		
		//"ABF"
		public Keyword getUnaryABFKeyword_1_1_0_1() { return cUnaryABFKeyword_1_1_0_1; }
		
		//"EBG"
		public Keyword getUnaryEBGKeyword_1_1_0_2() { return cUnaryEBGKeyword_1_1_0_2; }
		
		//"ABG"
		public Keyword getUnaryABGKeyword_1_1_0_3() { return cUnaryABGKeyword_1_1_0_3; }
		
		//range=RangeExpression
		public Assignment getRangeAssignment_1_2() { return cRangeAssignment_1_2; }
		
		//RangeExpression
		public RuleCall getRangeRangeExpressionParserRuleCall_1_2_0() { return cRangeRangeExpressionParserRuleCall_1_2_0; }
		
		//rctl=RTCTLExpression
		public Assignment getRctlAssignment_1_3() { return cRctlAssignment_1_3; }
		
		//RTCTLExpression
		public RuleCall getRctlRTCTLExpressionParserRuleCall_1_3_0() { return cRctlRTCTLExpressionParserRuleCall_1_3_0; }
	}
	public class ComputeSpecificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.nusmv.language.NuSMV.ComputeSpecification");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCOMPUTEKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cMinMaxAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cMinMaxAlternatives_1_0 = (Alternatives)cMinMaxAssignment_1.eContents().get(0);
		private final Keyword cMinMaxMINKeyword_1_0_0 = (Keyword)cMinMaxAlternatives_1_0.eContents().get(0);
		private final Keyword cMinMaxMAXKeyword_1_0_1 = (Keyword)cMinMaxAlternatives_1_0.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cFirstAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cFirstRTCTLExpressionParserRuleCall_3_0 = (RuleCall)cFirstAssignment_3.eContents().get(0);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cSecondAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cSecondRTCTLExpressionParserRuleCall_5_0 = (RuleCall)cSecondAssignment_5.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cSemicolonAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final Keyword cSemicolonSemicolonKeyword_7_0 = (Keyword)cSemicolonAssignment_7.eContents().get(0);
		
		//ComputeSpecification:
		//	"COMPUTE" minMax=("MIN" | "MAX") "[" first=RTCTLExpression "," second=RTCTLExpression "]" semicolon?=";"?;
		@Override public ParserRule getRule() { return rule; }
		
		//"COMPUTE" minMax=("MIN" | "MAX") "[" first=RTCTLExpression "," second=RTCTLExpression "]" semicolon?=";"?
		public Group getGroup() { return cGroup; }
		
		//"COMPUTE"
		public Keyword getCOMPUTEKeyword_0() { return cCOMPUTEKeyword_0; }
		
		//minMax=("MIN" | "MAX")
		public Assignment getMinMaxAssignment_1() { return cMinMaxAssignment_1; }
		
		//("MIN" | "MAX")
		public Alternatives getMinMaxAlternatives_1_0() { return cMinMaxAlternatives_1_0; }
		
		//"MIN"
		public Keyword getMinMaxMINKeyword_1_0_0() { return cMinMaxMINKeyword_1_0_0; }
		
		//"MAX"
		public Keyword getMinMaxMAXKeyword_1_0_1() { return cMinMaxMAXKeyword_1_0_1; }
		
		//"["
		public Keyword getLeftSquareBracketKeyword_2() { return cLeftSquareBracketKeyword_2; }
		
		//first=RTCTLExpression
		public Assignment getFirstAssignment_3() { return cFirstAssignment_3; }
		
		//RTCTLExpression
		public RuleCall getFirstRTCTLExpressionParserRuleCall_3_0() { return cFirstRTCTLExpressionParserRuleCall_3_0; }
		
		//","
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }
		
		//second=RTCTLExpression
		public Assignment getSecondAssignment_5() { return cSecondAssignment_5; }
		
		//RTCTLExpression
		public RuleCall getSecondRTCTLExpressionParserRuleCall_5_0() { return cSecondRTCTLExpressionParserRuleCall_5_0; }
		
		//"]"
		public Keyword getRightSquareBracketKeyword_6() { return cRightSquareBracketKeyword_6; }
		
		//semicolon?=";"?
		public Assignment getSemicolonAssignment_7() { return cSemicolonAssignment_7; }
		
		//";"
		public Keyword getSemicolonSemicolonKeyword_7_0() { return cSemicolonSemicolonKeyword_7_0; }
	}
	public class VariableIDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.nusmv.language.NuSMV.VariableID");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cTerminalVariableIDParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cFullStopKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final RuleCall cTerminalVariableIDParserRuleCall_1_0_1 = (RuleCall)cGroup_1_0.eContents().get(1);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1_1 = (Alternatives)cGroup_1_1.eContents().get(1);
		private final RuleCall cNUMBERParserRuleCall_1_1_1_0 = (RuleCall)cAlternatives_1_1_1.eContents().get(0);
		private final RuleCall cTerminalVariableIDParserRuleCall_1_1_1_1 = (RuleCall)cAlternatives_1_1_1.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_1_1_2 = (Keyword)cGroup_1_1.eContents().get(2);
		private final Group cGroup_1_2 = (Group)cAlternatives_1.eContents().get(2);
		private final Keyword cLeftSquareBracketKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final RuleCall cNUMBERParserRuleCall_1_2_1 = (RuleCall)cGroup_1_2.eContents().get(1);
		private final Keyword cColonKeyword_1_2_2 = (Keyword)cGroup_1_2.eContents().get(2);
		private final RuleCall cNUMBERParserRuleCall_1_2_3 = (RuleCall)cGroup_1_2.eContents().get(3);
		private final Keyword cRightSquareBracketKeyword_1_2_4 = (Keyword)cGroup_1_2.eContents().get(4);
		
		//VariableID hidden(WS, SL_COMMENT):
		//	TerminalVariableID ("." TerminalVariableID | "[" (NUMBER | TerminalVariableID) "]" | "[" NUMBER ":" NUMBER "]")*;
		@Override public ParserRule getRule() { return rule; }
		
		//TerminalVariableID ("." TerminalVariableID | "[" (NUMBER | TerminalVariableID) "]" | "[" NUMBER ":" NUMBER "]")*
		public Group getGroup() { return cGroup; }
		
		//TerminalVariableID
		public RuleCall getTerminalVariableIDParserRuleCall_0() { return cTerminalVariableIDParserRuleCall_0; }
		
		//("." TerminalVariableID | "[" (NUMBER | TerminalVariableID) "]" | "[" NUMBER ":" NUMBER "]")*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//"." TerminalVariableID
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//"."
		public Keyword getFullStopKeyword_1_0_0() { return cFullStopKeyword_1_0_0; }
		
		//TerminalVariableID
		public RuleCall getTerminalVariableIDParserRuleCall_1_0_1() { return cTerminalVariableIDParserRuleCall_1_0_1; }
		
		//"[" (NUMBER | TerminalVariableID) "]"
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//"["
		public Keyword getLeftSquareBracketKeyword_1_1_0() { return cLeftSquareBracketKeyword_1_1_0; }
		
		//(NUMBER | TerminalVariableID)
		public Alternatives getAlternatives_1_1_1() { return cAlternatives_1_1_1; }
		
		//NUMBER
		public RuleCall getNUMBERParserRuleCall_1_1_1_0() { return cNUMBERParserRuleCall_1_1_1_0; }
		
		//TerminalVariableID
		public RuleCall getTerminalVariableIDParserRuleCall_1_1_1_1() { return cTerminalVariableIDParserRuleCall_1_1_1_1; }
		
		//"]"
		public Keyword getRightSquareBracketKeyword_1_1_2() { return cRightSquareBracketKeyword_1_1_2; }
		
		//"[" NUMBER ":" NUMBER "]"
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//"["
		public Keyword getLeftSquareBracketKeyword_1_2_0() { return cLeftSquareBracketKeyword_1_2_0; }
		
		//NUMBER
		public RuleCall getNUMBERParserRuleCall_1_2_1() { return cNUMBERParserRuleCall_1_2_1; }
		
		//":"
		public Keyword getColonKeyword_1_2_2() { return cColonKeyword_1_2_2; }
		
		//NUMBER
		public RuleCall getNUMBERParserRuleCall_1_2_3() { return cNUMBERParserRuleCall_1_2_3; }
		
		//"]"
		public Keyword getRightSquareBracketKeyword_1_2_4() { return cRightSquareBracketKeyword_1_2_4; }
	}
	public class TerminalVariableIDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.nusmv.language.NuSMV.TerminalVariableID");
		private final RuleCall cIDTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//TerminalVariableID hidden(WS, SL_COMMENT):
		//	ID;
		@Override public ParserRule getRule() { return rule; }
		
		//ID
		public RuleCall getIDTerminalRuleCall() { return cIDTerminalRuleCall; }
	}
	public class NUMBERElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.nusmv.language.NuSMV.NUMBER");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		////NUMBER hidden(WS, SL_COMMENT): INT;
		//NUMBER:
		//	'-'? INT;
		@Override public ParserRule getRule() { return rule; }
		
		//'-'? INT
		public Group getGroup() { return cGroup; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}
	
	public class ComparisonoperatorsElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.nusmv.language.NuSMV.comparisonoperators");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cEqualEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cEqualEqualsSignKeyword_0_0 = (Keyword)cEqualEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cDisEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cDisExclamationMarkEqualsSignKeyword_1_0 = (Keyword)cDisEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cLEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cLLessThanSignKeyword_2_0 = (Keyword)cLEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cGEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cGGreaterThanSignKeyword_3_0 = (Keyword)cGEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cLeEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cLeLessThanSignEqualsSignKeyword_4_0 = (Keyword)cLeEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cGeEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cGeGreaterThanSignEqualsSignKeyword_5_0 = (Keyword)cGeEnumLiteralDeclaration_5.eContents().get(0);
		
		//enum comparisonoperators returns operators:
		//	equal='=' | dis='!=' | l='<' | g='>' | le='<=' | ge='>=';
		public EnumRule getRule() { return rule; }
		
		//equal='=' | dis='!=' | l='<' | g='>' | le='<=' | ge='>='
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//equal='='
		public EnumLiteralDeclaration getEqualEnumLiteralDeclaration_0() { return cEqualEnumLiteralDeclaration_0; }
		
		//'='
		public Keyword getEqualEqualsSignKeyword_0_0() { return cEqualEqualsSignKeyword_0_0; }
		
		//dis='!='
		public EnumLiteralDeclaration getDisEnumLiteralDeclaration_1() { return cDisEnumLiteralDeclaration_1; }
		
		//'!='
		public Keyword getDisExclamationMarkEqualsSignKeyword_1_0() { return cDisExclamationMarkEqualsSignKeyword_1_0; }
		
		//l='<'
		public EnumLiteralDeclaration getLEnumLiteralDeclaration_2() { return cLEnumLiteralDeclaration_2; }
		
		//'<'
		public Keyword getLLessThanSignKeyword_2_0() { return cLLessThanSignKeyword_2_0; }
		
		//g='>'
		public EnumLiteralDeclaration getGEnumLiteralDeclaration_3() { return cGEnumLiteralDeclaration_3; }
		
		//'>'
		public Keyword getGGreaterThanSignKeyword_3_0() { return cGGreaterThanSignKeyword_3_0; }
		
		//le='<='
		public EnumLiteralDeclaration getLeEnumLiteralDeclaration_4() { return cLeEnumLiteralDeclaration_4; }
		
		//'<='
		public Keyword getLeLessThanSignEqualsSignKeyword_4_0() { return cLeLessThanSignEqualsSignKeyword_4_0; }
		
		//ge='>='
		public EnumLiteralDeclaration getGeEnumLiteralDeclaration_5() { return cGeEnumLiteralDeclaration_5; }
		
		//'>='
		public Keyword getGeGreaterThanSignEqualsSignKeyword_5_0() { return cGeGreaterThanSignEqualsSignKeyword_5_0; }
	}
	public class OroperatorsElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.nusmv.language.NuSMV.oroperators");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cOrEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cOrVerticalLineKeyword_0_0 = (Keyword)cOrEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cXorEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cXorXorKeyword_1_0 = (Keyword)cXorEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cXnorEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cXnorXnorKeyword_2_0 = (Keyword)cXnorEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum oroperators returns operators:
		//	or='|' | xor | xnor;
		public EnumRule getRule() { return rule; }
		
		//or='|' | xor | xnor
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//or='|'
		public EnumLiteralDeclaration getOrEnumLiteralDeclaration_0() { return cOrEnumLiteralDeclaration_0; }
		
		//'|'
		public Keyword getOrVerticalLineKeyword_0_0() { return cOrVerticalLineKeyword_0_0; }
		
		//xor
		public EnumLiteralDeclaration getXorEnumLiteralDeclaration_1() { return cXorEnumLiteralDeclaration_1; }
		
		//'xor'
		public Keyword getXorXorKeyword_1_0() { return cXorXorKeyword_1_0; }
		
		//xnor
		public EnumLiteralDeclaration getXnorEnumLiteralDeclaration_2() { return cXnorEnumLiteralDeclaration_2; }
		
		//'xnor'
		public Keyword getXnorXnorKeyword_2_0() { return cXnorXnorKeyword_2_0; }
	}
	public class ImpliesoperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.nusmv.language.NuSMV.impliesoperator");
		private final EnumLiteralDeclaration cImpliesEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cImpliesHyphenMinusGreaterThanSignKeyword_0 = (Keyword)cImpliesEnumLiteralDeclaration.eContents().get(0);
		
		//enum impliesoperator returns operators:
		//	implies='->';
		public EnumRule getRule() { return rule; }
		
		//implies='->'
		public EnumLiteralDeclaration getImpliesEnumLiteralDeclaration() { return cImpliesEnumLiteralDeclaration; }
		
		//'->'
		public Keyword getImpliesHyphenMinusGreaterThanSignKeyword_0() { return cImpliesHyphenMinusGreaterThanSignKeyword_0; }
	}
	public class IffoperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.nusmv.language.NuSMV.iffoperator");
		private final EnumLiteralDeclaration cIffEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cIffLessThanSignHyphenMinusGreaterThanSignKeyword_0 = (Keyword)cIffEnumLiteralDeclaration.eContents().get(0);
		
		//enum iffoperator returns operators:
		//	iff='<->';
		public EnumRule getRule() { return rule; }
		
		//iff='<->'
		public EnumLiteralDeclaration getIffEnumLiteralDeclaration() { return cIffEnumLiteralDeclaration; }
		
		//'<->'
		public Keyword getIffLessThanSignHyphenMinusGreaterThanSignKeyword_0() { return cIffLessThanSignHyphenMinusGreaterThanSignKeyword_0; }
	}
	public class AndoperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.nusmv.language.NuSMV.andoperator");
		private final EnumLiteralDeclaration cAndEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cAndAmpersandKeyword_0 = (Keyword)cAndEnumLiteralDeclaration.eContents().get(0);
		
		//enum andoperator returns operators:
		//	and='&';
		public EnumRule getRule() { return rule; }
		
		//and='&'
		public EnumLiteralDeclaration getAndEnumLiteralDeclaration() { return cAndEnumLiteralDeclaration; }
		
		//'&'
		public Keyword getAndAmpersandKeyword_0() { return cAndAmpersandKeyword_0; }
	}
	public class LTLbinoperatorsElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.nusmv.language.NuSMV.LTLbinoperators");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cUEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cUUKeyword_0_0 = (Keyword)cUEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cVEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cVVKeyword_1_0 = (Keyword)cVEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cSEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cSSKeyword_2_0 = (Keyword)cSEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cTEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cTTKeyword_3_0 = (Keyword)cTEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum LTLbinoperators returns operators:
		//	u="U" | v="V" | s="S" | t="T";
		public EnumRule getRule() { return rule; }
		
		//u="U" | v="V" | s="S" | t="T"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//u="U"
		public EnumLiteralDeclaration getUEnumLiteralDeclaration_0() { return cUEnumLiteralDeclaration_0; }
		
		//"U"
		public Keyword getUUKeyword_0_0() { return cUUKeyword_0_0; }
		
		//v="V"
		public EnumLiteralDeclaration getVEnumLiteralDeclaration_1() { return cVEnumLiteralDeclaration_1; }
		
		//"V"
		public Keyword getVVKeyword_1_0() { return cVVKeyword_1_0; }
		
		//s="S"
		public EnumLiteralDeclaration getSEnumLiteralDeclaration_2() { return cSEnumLiteralDeclaration_2; }
		
		//"S"
		public Keyword getSSKeyword_2_0() { return cSSKeyword_2_0; }
		
		//t="T"
		public EnumLiteralDeclaration getTEnumLiteralDeclaration_3() { return cTEnumLiteralDeclaration_3; }
		
		//"T"
		public Keyword getTTKeyword_3_0() { return cTTKeyword_3_0; }
	}
	
	private final NuSmvModelElements pNuSmvModel;
	private final ModuleElements pModule;
	private final ModuleElementElements pModuleElement;
	private final VariableDeclarationElements pVariableDeclaration;
	private final IVariableDeclarationElements pIVariableDeclaration;
	private final FrozenVariableDeclarationElements pFrozenVariableDeclaration;
	private final VarBodyElements pVarBody;
	private final DefineDeclarationElements pDefineDeclaration;
	private final DefineBodyElements pDefineBody;
	private final ConstantsDeclarationElements pConstantsDeclaration;
	private final AssignConstraintElements pAssignConstraint;
	private final AssignBodyElements pAssignBody;
	private final VarBodyAssignElements pVarBodyAssign;
	private final InitBodyElements pInitBody;
	private final NextBodyElements pNextBody;
	private final TransConstraintElements pTransConstraint;
	private final InitConstraintElements pInitConstraint;
	private final InvarConstraintElements pInvarConstraint;
	private final FairnessConstraintElements pFairnessConstraint;
	private final FairnessExpressionElements pFairnessExpression;
	private final JusticeExpressionElements pJusticeExpression;
	private final CompassionExpressionElements pCompassionExpression;
	private final CtlSpecificationElements pCtlSpecification;
	private final PslSpecificationElements pPslSpecification;
	private final InvarSpecificationElements pInvarSpecification;
	private final IsaDeclarationElements pIsaDeclaration;
	private final LtlSpecificationElements pLtlSpecification;
	private final TypeElements pType;
	private final SimpleTypeElements pSimpleType;
	private final ModuleTypeElements pModuleType;
	private final ValElements pVal;
	private final NextExpressionElements pNextExpression;
	private final SimpleExpressionElements pSimpleExpression;
	private final LTLbinExpressionElements pLTLbinExpression;
	private final ImpliesExpressionElements pImpliesExpression;
	private final IffExpressionElements pIffExpression;
	private final OrExpressionElements pOrExpression;
	private final AndExpressionElements pAndExpression;
	private final ComparisonExpressionElements pComparisonExpression;
	private final InExpressionElements pInExpression;
	private final UnionExpressionElements pUnionExpression;
	private final RightShiftElements pRightShift;
	private final LeftShiftElements pLeftShift;
	private final MinusElements pMinus;
	private final PlusElements pPlus;
	private final MultElements pMult;
	private final ModElements pMod;
	private final WordConcatenationElements pWordConcatenation;
	private final DivElements pDiv;
	private final NotOrTerminalSimpleExpressionElements pNotOrTerminalSimpleExpression;
	private final TerminalSimpleExpressionElements pTerminalSimpleExpression;
	private final FormalParameterElements pFormalParameter;
	private final CaseSimpleExpressionElements pCaseSimpleExpression;
	private final CaseSimpleAssignementExpressionElements pCaseSimpleAssignementExpression;
	private final CTLExpressionElements pCTLExpression;
	private final PSLExpressionElements pPSLExpression;
	private final LTLExpressionElements pLTLExpression;
	private final RangeExpressionElements pRangeExpression;
	private final RTCTLExpressionElements pRTCTLExpression;
	private final ComputeSpecificationElements pComputeSpecification;
	private final VariableIDElements pVariableID;
	private final TerminalVariableIDElements pTerminalVariableID;
	private final ComparisonoperatorsElements eComparisonoperators;
	private final OroperatorsElements eOroperators;
	private final ImpliesoperatorElements eImpliesoperator;
	private final IffoperatorElements eIffoperator;
	private final AndoperatorElements eAndoperator;
	private final LTLbinoperatorsElements eLTLbinoperators;
	private final NUMBERElements pNUMBER;
	private final TerminalRule tSL_COMMENT;
	private final TerminalRule tWORD;
	private final TerminalRule tID;
	private final TerminalRule tINT;
	private final TerminalRule tWS;
	
	private final Grammar grammar;

	@Inject
	public NuSMVGrammarAccess(GrammarProvider grammarProvider) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.pNuSmvModel = new NuSmvModelElements();
		this.pModule = new ModuleElements();
		this.pModuleElement = new ModuleElementElements();
		this.pVariableDeclaration = new VariableDeclarationElements();
		this.pIVariableDeclaration = new IVariableDeclarationElements();
		this.pFrozenVariableDeclaration = new FrozenVariableDeclarationElements();
		this.pVarBody = new VarBodyElements();
		this.pDefineDeclaration = new DefineDeclarationElements();
		this.pDefineBody = new DefineBodyElements();
		this.pConstantsDeclaration = new ConstantsDeclarationElements();
		this.pAssignConstraint = new AssignConstraintElements();
		this.pAssignBody = new AssignBodyElements();
		this.pVarBodyAssign = new VarBodyAssignElements();
		this.pInitBody = new InitBodyElements();
		this.pNextBody = new NextBodyElements();
		this.pTransConstraint = new TransConstraintElements();
		this.pInitConstraint = new InitConstraintElements();
		this.pInvarConstraint = new InvarConstraintElements();
		this.pFairnessConstraint = new FairnessConstraintElements();
		this.pFairnessExpression = new FairnessExpressionElements();
		this.pJusticeExpression = new JusticeExpressionElements();
		this.pCompassionExpression = new CompassionExpressionElements();
		this.pCtlSpecification = new CtlSpecificationElements();
		this.pPslSpecification = new PslSpecificationElements();
		this.pInvarSpecification = new InvarSpecificationElements();
		this.pIsaDeclaration = new IsaDeclarationElements();
		this.pLtlSpecification = new LtlSpecificationElements();
		this.pType = new TypeElements();
		this.pSimpleType = new SimpleTypeElements();
		this.pModuleType = new ModuleTypeElements();
		this.pVal = new ValElements();
		this.pNextExpression = new NextExpressionElements();
		this.pSimpleExpression = new SimpleExpressionElements();
		this.pLTLbinExpression = new LTLbinExpressionElements();
		this.pImpliesExpression = new ImpliesExpressionElements();
		this.pIffExpression = new IffExpressionElements();
		this.pOrExpression = new OrExpressionElements();
		this.pAndExpression = new AndExpressionElements();
		this.pComparisonExpression = new ComparisonExpressionElements();
		this.pInExpression = new InExpressionElements();
		this.pUnionExpression = new UnionExpressionElements();
		this.pRightShift = new RightShiftElements();
		this.pLeftShift = new LeftShiftElements();
		this.pMinus = new MinusElements();
		this.pPlus = new PlusElements();
		this.pMult = new MultElements();
		this.pMod = new ModElements();
		this.pWordConcatenation = new WordConcatenationElements();
		this.pDiv = new DivElements();
		this.pNotOrTerminalSimpleExpression = new NotOrTerminalSimpleExpressionElements();
		this.pTerminalSimpleExpression = new TerminalSimpleExpressionElements();
		this.pFormalParameter = new FormalParameterElements();
		this.pCaseSimpleExpression = new CaseSimpleExpressionElements();
		this.pCaseSimpleAssignementExpression = new CaseSimpleAssignementExpressionElements();
		this.pCTLExpression = new CTLExpressionElements();
		this.pPSLExpression = new PSLExpressionElements();
		this.pLTLExpression = new LTLExpressionElements();
		this.pRangeExpression = new RangeExpressionElements();
		this.pRTCTLExpression = new RTCTLExpressionElements();
		this.pComputeSpecification = new ComputeSpecificationElements();
		this.pVariableID = new VariableIDElements();
		this.pTerminalVariableID = new TerminalVariableIDElements();
		this.eComparisonoperators = new ComparisonoperatorsElements();
		this.eOroperators = new OroperatorsElements();
		this.eImpliesoperator = new ImpliesoperatorElements();
		this.eIffoperator = new IffoperatorElements();
		this.eAndoperator = new AndoperatorElements();
		this.eLTLbinoperators = new LTLbinoperatorsElements();
		this.pNUMBER = new NUMBERElements();
		this.tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.nusmv.language.NuSMV.SL_COMMENT");
		this.tWORD = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.nusmv.language.NuSMV.WORD");
		this.tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.nusmv.language.NuSMV.ID");
		this.tINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.nusmv.language.NuSMV.INT");
		this.tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.nusmv.language.NuSMV.WS");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.nusmv.language.NuSMV".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	
	//NuSmvModel hidden(WS, SL_COMMENT):
	//	modules+=Module*;
	public NuSmvModelElements getNuSmvModelAccess() {
		return pNuSmvModel;
	}
	
	public ParserRule getNuSmvModelRule() {
		return getNuSmvModelAccess().getRule();
	}
	
	//Module:
	//	"MODULE" name=ID ("(" params+=FormalParameter ("," params+=FormalParameter)* ")")?
	//	//"MODULE" ID=ID ("(" (params+=FormalParameter) ("," params+=FormalParameter)* ")")?
	//	//"MODULE" ID=ID ("(" (params+=ID) ("," params+=ID)* ")")?
	//	moduleElement+=ModuleElement*;
	public ModuleElements getModuleAccess() {
		return pModule;
	}
	
	public ParserRule getModuleRule() {
		return getModuleAccess().getRule();
	}
	
	////un ModuleElement e' una sezione del modulo
	//ModuleElement hidden(WS, SL_COMMENT):
	//	VariableDeclaration | IVariableDeclaration | FrozenVariableDeclaration | DefineDeclaration | ConstantsDeclaration |
	//	AssignConstraint | TransConstraint | InitConstraint | InvarConstraint | FairnessConstraint | CtlSpecification |
	//	PslSpecification | InvarSpecification | LtlSpecification | IsaDeclaration | ComputeSpecification;
	public ModuleElementElements getModuleElementAccess() {
		return pModuleElement;
	}
	
	public ParserRule getModuleElementRule() {
		return getModuleElementAccess().getRule();
	}
	
	////Also the single keyword "VAR" is accepted (without anything else)
	//VariableDeclaration hidden(WS, SL_COMMENT): //"VAR" (vars+=VarBody ";")+
	//	"VAR" {VariableDeclaration} vars+=VarBody*;
	public VariableDeclarationElements getVariableDeclarationAccess() {
		return pVariableDeclaration;
	}
	
	public ParserRule getVariableDeclarationRule() {
		return getVariableDeclarationAccess().getRule();
	}
	
	//IVariableDeclaration hidden(WS, SL_COMMENT):
	//	"IVAR" vars+=VarBody+;
	public IVariableDeclarationElements getIVariableDeclarationAccess() {
		return pIVariableDeclaration;
	}
	
	public ParserRule getIVariableDeclarationRule() {
		return getIVariableDeclarationAccess().getRule();
	}
	
	//FrozenVariableDeclaration hidden(WS, SL_COMMENT):
	//	"FROZENVAR" vars+=VarBody+;
	public FrozenVariableDeclarationElements getFrozenVariableDeclarationAccess() {
		return pFrozenVariableDeclaration;
	}
	
	public ParserRule getFrozenVariableDeclarationRule() {
		return getFrozenVariableDeclarationAccess().getRule();
	}
	
	//VarBody hidden(WS, SL_COMMENT):
	//	name=ID ":" type=Type semicolon?=";";
	public VarBodyElements getVarBodyAccess() {
		return pVarBody;
	}
	
	public ParserRule getVarBodyRule() {
		return getVarBodyAccess().getRule();
	}
	
	//DefineDeclaration hidden(WS, SL_COMMENT):
	//	define="DEFINE" defineBodies+=DefineBody*;
	public DefineDeclarationElements getDefineDeclarationAccess() {
		return pDefineDeclaration;
	}
	
	public ParserRule getDefineDeclarationRule() {
		return getDefineDeclarationAccess().getRule();
	}
	
	//DefineBody hidden(WS, SL_COMMENT):
	//	var=ID ":=" assignment=SimpleExpression semicolon?=";";
	public DefineBodyElements getDefineBodyAccess() {
		return pDefineBody;
	}
	
	public ParserRule getDefineBodyRule() {
		return getDefineBodyAccess().getRule();
	}
	
	//ConstantsDeclaration hidden(WS, SL_COMMENT):
	//	"CONSTANTS" constants+=ID ("," constants+=ID)* semicolon?=";";
	public ConstantsDeclarationElements getConstantsDeclarationAccess() {
		return pConstantsDeclaration;
	}
	
	public ParserRule getConstantsDeclarationRule() {
		return getConstantsDeclarationAccess().getRule();
	}
	
	//// 2.3.8 ASSIGN Constraint
	//AssignConstraint AssignConstraintElement hidden(WS, SL_COMMENT):
	//	assign="ASSIGN" bodies+=AssignBody*;
	public AssignConstraintElements getAssignConstraintAccess() {
		return pAssignConstraint;
	}
	
	public ParserRule getAssignConstraintRule() {
		return getAssignConstraintAccess().getRule();
	}
	
	//AssignBody hidden(WS, SL_COMMENT):
	//	VarBodyAssign | InitBody | NextBody;
	public AssignBodyElements getAssignBodyAccess() {
		return pAssignBody;
	}
	
	public ParserRule getAssignBodyRule() {
		return getAssignBodyAccess().getRule();
	}
	
	//VarBodyAssign hidden(WS, SL_COMMENT):
	//	var=VariableID ":=" assignment=SimpleExpression semicolon?=";";
	public VarBodyAssignElements getVarBodyAssignAccess() {
		return pVarBodyAssign;
	}
	
	public ParserRule getVarBodyAssignRule() {
		return getVarBodyAssignAccess().getRule();
	}
	
	//InitBody hidden(WS, SL_COMMENT):
	//	"init" "(" var=VariableID ")" ":=" initial=SimpleExpression semicolon?=";";
	public InitBodyElements getInitBodyAccess() {
		return pInitBody;
	}
	
	public ParserRule getInitBodyRule() {
		return getInitBodyAccess().getRule();
	}
	
	//// Non so se la seguente potrebbe essere una via di risoluzione, ma dopo averla provata
	//// non mi sembra sensata e mi da' errore nel generare il linguaggio
	////InitBody returns AssignBodyInit hidden(WS, SL_COMMENT):
	////	"init" "(" var=[VarBody|ID] ")" ":=" initial=(SimpleExpression|[VarBody]) semicolon?=";";
	//// next of a (qualified) variable
	//// TODO refactor qualified variable
	//NextBody hidden(WS, SL_COMMENT):
	//	"next" "(" var=VariableID ")" ":=" next=NextExpression semicolon?=";";
	public NextBodyElements getNextBodyAccess() {
		return pNextBody;
	}
	
	public ParserRule getNextBodyRule() {
		return getNextBodyAccess().getRule();
	}
	
	//TransConstraint hidden(WS, SL_COMMENT):
	//	"TRANS" transExpression=SimpleExpression semicolon?=";"?;
	public TransConstraintElements getTransConstraintAccess() {
		return pTransConstraint;
	}
	
	public ParserRule getTransConstraintRule() {
		return getTransConstraintAccess().getRule();
	}
	
	//InitConstraint hidden(WS, SL_COMMENT):
	//	"INIT" initExpression=SimpleExpression semicolon?=";"?;
	public InitConstraintElements getInitConstraintAccess() {
		return pInitConstraint;
	}
	
	public ParserRule getInitConstraintRule() {
		return getInitConstraintAccess().getRule();
	}
	
	//InvarConstraint hidden(WS, SL_COMMENT):
	//	"INVAR" invarExpression=SimpleExpression semicolon?=";"?;
	public InvarConstraintElements getInvarConstraintAccess() {
		return pInvarConstraint;
	}
	
	public ParserRule getInvarConstraintRule() {
		return getInvarConstraintAccess().getRule();
	}
	
	//FairnessConstraint hidden(WS, SL_COMMENT):
	//	FairnessExpression | JusticeExpression | CompassionExpression;
	public FairnessConstraintElements getFairnessConstraintAccess() {
		return pFairnessConstraint;
	}
	
	public ParserRule getFairnessConstraintRule() {
		return getFairnessConstraintAccess().getRule();
	}
	
	//FairnessExpression hidden(WS, SL_COMMENT):
	//	"FAIRNESS" fairnessExpr=SimpleExpression semicolon?=";"?;
	public FairnessExpressionElements getFairnessExpressionAccess() {
		return pFairnessExpression;
	}
	
	public ParserRule getFairnessExpressionRule() {
		return getFairnessExpressionAccess().getRule();
	}
	
	//JusticeExpression hidden(WS, SL_COMMENT):
	//	"JUSTICE" justiceExpr=SimpleExpression semicolon?=";"?;
	public JusticeExpressionElements getJusticeExpressionAccess() {
		return pJusticeExpression;
	}
	
	public ParserRule getJusticeExpressionRule() {
		return getJusticeExpressionAccess().getRule();
	}
	
	//CompassionExpression hidden(WS, SL_COMMENT):
	//	"COMPASSION (" firstExpr=SimpleExpression "," secondExpr=SimpleExpression ")" semicolon?=";"?;
	public CompassionExpressionElements getCompassionExpressionAccess() {
		return pCompassionExpression;
	}
	
	public ParserRule getCompassionExpressionRule() {
		return getCompassionExpressionAccess().getRule();
	}
	
	////It doesn't work. It doesn't get all the CTL properties. Why?
	////Isn't it equivalent to the previous one?
	//CtlSpecification hidden(WS, SL_COMMENT):
	//	specKeyWord=("CTLSPEC" | "SPEC") (nameKeyWord?="NAME" name=ID ":=")? ctlExpression=CTLExpression semicolon?=";"?;
	public CtlSpecificationElements getCtlSpecificationAccess() {
		return pCtlSpecification;
	}
	
	public ParserRule getCtlSpecificationRule() {
		return getCtlSpecificationAccess().getRule();
	}
	
	//PslSpecification hidden(WS, SL_COMMENT):
	//	"PSLSPEC" (nameKeyWord?="NAME" name=ID ":=")? pslExpression=PSLExpression semicolon?=";"?;
	public PslSpecificationElements getPslSpecificationAccess() {
		return pPslSpecification;
	}
	
	public ParserRule getPslSpecificationRule() {
		return getPslSpecificationAccess().getRule();
	}
	
	//InvarSpecification hidden(WS, SL_COMMENT):
	//	"INVARSPEC" invarSpec=NextExpression ";" | "INVARSPEC" name=ID ":=" invarSpec=NextExpression semicolon?=";"?;
	public InvarSpecificationElements getInvarSpecificationAccess() {
		return pInvarSpecification;
	}
	
	public ParserRule getInvarSpecificationRule() {
		return getInvarSpecificationAccess().getRule();
	}
	
	//IsaDeclaration hidden(WS, SL_COMMENT):
	//	"ISA" id=ID;
	public IsaDeclarationElements getIsaDeclarationAccess() {
		return pIsaDeclaration;
	}
	
	public ParserRule getIsaDeclarationRule() {
		return getIsaDeclarationAccess().getRule();
	}
	
	//LtlSpecification hidden(WS, SL_COMMENT):
	//	"LTLSPEC" (nameId?="NAME" name=ID ":=")? ltlExpression=LTLExpression semicolon?=";"?;
	public LtlSpecificationElements getLtlSpecificationAccess() {
		return pLtlSpecification;
	}
	
	public ParserRule getLtlSpecificationRule() {
		return getLtlSpecificationAccess().getRule();
	}
	
	//Type hidden(WS, SL_COMMENT):
	//	SimpleType | ModuleType;
	public TypeElements getTypeAccess() {
		return pType;
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}
	
	//SimpleType hidden(WS, SL_COMMENT):
	//	{BooleanType} "boolean" | {WordType} ("word" "[" wordNumber=NUMBER "]") | {UnsignedWordType} ("unsigned" "word" "["
	//	uWordNumber=NUMBER "]") | {SignedWordType} ("signed word" "[" signedNumber=NUMBER "]") | {EnumType} "{" val+=Val (","
	//	val+=Val)* "}" | {IntervalType} (low=(NUMBER | VariableID) ".." high=(NUMBER | VariableID)) | {ArrayType} "array"
	//	lowerBound=(NUMBER | VariableID) ".."
	//	upperBound=(NUMBER | VariableID) "of" type=SimpleType;
	public SimpleTypeElements getSimpleTypeAccess() {
		return pSimpleType;
	}
	
	public ParserRule getSimpleTypeRule() {
		return getSimpleTypeAccess().getRule();
	}
	
	//ModuleType hidden(WS, SL_COMMENT):
	//	{AsyncrProcessType} ("process" module=[Module] ("(" (params+=SimpleExpression | par=[VarBody]) (","
	//	params+=SimpleExpression)* ")")?) | {SyncrProcessType} (module=[Module] ("(" (params+=SimpleExpression |
	//	par=[VarBody]) (","
	//	params+=SimpleExpression)* ")")?);
	public ModuleTypeElements getModuleTypeAccess() {
		return pModuleType;
	}
	
	public ParserRule getModuleTypeRule() {
		return getModuleTypeAccess().getRule();
	}
	
	//// value element of enumerative or numeric value or boolean constant
	//Val hidden(WS, SL_COMMENT):
	//	{Val} (name=ID | num=NUMBER | "TRUE" | "FALSE");
	public ValElements getValAccess() {
		return pVal;
	}
	
	public ParserRule getValRule() {
		return getValAccess().getRule();
	}
	
	//NextExpression hidden(WS, SL_COMMENT):
	//	simpleExpression=SimpleExpression;
	public NextExpressionElements getNextExpressionAccess() {
		return pNextExpression;
	}
	
	public ParserRule getNextExpressionRule() {
		return getNextExpressionAccess().getRule();
	}
	
	//SimpleExpression:
	//	LTLbinExpression;
	public SimpleExpressionElements getSimpleExpressionAccess() {
		return pSimpleExpression;
	}
	
	public ParserRule getSimpleExpressionRule() {
		return getSimpleExpressionAccess().getRule();
	}
	
	//LTLbinExpression SimpleExpression:
	//	=> ImpliesExpression ({BinaryExpression.left=current} operator=LTLbinoperators right=ImpliesExpression)*;
	public LTLbinExpressionElements getLTLbinExpressionAccess() {
		return pLTLbinExpression;
	}
	
	public ParserRule getLTLbinExpressionRule() {
		return getLTLbinExpressionAccess().getRule();
	}
	
	//ImpliesExpression SimpleExpression:
	//	=> IffExpression ({BinaryExpression.left=current} operator=impliesoperator right=IffExpression)*;
	public ImpliesExpressionElements getImpliesExpressionAccess() {
		return pImpliesExpression;
	}
	
	public ParserRule getImpliesExpressionRule() {
		return getImpliesExpressionAccess().getRule();
	}
	
	//IffExpression SimpleExpression: //left=IfThenElseExpression ({BinaryExpression.left=current} operator="<->" right = IfThenElseExpression)*;
	//	=> OrExpression ({BinaryExpression.left=current} operator=iffoperator right=OrExpression)*;
	public IffExpressionElements getIffExpressionAccess() {
		return pIffExpression;
	}
	
	public ParserRule getIffExpressionRule() {
		return getIffExpressionAccess().getRule();
	}
	
	////IfThenElseExpression returns TernaryExpression:
	////	cond=OrExpression "?" then=OrExpression ":" else=OrExpression;
	////fine PA
	//OrExpression SimpleExpression:
	//	=> AndExpression ({BinaryExpression.left=current} operator=oroperators right=AndExpression)*;
	public OrExpressionElements getOrExpressionAccess() {
		return pOrExpression;
	}
	
	public ParserRule getOrExpressionRule() {
		return getOrExpressionAccess().getRule();
	}
	
	////left=AndExpression (operator=('|'|'xor'|'xnor') right = AndExpression)?;
	//AndExpression SimpleExpression:
	//	=> ComparisonExpression ({BinaryExpression.left=current} operator=andoperator right=ComparisonExpression)*;
	public AndExpressionElements getAndExpressionAccess() {
		return pAndExpression;
	}
	
	public ParserRule getAndExpressionRule() {
		return getAndExpressionAccess().getRule();
	}
	
	////left=ComparisonExpression (operator='&' right=ComparisonExpression)?;
	//ComparisonExpression SimpleExpression: //first=ATOM (operator=('='|'!='|'<'|'>'|'<='|'>=') second=ATOM)?;
	////left=ATOM ({BinaryExpression.left = current} operator='&' right=BasicExpression)*;
	//	=> InExpression ({BinaryExpression.left=current} operator=comparisonoperators right=InExpression)*;
	public ComparisonExpressionElements getComparisonExpressionAccess() {
		return pComparisonExpression;
	}
	
	public ParserRule getComparisonExpressionRule() {
		return getComparisonExpressionAccess().getRule();
	}
	
	////ComparisonExpression returns BinaryExpression:
	////	InExpression ({BinaryExpression.left = current} operator=('='|'!='|'<'|'>'|'<='|'>=') right=NotExpression)*;
	//InExpression SimpleExpression:
	//	=> UnionExpression ({BinaryExpression.left=current} op="in" right=UnionExpression)*;
	public InExpressionElements getInExpressionAccess() {
		return pInExpression;
	}
	
	public ParserRule getInExpressionRule() {
		return getInExpressionAccess().getRule();
	}
	
	//UnionExpression SimpleExpression:
	//	=> RightShift ({BinaryExpression.left=current} op="union" right=RightShift)*;
	public UnionExpressionElements getUnionExpressionAccess() {
		return pUnionExpression;
	}
	
	public ParserRule getUnionExpressionRule() {
		return getUnionExpressionAccess().getRule();
	}
	
	//RightShift SimpleExpression:
	//	=> LeftShift ({BinaryExpression.left=current} op=">>" right=LeftShift)*;
	public RightShiftElements getRightShiftAccess() {
		return pRightShift;
	}
	
	public ParserRule getRightShiftRule() {
		return getRightShiftAccess().getRule();
	}
	
	//LeftShift SimpleExpression:
	//	=> Minus ({BinaryExpression.left=current} op="<<" right=Minus)*;
	public LeftShiftElements getLeftShiftAccess() {
		return pLeftShift;
	}
	
	public ParserRule getLeftShiftRule() {
		return getLeftShiftAccess().getRule();
	}
	
	//Minus SimpleExpression:
	//	=> Plus ({BinaryExpression.left=current} op="-" right=Plus)*;
	public MinusElements getMinusAccess() {
		return pMinus;
	}
	
	public ParserRule getMinusRule() {
		return getMinusAccess().getRule();
	}
	
	//Plus SimpleExpression:
	//	=> Mult ({BinaryExpression.left=current} op="+" right=Mult)*;
	public PlusElements getPlusAccess() {
		return pPlus;
	}
	
	public ParserRule getPlusRule() {
		return getPlusAccess().getRule();
	}
	
	//Mult SimpleExpression:
	//	=> Mod ({BinaryExpression.left=current} op="*" right=Mod)*;
	public MultElements getMultAccess() {
		return pMult;
	}
	
	public ParserRule getMultRule() {
		return getMultAccess().getRule();
	}
	
	//Mod SimpleExpression:
	//	=> WordConcatenation ({BinaryExpression.left=current} op="mod" right=WordConcatenation)*;
	public ModElements getModAccess() {
		return pMod;
	}
	
	public ParserRule getModRule() {
		return getModAccess().getRule();
	}
	
	//WordConcatenation SimpleExpression: //left=LTLbinExpression ({BinaryExpression.left = current} operator="::" right=LTLbinExpression)*;
	//	=> Div ({BinaryExpression.left=current} op="::" right=Div)*;
	public WordConcatenationElements getWordConcatenationAccess() {
		return pWordConcatenation;
	}
	
	public ParserRule getWordConcatenationRule() {
		return getWordConcatenationAccess().getRule();
	}
	
	//Div SimpleExpression:
	//	=> NotOrTerminalSimpleExpression ({BinaryExpression.left=current} op='/' right=NotOrTerminalSimpleExpression)*;
	public DivElements getDivAccess() {
		return pDiv;
	}
	
	public ParserRule getDivRule() {
		return getDivAccess().getRule();
	}
	
	////TerminalSimpleExpression ({Div.left=current} op='/' right=SimpleExpression)*;
	////first=TerminalSimpleExpression ( operator="/" second=SimpleExpression)?;
	//NotOrTerminalSimpleExpression SimpleExpression:
	//	{Not} '!' exp=TerminalSimpleExpression | TerminalSimpleExpression;
	public NotOrTerminalSimpleExpressionElements getNotOrTerminalSimpleExpressionAccess() {
		return pNotOrTerminalSimpleExpression;
	}
	
	public ParserRule getNotOrTerminalSimpleExpressionRule() {
		return getNotOrTerminalSimpleExpressionAccess().getRule();
	}
	
	//TerminalSimpleExpression SimpleExpression hidden(WS, SL_COMMENT):
	//	{ParsExpression} isNext="next"? "(" simpleExpression=SimpleExpression ")"
	//	| {UnaryExpression} (operator=('-' | '+' | 'EG' | 'EX' | 'EF' | 'AG' | 'AX' | 'AF' | 'X' | 'G' | 'F' | 'Y' | 'Z' | 'H'
	//	| 'O') simpleExpression=SimpleExpression) | CaseSimpleExpression
	//	| {ValueExpression} value=VariableID ('[' array+=NUMBER ']')*
	//	| {Var} value=[VarBody] ("." dotted=TerminalSimpleExpression | ('[' array+=NUMBER ']')*)?
	//	| {SetElementExpression} val=[Val] | {SetValueParameter} valparam=[FormalParameter] | {ValueExpression} value=ID |
	//	{ValueExpression} value=NUMBER | {ValueExpression} value="TRUE" | {ValueExpression} value="FALSE" | {ValueExpression}
	//	value="self"
	//	| {SetExpression} "{" setElement+=SimpleExpression ("," setElement+=SimpleExpression)* "}"
	//	| {WordExpression} value=WORD | {IntervalExpression} lowerBound=NUMBER ".." upperBound=NUMBER | {UntilCTLexpression}
	//	ea=("E" | "A") "[" arg=LTLbinExpression "]" | {UnaryFunctionExpression} function=("word1" |
	//	"bool") "(" arg=SimpleExpression ")" | {ToInt} "toint" "(" arg=SimpleExpression ")";
	public TerminalSimpleExpressionElements getTerminalSimpleExpressionAccess() {
		return pTerminalSimpleExpression;
	}
	
	public ParserRule getTerminalSimpleExpressionRule() {
		return getTerminalSimpleExpressionAccess().getRule();
	}
	
	//FormalParameter:
	//	name=ID ("."? ID)*;
	public FormalParameterElements getFormalParameterAccess() {
		return pFormalParameter;
	}
	
	public ParserRule getFormalParameterRule() {
		return getFormalParameterAccess().getRule();
	}
	
	//CaseSimpleExpression hidden(WS, SL_COMMENT):
	//	"case" branches+=CaseSimpleAssignementExpression+ "esac";
	public CaseSimpleExpressionElements getCaseSimpleExpressionAccess() {
		return pCaseSimpleExpression;
	}
	
	public ParserRule getCaseSimpleExpressionRule() {
		return getCaseSimpleExpressionAccess().getRule();
	}
	
	//CaseSimpleAssignementExpression hidden(WS, SL_COMMENT):
	//	case=SimpleExpression ":" assignment=SimpleExpression ";";
	public CaseSimpleAssignementExpressionElements getCaseSimpleAssignementExpressionAccess() {
		return pCaseSimpleAssignementExpression;
	}
	
	public ParserRule getCaseSimpleAssignementExpressionRule() {
		return getCaseSimpleAssignementExpressionAccess().getRule();
	}
	
	//CTLExpression hidden(WS, SL_COMMENT):
	//	simpleExpression=SimpleExpression;
	public CTLExpressionElements getCTLExpressionAccess() {
		return pCTLExpression;
	}
	
	public ParserRule getCTLExpressionRule() {
		return getCTLExpressionAccess().getRule();
	}
	
	//PSLExpression hidden(WS, SL_COMMENT):
	//	simpleExpression=SimpleExpression;
	public PSLExpressionElements getPSLExpressionAccess() {
		return pPSLExpression;
	}
	
	public ParserRule getPSLExpressionRule() {
		return getPSLExpressionAccess().getRule();
	}
	
	//LTLExpression hidden(WS, SL_COMMENT):
	//	simpleExpression=SimpleExpression;
	public LTLExpressionElements getLTLExpressionAccess() {
		return pLTLExpression;
	}
	
	public ParserRule getLTLExpressionRule() {
		return getLTLExpressionAccess().getRule();
	}
	
	//RangeExpression:
	//	lower=NUMBER ".." upper=NUMBER;
	public RangeExpressionElements getRangeExpressionAccess() {
		return pRangeExpression;
	}
	
	public ParserRule getRangeExpressionRule() {
		return getRangeExpressionAccess().getRule();
	}
	
	//RTCTLExpression hidden(WS, SL_COMMENT):
	//	{SingleRTCTLExpression} ctlExpression=(CTLExpression | FormalParameter) | {UnaryRTCTLExpression} unary=("EBF" | "ABF"
	//	| "EBG" | "ABG") range=RangeExpression rctl=RTCTLExpression;
	public RTCTLExpressionElements getRTCTLExpressionAccess() {
		return pRTCTLExpression;
	}
	
	public ParserRule getRTCTLExpressionRule() {
		return getRTCTLExpressionAccess().getRule();
	}
	
	//ComputeSpecification:
	//	"COMPUTE" minMax=("MIN" | "MAX") "[" first=RTCTLExpression "," second=RTCTLExpression "]" semicolon?=";"?;
	public ComputeSpecificationElements getComputeSpecificationAccess() {
		return pComputeSpecification;
	}
	
	public ParserRule getComputeSpecificationRule() {
		return getComputeSpecificationAccess().getRule();
	}
	
	//VariableID hidden(WS, SL_COMMENT):
	//	TerminalVariableID ("." TerminalVariableID | "[" (NUMBER | TerminalVariableID) "]" | "[" NUMBER ":" NUMBER "]")*;
	public VariableIDElements getVariableIDAccess() {
		return pVariableID;
	}
	
	public ParserRule getVariableIDRule() {
		return getVariableIDAccess().getRule();
	}
	
	//TerminalVariableID hidden(WS, SL_COMMENT):
	//	ID;
	public TerminalVariableIDElements getTerminalVariableIDAccess() {
		return pTerminalVariableID;
	}
	
	public ParserRule getTerminalVariableIDRule() {
		return getTerminalVariableIDAccess().getRule();
	}
	
	//enum comparisonoperators returns operators:
	//	equal='=' | dis='!=' | l='<' | g='>' | le='<=' | ge='>=';
	public ComparisonoperatorsElements getComparisonoperatorsAccess() {
		return eComparisonoperators;
	}
	
	public EnumRule getComparisonoperatorsRule() {
		return getComparisonoperatorsAccess().getRule();
	}
	
	//enum oroperators returns operators:
	//	or='|' | xor | xnor;
	public OroperatorsElements getOroperatorsAccess() {
		return eOroperators;
	}
	
	public EnumRule getOroperatorsRule() {
		return getOroperatorsAccess().getRule();
	}
	
	//enum impliesoperator returns operators:
	//	implies='->';
	public ImpliesoperatorElements getImpliesoperatorAccess() {
		return eImpliesoperator;
	}
	
	public EnumRule getImpliesoperatorRule() {
		return getImpliesoperatorAccess().getRule();
	}
	
	//enum iffoperator returns operators:
	//	iff='<->';
	public IffoperatorElements getIffoperatorAccess() {
		return eIffoperator;
	}
	
	public EnumRule getIffoperatorRule() {
		return getIffoperatorAccess().getRule();
	}
	
	//enum andoperator returns operators:
	//	and='&';
	public AndoperatorElements getAndoperatorAccess() {
		return eAndoperator;
	}
	
	public EnumRule getAndoperatorRule() {
		return getAndoperatorAccess().getRule();
	}
	
	//enum LTLbinoperators returns operators:
	//	u="U" | v="V" | s="S" | t="T";
	public LTLbinoperatorsElements getLTLbinoperatorsAccess() {
		return eLTLbinoperators;
	}
	
	public EnumRule getLTLbinoperatorsRule() {
		return getLTLbinoperatorsAccess().getRule();
	}
	
	////NUMBER hidden(WS, SL_COMMENT): INT;
	//NUMBER:
	//	'-'? INT;
	public NUMBERElements getNUMBERAccess() {
		return pNUMBER;
	}
	
	public ParserRule getNUMBERRule() {
		return getNUMBERAccess().getRule();
	}
	
	//terminal SL_COMMENT:
	//	'--' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return tSL_COMMENT;
	}
	
	//terminal WORD:
	//	'0' ('u' | 's')? ('b' | 'B' | 'o' | 'O' | '_' | 'd' | 'D' | 'h' | 'H') INT? '_' ('a'..'f' | 'A.' . 'F' | INT)*;
	public TerminalRule getWORDRule() {
		return tWORD;
	}
	
	//terminal ID:
	//	('A'..'Z' | 'a'..'z' | '_') ('A'..'Z' | 'a'..'z' | '_' | INT | '$' | '#' | '-' | ".")*;
	public TerminalRule getIDRule() {
		return tID;
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return tINT;
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return tWS;
	}
}
